; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\utils.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\utils.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\utils.crf ..\..\usr\utils.c]
                          THUMB

                          AREA ||i.UTILS_Atoh||, CODE, READONLY, ALIGN=1

                  UTILS_Atoh PROC
;;;129    }
;;;130    uint32_t  UTILS_Atoh(const int8_t *s)
000000  4602              MOV      r2,r0
;;;131    {
;;;132    	uint32_t value = 0, digit;
000002  2000              MOVS     r0,#0
000004  e012              B        |L1.44|
                  |L1.6|
;;;133    	int8_t c;
;;;134    	
;;;135    	while((c = *s++)){
;;;136    		if('0' <= c && c <= '9')
000006  f1a10330          SUB      r3,r1,#0x30
00000a  2b09              CMP      r3,#9
00000c  d801              BHI      |L1.18|
00000e  4619              MOV      r1,r3
;;;137    			digit = c - '0';
000010  e00a              B        |L1.40|
                  |L1.18|
;;;138    		else if('A' <= c && c <= 'F')
000012  f1a10341          SUB      r3,r1,#0x41
000016  2b05              CMP      r3,#5
000018  d801              BHI      |L1.30|
00001a  3937              SUBS     r1,r1,#0x37
;;;139    			digit = c - 'A' + 10;
00001c  e004              B        |L1.40|
                  |L1.30|
;;;140    		else if('a' <= c && c<= 'f')
00001e  f1a10361          SUB      r3,r1,#0x61
000022  2b05              CMP      r3,#5
000024  d806              BHI      |L1.52|
000026  3957              SUBS     r1,r1,#0x57
                  |L1.40|
;;;141    			digit = c - 'a' + 10;
;;;142    		else break;
;;;143    		
;;;144    		value = (value << 4) | digit;
000028  ea411000          ORR      r0,r1,r0,LSL #4
                  |L1.44|
00002c  f9121b01          LDRSB    r1,[r2],#1            ;135
000030  2900              CMP      r1,#0                 ;135
000032  d1e8              BNE      |L1.6|
                  |L1.52|
;;;145    	}
;;;146    	
;;;147    	return value;
;;;148    }
000034  4770              BX       lr
;;;149    
                          ENDP


                          AREA ||i.UTILS_IsIPV4||, CODE, READONLY, ALIGN=1

                  UTILS_IsIPV4 PROC
;;;40     
;;;41     uint8_t  UTILS_IsIPV4 (int8_t *str)
000000  b570              PUSH     {r4-r6,lr}
;;;42     {
;;;43     	uint8_t segs = 0;   /* Segment count. */
000002  2400              MOVS     r4,#0
;;;44     	uint8_t chcnt = 0;  /* Character count within segment. */
000004  4621              MOV      r1,r4
;;;45     	uint8_t accum = 0;  /* Accumulator for segment. */
000006  4623              MOV      r3,r4
000008  2800              CMP      r0,#0                 ;42
00000a  d022              BEQ      |L2.82|
;;;46         /* Catch NULL pointer. */
;;;47         if (str == 0)
;;;48             return 0;
;;;49         /* Process every character in string. */
;;;50     
;;;51         while (*str != '\0') {
;;;52             /* Segment changeover. */
;;;53     
;;;54             if (*str == '.') {
;;;55                 /* Must have some digits in segment. */
;;;56                 if (chcnt == 0)
;;;57                     return 0;
;;;58                 /* Limit number of segments. */
;;;59                 if (++segs == 4)
;;;60                     return 0;
;;;61                 /* Reset segment values and restart loop. */
;;;62                 chcnt = accum = 0;
;;;63                 str++;
;;;64                 continue;
;;;65             }
;;;66     
;;;67             /* Check numeric. */
;;;68             if ((*str < '0') || (*str > '9'))
;;;69                 return 0;
;;;70     
;;;71             /* Accumulate and check segment. */
;;;72     
;;;73             if ((accum = accum * 10 + *str - '0') > 255)
00000c  f06f052f          MVN      r5,#0x2f
                  |L2.16|
000010  f9902000          LDRSB    r2,[r0,#0]            ;51
000014  b1ca              CBZ      r2,|L2.74|
000016  2a2e              CMP      r2,#0x2e              ;54
000018  d00f              BEQ      |L2.58|
00001a  f1a20630          SUB      r6,r2,#0x30           ;68
00001e  2e0a              CMP      r6,#0xa               ;68
000020  d218              BCS      |L2.84|
000022  eb030383          ADD      r3,r3,r3,LSL #2
000026  eb050343          ADD      r3,r5,r3,LSL #1
00002a  441a              ADD      r2,r2,r3
00002c  b2d3              UXTB     r3,r2
00002e  2bff              CMP      r3,#0xff
000030  d810              BHI      |L2.84|
000032  1c49              ADDS     r1,r1,#1
;;;74                 return 0;
;;;75             /* Advance other segment specific stuff and continue loop. */
;;;76     
;;;77             chcnt++;
000034  b2c9              UXTB     r1,r1
                  |L2.54|
000036  1c40              ADDS     r0,r0,#1
000038  e7ea              B        |L2.16|
                  |L2.58|
00003a  b159              CBZ      r1,|L2.84|
00003c  1c64              ADDS     r4,r4,#1              ;56
00003e  b2e4              UXTB     r4,r4                 ;59
000040  2c04              CMP      r4,#4                 ;59
000042  d007              BEQ      |L2.84|
000044  2100              MOVS     r1,#0                 ;62
000046  460b              MOV      r3,r1                 ;62
000048  e7f5              B        |L2.54|
                  |L2.74|
;;;78             str++;
;;;79         }
;;;80     
;;;81         /* Check enough segments and enough characters in last segment. */
;;;82     
;;;83         if (segs != 3)
00004a  2c03              CMP      r4,#3
00004c  d102              BNE      |L2.84|
;;;84             return 0;
;;;85         if (chcnt == 0)
00004e  b109              CBZ      r1,|L2.84|
;;;86             return 0;
;;;87         /* Address okay. */
;;;88     
;;;89         return 1;
000050  2001              MOVS     r0,#1
                  |L2.82|
;;;90     }
000052  bd70              POP      {r4-r6,pc}
                  |L2.84|
000054  2000              MOVS     r0,#0                 ;86
000056  bd70              POP      {r4-r6,pc}
;;;91     uint8_t  UTILS_StrToIP(const int8_t* str, void *ip)
                          ENDP


                          AREA ||i.UTILS_StrToIP||, CODE, READONLY, ALIGN=1

                  UTILS_StrToIP PROC
;;;90     }
;;;91     uint8_t  UTILS_StrToIP(const int8_t* str, void *ip)
000000  b530              PUSH     {r4,r5,lr}
;;;92     {
;;;93     
;;;94     	    /* The count of the number of bytes processed. */
;;;95     	    int i;
;;;96     	    /* A pointer to the next digit to process. */
;;;97     	    const char * start;
;;;98     
;;;99     	    start = str;
;;;100    	    for (i = 0; i < 4; i++) {
000002  2300              MOVS     r3,#0
                  |L3.4|
;;;101    	        /* The digit being processed. */
;;;102    	        char c;
;;;103    	        /* The value of this byte. */
;;;104    	        int n = 0;
000004  2200              MOVS     r2,#0
                  |L3.6|
;;;105    	        while (1) {
;;;106    	            c = * start;
000006  f9104b01          LDRSB    r4,[r0],#1
;;;107    	            start++;
;;;108    	            if (c >= '0' && c <= '9') {
00000a  f1a40530          SUB      r5,r4,#0x30
00000e  2d09              CMP      r5,#9
000010  d805              BHI      |L3.30|
;;;109    	                n *= 10;
000012  eb020282          ADD      r2,r2,r2,LSL #2
;;;110    	                n += c - '0';
000016  eb040242          ADD      r2,r4,r2,LSL #1
00001a  3a30              SUBS     r2,r2,#0x30
00001c  e7f3              B        |L3.6|
                  |L3.30|
;;;111    	            }
;;;112    	            /* We insist on stopping at "." if we are still parsing
;;;113    	               the first, second, or third numbers. If we have reached
;;;114    	               the end of the numbers, we will allow any character. */
;;;115    	            else if ((i < 3 && c == '.') || i == 3) {
00001e  2b03              CMP      r3,#3
000020  da02              BGE      |L3.40|
000022  2c2e              CMP      r4,#0x2e
000024  d001              BEQ      |L3.42|
000026  e002              B        |L3.46|
                  |L3.40|
000028  d101              BNE      |L3.46|
                  |L3.42|
;;;116    	                break;
;;;117    	            }
;;;118    	            else {
;;;119    	                return 0;
;;;120    	            }
;;;121    	        }
;;;122    	        if (n >= 256) {
00002a  2aff              CMP      r2,#0xff
00002c  dd01              BLE      |L3.50|
                  |L3.46|
;;;123    	            return 0;
00002e  2000              MOVS     r0,#0
;;;124    	        }
;;;125    	        ((uint8_t*)ip)[i] = n;
;;;126    	    }
;;;127    	    return 1;
;;;128    
;;;129    }
000030  bd30              POP      {r4,r5,pc}
                  |L3.50|
000032  54ca              STRB     r2,[r1,r3]            ;125
000034  1c5b              ADDS     r3,r3,#1              ;125
000036  2b04              CMP      r3,#4                 ;100
000038  dbe4              BLT      |L3.4|
00003a  2001              MOVS     r0,#1                 ;127
00003c  bd30              POP      {r4,r5,pc}
;;;130    uint32_t  UTILS_Atoh(const int8_t *s)
                          ENDP

