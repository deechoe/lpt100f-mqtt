; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqttunsubscribeserver.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqttunsubscribeserver.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqttunsubscribeserver.crf ..\..\mqtt\MQTTUnsubscribeServer.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_unsubscribe||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_unsubscribe PROC
;;;33       */
;;;34     int MQTTDeserialize_unsubscribe(unsigned char* dup, unsigned short* packetid, int maxcount, int* count, MQTTString topicFilters[],
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;35     		unsigned char* buf, int len)
;;;36     {
000004  4681              MOV      r9,r0
000006  e9dd700a          LDRD     r7,r0,[sp,#0x28]
;;;37     	MQTTHeader header = {0};
00000a  f04f0800          MOV      r8,#0
;;;38     	unsigned char* curdata = buf;
;;;39     	unsigned char* enddata = NULL;
;;;40     	int rc = 0;
00000e  e9cd0800          STRD     r0,r8,[sp,#0]
000012  461c              MOV      r4,r3                 ;36
000014  468a              MOV      r10,r1                ;36
000016  4645              MOV      r5,r8                 ;37
000018  4646              MOV      r6,r8
;;;41     	int mylen = 0;
;;;42     
;;;43     	FUNC_ENTRY;
;;;44     	header.byte = readChar(&curdata);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       readChar
000020  f3600507          BFI      r5,r0,#0,#8
;;;45     	if (header.bits.type != UNSUBSCRIBE)
000024  0928              LSRS     r0,r5,#4
000026  280a              CMP      r0,#0xa
000028  d126              BNE      |L1.120|
;;;46     		goto exit;
;;;47     	*dup = header.bits.dup;
00002a  f3c501c0          UBFX     r1,r5,#3,#1
00002e  f8891000          STRB     r1,[r9,#0]
;;;48     
;;;49     	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
000032  a901              ADD      r1,sp,#4
000034  9800              LDR      r0,[sp,#0]
000036  f7fffffe          BL       MQTTPacket_decodeBuf
00003a  9900              LDR      r1,[sp,#0]
00003c  4606              MOV      r6,r0
00003e  4408              ADD      r0,r0,r1
;;;50     	enddata = curdata + mylen;
000040  9901              LDR      r1,[sp,#4]
000042  9000              STR      r0,[sp,#0]
000044  1845              ADDS     r5,r0,r1
;;;51     
;;;52     	*packetid = readInt(&curdata);
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       readInt
00004c  f8aa0000          STRH     r0,[r10,#0]
;;;53     
;;;54     	*count = 0;
;;;55     	while (curdata < enddata)
000050  f8c48000          STR      r8,[r4,#0]
000054  e00c              B        |L1.112|
                  |L1.86|
;;;56     	{
;;;57     		if (!readMQTTLenString(&topicFilters[*count], &curdata, enddata))
000056  6820              LDR      r0,[r4,#0]
000058  462a              MOV      r2,r5
00005a  eb000040          ADD      r0,r0,r0,LSL #1
00005e  eb070080          ADD      r0,r7,r0,LSL #2
000062  4669              MOV      r1,sp
000064  f7fffffe          BL       readMQTTLenString
000068  b130              CBZ      r0,|L1.120|
;;;58     			goto exit;
;;;59     		(*count)++;
00006a  6820              LDR      r0,[r4,#0]
00006c  1c40              ADDS     r0,r0,#1
00006e  6020              STR      r0,[r4,#0]
                  |L1.112|
000070  9800              LDR      r0,[sp,#0]            ;55
000072  42a8              CMP      r0,r5                 ;55
000074  d3ef              BCC      |L1.86|
;;;60     	}
;;;61     
;;;62     	rc = 1;
000076  2601              MOVS     r6,#1
                  |L1.120|
;;;63     exit:
;;;64     	FUNC_EXIT_RC(rc);
;;;65     	return rc;
000078  4630              MOV      r0,r6
;;;66     }
00007a  e8bd87fc          POP      {r2-r10,pc}
;;;67     
                          ENDP


                          AREA ||i.MQTTSerialize_unsuback||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_unsuback PROC
;;;75       */
;;;76     int MQTTSerialize_unsuback(unsigned char* buf, int buflen, unsigned short packetid)
000000  b538              PUSH     {r3-r5,lr}
;;;77     {
000002  4615              MOV      r5,r2
000004  460a              MOV      r2,r1
;;;78     	MQTTHeader header = {0};
000006  2100              MOVS     r1,#0
000008  4604              MOV      r4,r0                 ;77
;;;79     	int rc = 0;
;;;80     	unsigned char *ptr = buf;
;;;81     
;;;82     	FUNC_ENTRY;
;;;83     	if (buflen < 2)
00000a  9000              STR      r0,[sp,#0]
00000c  2a02              CMP      r2,#2
00000e  da01              BGE      |L2.20|
;;;84     	{
;;;85     		rc = MQTTPACKET_BUFFER_TOO_SHORT;
000010  1e88              SUBS     r0,r1,#2
;;;86     		goto exit;
;;;87     	}
;;;88     	header.byte = 0;
;;;89     	header.bits.type = UNSUBACK;
;;;90     	writeChar(&ptr, header.byte); /* write header */
;;;91     
;;;92     	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
;;;93     
;;;94     	writeInt(&ptr, packetid);
;;;95     
;;;96     	rc = ptr - buf;
;;;97     exit:
;;;98     	FUNC_EXIT_RC(rc);
;;;99     	return rc;
;;;100    }
000012  bd38              POP      {r3-r5,pc}
                  |L2.20|
000014  f3610107          BFI      r1,r1,#0,#8
000018  31b0              ADDS     r1,r1,#0xb0
00001a  b249              SXTB     r1,r1
00001c  4668              MOV      r0,sp                 ;90
00001e  f7fffffe          BL       writeChar
000022  2102              MOVS     r1,#2                 ;92
000024  9800              LDR      r0,[sp,#0]            ;92
000026  f7fffffe          BL       MQTTPacket_encode
00002a  9900              LDR      r1,[sp,#0]            ;92
00002c  4408              ADD      r0,r0,r1              ;92
00002e  9000              STR      r0,[sp,#0]            ;94
000030  4629              MOV      r1,r5                 ;94
000032  4668              MOV      r0,sp                 ;94
000034  f7fffffe          BL       writeInt
000038  9800              LDR      r0,[sp,#0]            ;96
00003a  1b00              SUBS     r0,r0,r4              ;96
00003c  bd38              POP      {r3-r5,pc}
;;;101    
                          ENDP

