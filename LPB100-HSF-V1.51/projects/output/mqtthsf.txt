; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqtthsf.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqtthsf.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqtthsf.crf ..\..\mqtt\MQTTHSF.c]
                          THUMB

                          AREA ||i.HSF_disconnect||, CODE, READONLY, ALIGN=1

                  HSF_disconnect PROC
;;;166      */
;;;167    void HSF_disconnect(Network* n) {
000000  b510              PUSH     {r4,lr}
;;;168    	close(hfnet_socketb_fd());
000002  f7fffffe          BL       hfnet_socketb_fd
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      hf_lwip_close
;;;169    }
;;;170    /**
                          ENDP


                          AREA ||i.HSF_read||, CODE, READONLY, ALIGN=2

                  HSF_read PROC
;;;144      */
;;;145    int HSF_read(Network* n, unsigned char* buffer, int len, int timeout_ms) {
000000  4801              LDR      r0,|L2.8|
;;;146        int rcvd = 0;
;;;147    	  rcvd=rb_read(&rb,buffer,len);
000002  f7ffbffe          B.W      rb_read
;;;148        return rcvd;
;;;149    }
;;;150    /**
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||rb||

                          AREA ||i.HSF_write||, CODE, READONLY, ALIGN=1

                  HSF_write PROC
;;;155      */
;;;156    int HSF_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
000000  b430              PUSH     {r4,r5}
000002  4614              MOV      r4,r2
000004  4608              MOV      r0,r1
;;;157    	int rc = 0;
;;;158      rc=hfnet_socketb_send((char *)buffer,len,timeout_ms);
000006  4621              MOV      r1,r4
000008  bc30              POP      {r4,r5}
00000a  461a              MOV      r2,r3
00000c  f7ffbffe          B.W      hfnet_socketb_send
;;;159    	return rc;
;;;160    }
;;;161    /**
                          ENDP


                          AREA ||i.MutexFree||, CODE, READONLY, ALIGN=1

                  MutexFree PROC
;;;114      */
;;;115    void MutexFree(Mutex* mutex)
000000  f7ffbffe          B.W      hfthread_mutext_free
;;;116    {
;;;117    	 hfthread_mutext_free(&mutex->sem);
;;;118    }
;;;119    /**
                          ENDP


                          AREA ||i.MutexInit||, CODE, READONLY, ALIGN=1

                  MutexInit PROC
;;;104      */
;;;105    int MutexInit(Mutex* mutex)
000000  2101              MOVS     r1,#1
;;;106    {
;;;107    	 return hfthread_sem_new(&mutex->sem,1);
000002  f7ffbffe          B.W      hfthread_sem_new
;;;108    }
;;;109    /**
                          ENDP


                          AREA ||i.MutexLock||, CODE, READONLY, ALIGN=1

                  MutexLock PROC
;;;124      */
;;;125    int MutexLock(Mutex* mutex)
000000  6800              LDR      r0,[r0,#0]
;;;126    {
;;;127    	return hfthread_sem_wait(mutex->sem,0xffff);
000002  f64f71ff          MOV      r1,#0xffff
000006  f7ffbffe          B.W      hfthread_sem_wait
;;;128    }
;;;129    /**
                          ENDP


                          AREA ||i.MutexUnlock||, CODE, READONLY, ALIGN=1

                  MutexUnlock PROC
;;;134      */
;;;135    void MutexUnlock(Mutex* mutex)
000000  6800              LDR      r0,[r0,#0]
;;;136    {
;;;137    	hfthread_sem_signal(mutex->sem);
000002  f7ffbffe          B.W      hfthread_sem_signal
;;;138    }
;;;139    /**
                          ENDP


                          AREA ||i.NetworkConnect||, CODE, READONLY, ALIGN=1

                  NetworkConnect PROC
;;;187      */
;;;188    int NetworkConnect(Network* n, char* host, int port)
000000  2000              MOVS     r0,#0
;;;189    {
;;;190        int ret=0;
;;;191    	  return ret;
;;;192    }
000002  4770              BX       lr
                          ENDP


                          AREA ||i.NetworkInit||, CODE, READONLY, ALIGN=2

                  NetworkInit PROC
;;;175      */
;;;176    void NetworkInit(Network* n) {
000000  f04f31ff          MOV      r1,#0xffffffff
;;;177    	n->my_socket = -1;
;;;178    	n->mqttread = HSF_read;
000004  6001              STR      r1,[r0,#0]
000006  4903              LDR      r1,|L9.20|
;;;179    	n->mqttwrite = HSF_write;
000008  6041              STR      r1,[r0,#4]
00000a  4903              LDR      r1,|L9.24|
;;;180    	n->disconnect = HSF_disconnect;
00000c  6081              STR      r1,[r0,#8]
00000e  4903              LDR      r1,|L9.28|
000010  60c1              STR      r1,[r0,#0xc]
;;;181    }
000012  4770              BX       lr
;;;182    /**
                          ENDP

                  |L9.20|
                          DCD      HSF_read
                  |L9.24|
                          DCD      HSF_write
                  |L9.28|
                          DCD      HSF_disconnect

                          AREA ||i.ThreadStart||, CODE, READONLY, ALIGN=2

                  ThreadStart PROC
;;;82       */
;;;83     int ThreadStart(Thread* thread, void (*fn)(void*), void* arg)
000000  b5fe              PUSH     {r1-r7,lr}
;;;84     {
000002  4613              MOV      r3,r2
;;;85     	int rc = 0;
;;;86     	uint16_t usTaskStackSize = 1024;
;;;87       rc=hfthread_create
000004  2500              MOVS     r5,#0
000006  4c06              LDR      r4,|L10.32|
000008  2202              MOVS     r2,#2
00000a  e88d0034          STM      sp,{r2,r4,r5}
00000e  4608              MOV      r0,r1                 ;84
000010  f44f6680          MOV      r6,#0x400             ;86
000014  4632              MOV      r2,r6
000016  a103              ADR      r1,|L10.36|
000018  f7fffffe          BL       hfthread_create
;;;88     	(
;;;89     		fn,
;;;90     		"MQTTTask",
;;;91     		usTaskStackSize,
;;;92     		arg,
;;;93     		HFTHREAD_PRIORITIES_MID,
;;;94     		&mqtt_task,
;;;95     		NULL
;;;96     	);
;;;97     	return rc;
;;;98     }
00001c  bdfe              POP      {r1-r7,pc}
;;;99     /**
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      mqtt_task
                  |L10.36|
000024  4d515454          DCB      "MQTTTask",0
000028  5461736b
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.TimerCountdown||, CODE, READONLY, ALIGN=1

                  TimerCountdown PROC
;;;50       */
;;;51     void TimerCountdown(Timer* timer, unsigned int timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;52     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  f7fffffe          BL       hfsys_get_time
00000a  4420              ADD      r0,r0,r4
00000c  6028              STR      r0,[r5,#0]
;;;53     	TimerCountdownMS(timer, timeout);
;;;54     }
00000e  bd70              POP      {r4-r6,pc}
;;;55     /**
                          ENDP


                          AREA ||i.TimerCountdownMS||, CODE, READONLY, ALIGN=1

                  TimerCountdownMS PROC
;;;39       */
;;;40     void TimerCountdownMS(Timer* timer, unsigned int timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;42     	uint32_t now = hfsys_get_time();
000006  f7fffffe          BL       hfsys_get_time
;;;43     	timer->end_time = now + timeout;
00000a  4420              ADD      r0,r0,r4
00000c  6028              STR      r0,[r5,#0]
;;;44     }
00000e  bd70              POP      {r4-r6,pc}
;;;45     /**
                          ENDP


                          AREA ||i.TimerInit||, CODE, READONLY, ALIGN=1

                  TimerInit PROC
;;;72       */
;;;73     void TimerInit(Timer* timer)
000000  2100              MOVS     r1,#0
;;;74     {
;;;75     	timer->end_time = 0;
000002  6001              STR      r1,[r0,#0]
;;;76     }
000004  4770              BX       lr
;;;77     /**
                          ENDP


                          AREA ||i.TimerIsExpired||, CODE, READONLY, ALIGN=1

                  TimerIsExpired PROC
;;;27       */
;;;28     char TimerIsExpired(Timer* timer)
000000  b510              PUSH     {r4,lr}
;;;29     {
000002  4604              MOV      r4,r0
;;;30       uint32_t now = hfsys_get_time ();
000004  f7fffffe          BL       hfsys_get_time
;;;31     	int32_t left = timer->end_time - now;
000008  6821              LDR      r1,[r4,#0]
00000a  1a08              SUBS     r0,r1,r0
;;;32     	return (left < 0);
00000c  0fc0              LSRS     r0,r0,#31
;;;33     }
00000e  bd10              POP      {r4,pc}
;;;34     /**
                          ENDP


                          AREA ||i.TimerLeftMS||, CODE, READONLY, ALIGN=1

                  TimerLeftMS PROC
;;;60       */
;;;61     int TimerLeftMS(Timer* timer)
000000  b510              PUSH     {r4,lr}
;;;62     {
000002  4604              MOV      r4,r0
;;;63     	uint32_t now = hfsys_get_time();
000004  f7fffffe          BL       hfsys_get_time
;;;64     	int32_t left = timer->end_time - now;
000008  6821              LDR      r1,[r4,#0]
00000a  1a08              SUBS     r0,r1,r0
;;;65     	return (left < 0) ? 0 : left;
00000c  d500              BPL      |L15.16|
00000e  2000              MOVS     r0,#0
                  |L15.16|
;;;66     }
000010  bd10              POP      {r4,pc}
;;;67     /**
                          ENDP

