; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\usr_mqtt.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\usr_mqtt.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\usr_mqtt.crf ..\..\usr\usr_mqtt.c]
                          THUMB

                          AREA ||i.destroyMqttThread||, CODE, READONLY, ALIGN=2

                  destroyMqttThread PROC
;;;209      */
;;;210    void destroyMqttThread(void)
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	hfthread_destroy(mqtt_usr); 
000002  4c06              LDR      r4,|L1.28|
000004  6820              LDR      r0,[r4,#0]  ; mqtt_usr
000006  f7fffffe          BL       hfthread_destroy
;;;213    	hfthread_destroy(mqtt_task); 	
00000a  6860              LDR      r0,[r4,#4]  ; mqtt_task
00000c  f7fffffe          BL       hfthread_destroy
;;;214      MutexFree(&(client_hf.mutex));
000010  e8bd4010          POP      {r4,lr}
000014  4802              LDR      r0,|L1.32|
000016  f7ffbffe          B.W      MutexFree
;;;215    }
;;;216    /**
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      ||.data||
                  |L1.32|
                          DCD      ||area_number.10||+0x558

                          AREA ||i.messageArrived||, CODE, READONLY, ALIGN=2

                  messageArrived PROC
;;;28       */
;;;29     void messageArrived(MessageData* data)
000000  b51c              PUSH     {r2-r4,lr}
;;;30     {
;;;31     	u_printf("Message arrived on topic %.*s: %.*s\n", data->topicName->lenstring.len, data->topicName->lenstring.data,
000002  6801              LDR      r1,[r0,#0]
000004  e9d12102          LDRD     r2,r1,[r1,#8]
000008  e9cd1200          STRD     r1,r2,[sp,#0]
00000c  6840              LDR      r0,[r0,#4]
00000e  a103              ADR      r1,|L2.28|
000010  e9d02301          LDRD     r2,r3,[r0,#4]
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       HF_Debug
;;;32     		data->message->payloadlen, data->message->payload);  
;;;33     }
00001a  bd1c              POP      {r2-r4,pc}
;;;34     /**
                          ENDP

                  |L2.28|
00001c  4d657373          DCB      "Message arrived on topic %.*s: %.*s\n",0
000020  61676520
000024  61727269
000028  76656420
00002c  6f6e2074
000030  6f706963
000034  20252e2a
000038  733a2025
00003c  2e2a730a
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.mqttInitAndSubcribe||, CODE, READONLY, ALIGN=2

                  mqttInitAndSubcribe PROC
;;;196      */
;;;197    void mqttInitAndSubcribe(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;198    {
;;;199    	hfthread_create(mqttThreadStart, "mqttThreadStart", 1024, NULL, HFTHREAD_PRIORITIES_MID, &mqtt_usr,NULL); 
000002  2200              MOVS     r2,#0
000004  4905              LDR      r1,|L3.28|
000006  2002              MOVS     r0,#2
000008  e88d0007          STM      sp,{r0-r2}
00000c  4613              MOV      r3,r2
00000e  0242              LSLS     r2,r0,#9
000010  a103              ADR      r1,|L3.32|
000012  4807              LDR      r0,|L3.48|
000014  f7fffffe          BL       hfthread_create
;;;200    }
000018  bd0e              POP      {r1-r3,pc}
;;;201    /**
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ||.data||
                  |L3.32|
000020  6d717474          DCB      "mqttThreadStart",0
000024  54687265
000028  61645374
00002c  61727400
                  |L3.48|
                          DCD      mqttThreadStart

                          AREA ||i.mqttThreadStart||, CODE, READONLY, ALIGN=2

                  mqttThreadStart PROC
;;;141      */
;;;142    void mqttThreadStart(void* arg)
000000  b09e              SUB      sp,sp,#0x78
;;;143    {
;;;144    	Network network;
;;;145    	int rc = 0;
;;;146    	char * str="hello world\n";
000002  a734              ADR      r7,|L4.212|
;;;147    	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
000004  2258              MOVS     r2,#0x58
000006  4937              LDR      r1,|L4.228|
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;148    	NetworkInit(&network);
00000e  a819              ADD      r0,sp,#0x64
000010  f7fffffe          BL       NetworkInit
;;;149    	MQTTClientInit(&client_hf, &network, 30000, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));
000014  4934              LDR      r1,|L4.232|
000016  f44f7000          MOV      r0,#0x200
00001a  e9cd0100          STRD     r0,r1,[sp,#0]
00001e  f5a17300          SUB      r3,r1,#0x200
000022  9002              STR      r0,[sp,#8]
000024  f2475230          MOV      r2,#0x7530
000028  a919              ADD      r1,sp,#0x64
00002a  f50360a0          ADD      r0,r3,#0x500
00002e  f7fffffe          BL       MQTTClientInit
;;;150    	connectData.MQTTVersion = 4;
000032  2004              MOVS     r0,#4
000034  f88d0014          STRB     r0,[sp,#0x14]
;;;151    	connectData.clientID.cstring = "hsf_sample";
000038  a02c              ADR      r0,|L4.236|
;;;152    	
;;;153    	u_printf("MQTTConnect start\n");
00003a  9006              STR      r0,[sp,#0x18]
00003c  a12e              ADR      r1,|L4.248|
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       HF_Debug
;;;154    	
;;;155    	if ((rc = MQTTConnect(&client_hf, &connectData)) != 0)
000044  a903              ADD      r1,sp,#0xc
000046  4831              LDR      r0,|L4.268|
000048  f7fffffe          BL       MQTTConnect
00004c  b118              CBZ      r0,|L4.86|
;;;156    	{
;;;157    		u_printf("MQTTConnect fail\n");
00004e  a130              ADR      r1,|L4.272|
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       HF_Debug
                  |L4.86|
;;;158    	}
;;;159    	
;;;160    	u_printf("MQTTStartTask start\n");	
000056  a133              ADR      r1,|L4.292|
000058  200a              MOVS     r0,#0xa
00005a  f7fffffe          BL       HF_Debug
;;;161    	if ((rc = MQTTStartTask(&client_hf)) != HF_SUCCESS)
00005e  482b              LDR      r0,|L4.268|
000060  f7fffffe          BL       MQTTStartTask
000064  b118              CBZ      r0,|L4.110|
;;;162    	{
;;;163    		u_printf("MQTTStartTask fail\n");
000066  a135              ADR      r1,|L4.316|
000068  200a              MOVS     r0,#0xa
00006a  f7fffffe          BL       HF_Debug
                  |L4.110|
;;;164    	}	
;;;165    	
;;;166    	u_printf("MQTTSubscribe start\n");	
00006e  a138              ADR      r1,|L4.336|
000070  200a              MOVS     r0,#0xa
000072  f7fffffe          BL       HF_Debug
;;;167    	if ((rc = MQTTSubscribe(&client_hf, "hsf/test/mac", 0, messageArrived)) != 0)
000076  4b3c              LDR      r3,|L4.360|
000078  2200              MOVS     r2,#0
00007a  a13c              ADR      r1,|L4.364|
00007c  4823              LDR      r0,|L4.268|
00007e  f7fffffe          BL       MQTTSubscribe
000082  b118              CBZ      r0,|L4.140|
;;;168    	{
;;;169    		u_printf("MQTTSubscribe fail\n");
000084  a13d              ADR      r1,|L4.380|
000086  200a              MOVS     r0,#0xa
000088  f7fffffe          BL       HF_Debug
                  |L4.140|
;;;170    	}
;;;171    	
;;;172    	u_printf("MQTTSubscribe OK\n");
00008c  a140              ADR      r1,|L4.400|
00008e  200a              MOVS     r0,#0xa
000090  f7fffffe          BL       HF_Debug
;;;173    	
;;;174    	for(;;)
;;;175    	{
;;;176    			msleep(1000);
;;;177    			msg_hf.qos = 0;
000094  4c1d              LDR      r4,|L4.268|
000096  2500              MOVS     r5,#0                 ;172
000098  3460              ADDS     r4,r4,#0x60
00009a  f44f787a          MOV      r8,#0x3e8             ;176
;;;178    			msg_hf.retained = 0;
;;;179    		  msg_hf.payload = msg_payload;
00009e  f5a476b0          SUB      r6,r4,#0x160
                  |L4.162|
0000a2  4640              MOV      r0,r8                 ;176
0000a4  f7fffffe          BL       hf_thread_delay
0000a8  6025              STR      r5,[r4,#0]            ;178  ; msg_hf
0000aa  7125              STRB     r5,[r4,#4]            ;178
;;;180    			memcpy(msg_hf.payload,str,strlen(str));
0000ac  4638              MOV      r0,r7
0000ae  60a6              STR      r6,[r4,#8]  ; msg_hf
0000b0  f7fffffe          BL       strlen
0000b4  4602              MOV      r2,r0
0000b6  4639              MOV      r1,r7
0000b8  68a0              LDR      r0,[r4,#8]  ; msg_hf
0000ba  f7fffffe          BL       __aeabi_memcpy
;;;181    			msg_hf.payloadlen = strlen(str);
0000be  4638              MOV      r0,r7
0000c0  f7fffffe          BL       strlen
;;;182    			if ((rc = MQTTPublish(&client_hf, "hsf/test/send", &msg_hf)) != 0)
0000c4  4a11              LDR      r2,|L4.268|
0000c6  60e0              STR      r0,[r4,#0xc]  ; msg_hf
0000c8  3260              ADDS     r2,r2,#0x60
0000ca  a136              ADR      r1,|L4.420|
0000cc  480f              LDR      r0,|L4.268|
0000ce  f7fffffe          BL       MQTTPublish
0000d2  e7e6              B        |L4.162|
;;;183    			{
;;;184    				
;;;185    			}
;;;186    	}
;;;187    }
;;;188    /**
                          ENDP

                  |L4.212|
0000d4  68656c6c          DCB      "hello world\n",0
0000d8  6f20776f
0000dc  726c640a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L4.228|
                          DCD      ||.constdata||
                  |L4.232|
                          DCD      ||area_number.10||+0x200
                  |L4.236|
0000ec  6873665f          DCB      "hsf_sample",0
0000f0  73616d70
0000f4  6c6500  
0000f7  00                DCB      0
                  |L4.248|
0000f8  4d515454          DCB      "MQTTConnect start\n",0
0000fc  436f6e6e
000100  65637420
000104  73746172
000108  740a00  
00010b  00                DCB      0
                  |L4.268|
                          DCD      ||area_number.10||+0x500
                  |L4.272|
000110  4d515454          DCB      "MQTTConnect fail\n",0
000114  436f6e6e
000118  65637420
00011c  6661696c
000120  0a00    
000122  00                DCB      0
000123  00                DCB      0
                  |L4.292|
000124  4d515454          DCB      "MQTTStartTask start\n",0
000128  53746172
00012c  74546173
000130  6b207374
000134  6172740a
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L4.316|
00013c  4d515454          DCB      "MQTTStartTask fail\n",0
000140  53746172
000144  74546173
000148  6b206661
00014c  696c0a00
                  |L4.336|
000150  4d515454          DCB      "MQTTSubscribe start\n",0
000154  53756273
000158  63726962
00015c  65207374
000160  6172740a
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L4.360|
                          DCD      messageArrived
                  |L4.364|
00016c  6873662f          DCB      "hsf/test/mac",0
000170  74657374
000174  2f6d6163
000178  00      
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L4.380|
00017c  4d515454          DCB      "MQTTSubscribe fail\n",0
000180  53756273
000184  63726962
000188  65206661
00018c  696c0a00
                  |L4.400|
000190  4d515454          DCB      "MQTTSubscribe OK\n",0
000194  53756273
000198  63726962
00019c  65204f4b
0001a0  0a00    
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L4.420|
0001a4  6873662f          DCB      "hsf/test/send",0
0001a8  74657374
0001ac  2f73656e
0001b0  6400    
0001b2  00                DCB      0
0001b3  00                DCB      0

                          AREA ||i.sockbConnect||, CODE, READONLY, ALIGN=2

                  sockbConnect PROC
;;;224      */
;;;225    int sockbConnect(char * host,int port)
000000  b500              PUSH     {lr}
;;;226    {
000002  b0a7              SUB      sp,sp,#0x9c
;;;227    	char rsp[128];
;;;228    	char *words[5]={NULL};
000004  2114              MOVS     r1,#0x14
000006  a822              ADD      r0,sp,#0x88
000008  f7fffffe          BL       __aeabi_memclr4
;;;229    	
;;;230    	hfat_send_cmd("AT+SOCKB\r\n",sizeof("AT+SOCKB\r\n"),rsp,sizeof(rsp));	
00000c  2380              MOVS     r3,#0x80
00000e  aa02              ADD      r2,sp,#8
000010  210b              MOVS     r1,#0xb
000012  a024              ADR      r0,|L5.164|
000014  f7fffffe          BL       hfat_send_cmd
;;;231    	if(hfat_get_words(rsp,words, 5)>0)
000018  2205              MOVS     r2,#5
00001a  a922              ADD      r1,sp,#0x88
00001c  a802              ADD      r0,sp,#8
00001e  f7fffffe          BL       hfat_get_words
000022  2800              CMP      r0,#0
000024  dd30              BLE      |L5.136|
000026  e9dd0124          LDRD     r0,r1,[sp,#0x90]
00002a  e9cd0100          STRD     r0,r1,[sp,#0]
;;;232    	{
;;;233    		u_printf("\nresult:%s\ntcp:%s\nport:%s\nIP:%s\n",words[0],words[1],words[2],words[3]);
00002e  e9dd2322          LDRD     r2,r3,[sp,#0x88]
000032  a11f              ADR      r1,|L5.176|
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       HF_Debug
;;;234    		if(0!=strncmp(words[0],"+ok",strlen("ok"))||0!=strncmp(words[1],"TCP",strlen("TCP"))||0!=strncmp(words[2],"1883",strlen("1883"))
00003a  2202              MOVS     r2,#2
00003c  a125              ADR      r1,|L5.212|
00003e  9822              LDR      r0,[sp,#0x88]
000040  f7fffffe          BL       strncmp
000044  b988              CBNZ     r0,|L5.106|
000046  2203              MOVS     r2,#3
000048  a123              ADR      r1,|L5.216|
00004a  9823              LDR      r0,[sp,#0x8c]
00004c  f7fffffe          BL       strncmp
000050  b958              CBNZ     r0,|L5.106|
000052  2204              MOVS     r2,#4
000054  a121              ADR      r1,|L5.220|
000056  9824              LDR      r0,[sp,#0x90]
000058  f7fffffe          BL       strncmp
00005c  b928              CBNZ     r0,|L5.106|
;;;235    			 ||0!=strncmp(words[3],"iotplc.cn",strlen("iotplc.cn"))
00005e  2209              MOVS     r2,#9
000060  a120              ADR      r1,|L5.228|
000062  9825              LDR      r0,[sp,#0x94]
000064  f7fffffe          BL       strncmp
000068  b150              CBZ      r0,|L5.128|
                  |L5.106|
;;;236    		  )
;;;237    		{
;;;238    				u_printf("set tcp para \n");			  
00006a  a121              ADR      r1,|L5.240|
00006c  200a              MOVS     r0,#0xa
00006e  f7fffffe          BL       HF_Debug
;;;239    		  	hfat_send_cmd("AT+SOCKB=TCP,1883,iotplc.cn\r\n",sizeof("AT+SOCKB=TCP,1883,iotplc.cn\r\n"),rsp,sizeof(rsp));	
000072  2380              MOVS     r3,#0x80
000074  aa02              ADD      r2,sp,#8
000076  211e              MOVS     r1,#0x1e
000078  a021              ADR      r0,|L5.256|
00007a  f7fffffe          BL       hfat_send_cmd
00007e  e003              B        |L5.136|
                  |L5.128|
;;;240    		}
;;;241    		else
;;;242    		{
;;;243    		   u_printf("para has been setted \n");	
000080  a127              ADR      r1,|L5.288|
000082  200a              MOVS     r0,#0xa
000084  f7fffffe          BL       HF_Debug
                  |L5.136|
;;;244    		}
;;;245    	} 
;;;246    	hfat_send_cmd("AT+TCPDISB=on\r\n",sizeof("AT+TCPDISB=on\r\n"),rsp,sizeof(rsp));
000088  2380              MOVS     r3,#0x80
00008a  aa02              ADD      r2,sp,#8
00008c  2110              MOVS     r1,#0x10
00008e  a02a              ADR      r0,|L5.312|
000090  f7fffffe          BL       hfat_send_cmd
;;;247    	msleep(100);
000094  2064              MOVS     r0,#0x64
000096  f7fffffe          BL       hf_thread_delay
;;;248    	
;;;249    	return hfnet_socketb_fd();
00009a  f7fffffe          BL       hfnet_socketb_fd
;;;250    }
00009e  b027              ADD      sp,sp,#0x9c
0000a0  bd00              POP      {pc}
                          ENDP

0000a2  0000              DCW      0x0000
                  |L5.164|
0000a4  41542b53          DCB      "AT+SOCKB\r\n",0
0000a8  4f434b42
0000ac  0d0a00  
0000af  00                DCB      0
                  |L5.176|
0000b0  0a726573          DCB      "\nresult:%s\ntcp:%s\nport:%s\nIP:%s\n",0
0000b4  756c743a
0000b8  25730a74
0000bc  63703a25
0000c0  730a706f
0000c4  72743a25
0000c8  730a4950
0000cc  3a25730a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L5.212|
0000d4  2b6f6b00          DCB      "+ok",0
                  |L5.216|
0000d8  54435000          DCB      "TCP",0
                  |L5.220|
0000dc  31383833          DCB      "1883",0
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L5.228|
0000e4  696f7470          DCB      "iotplc.cn",0
0000e8  6c632e63
0000ec  6e00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L5.240|
0000f0  73657420          DCB      "set tcp para \n",0
0000f4  74637020
0000f8  70617261
0000fc  200a00  
0000ff  00                DCB      0
                  |L5.256|
000100  41542b53          DCB      "AT+SOCKB=TCP,1883,iotplc.cn\r\n",0
000104  4f434b42
000108  3d544350
00010c  2c313838
000110  332c696f
000114  74706c63
000118  2e636e0d
00011c  0a00    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L5.288|
000120  70617261          DCB      "para has been setted \n",0
000124  20686173
000128  20626565
00012c  6e207365
000130  74746564
000134  200a00  
000137  00                DCB      0
                  |L5.312|
000138  41542b54          DCB      "AT+TCPDISB=on\r\n",0
00013c  43504449
000140  53423d6f
000144  6e0d0a00

                          AREA ||i.uartInitAndStart||, CODE, READONLY, ALIGN=2

                  uartInitAndStart PROC
;;;128      */
;;;129    void uartInitAndStart(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;130    {
;;;131    	hfthread_create(uart_to_mqtt, "uart_to_mqtt", 2048, NULL, HFTHREAD_PRIORITIES_NORMAL, NULL,NULL); 
000002  2000              MOVS     r0,#0
000004  2103              MOVS     r1,#3
000006  e9cd1000          STRD     r1,r0,[sp,#0]
00000a  4603              MOV      r3,r0
00000c  9002              STR      r0,[sp,#8]
00000e  f44f6200          MOV      r2,#0x800
000012  a102              ADR      r1,|L6.28|
000014  4805              LDR      r0,|L6.44|
000016  f7fffffe          BL       hfthread_create
;;;132    }
00001a  bd0e              POP      {r1-r3,pc}
;;;133    /**
                          ENDP

                  |L6.28|
00001c  75617274          DCB      "uart_to_mqtt",0
000020  5f746f5f
000024  6d717474
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L6.44|
                          DCD      uart_to_mqtt

                          AREA ||i.uart_to_mqtt||, CODE, READONLY, ALIGN=1

                  uart_to_mqtt PROC
;;;42       */
;;;43     void uart_to_mqtt(void* arg)
000000  b088              SUB      sp,sp,#0x20
;;;44     {
;;;45     
;;;46     	int recv_num=0;
;;;47     	fd_set rset;
;;;48     	char recv[32]={0};
000002  2120              MOVS     r1,#0x20
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       __aeabi_memclr4
;;;49     	for(;;)
;;;50     	{
;;;51     		msleep(1000);
00000a  f44f747a          MOV      r4,#0x3e8
                  |L7.14|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       hf_thread_delay
000014  e7fb              B        |L7.14|
;;;52     //		if (FD_ISSET(fd, &rset))
;;;53     //		{
;;;54     //			if((recv_num=recv(sockb_ok,recv,sizeof(recv),0))>0)
;;;55     //			{
;;;56     //				u_printf("recv data bytes:%d\n",recv_num);
;;;57     //			}
;;;58     //			else
;;;59     //			{
;;;60     //				close(sockb_ok);
;;;61     //				sockb_ok=-1;
;;;62     //				u_printf("tcp disconnectd!\n");
;;;63     //			}
;;;64     		//}		
;;;65     	}
;;;66     	
;;;67     //	hfuart_handle_t huart0;
;;;68     //	char *buf;
;;;69     //	int recv_bytes;
;;;70     //	int rc=0;
;;;71     //	char *str="hello str";
;;;72     //	message.qos = 0;
;;;73     //	message.retained = 0;
;;;74     //	message.payload = payload;
;;;75     //	huart0 = hfuart_open(0);
;;;76     //	if(huart0==NULL)
;;;77     //	{
;;;78     //		u_printf("open uart0 fail\n");
;;;79     //		goto exit_thread;
;;;80     //	}
;;;81     //	buf = (char*)hfmem_malloc(1000);
;;;82     //	if(buf==NULL)
;;;83     //	{
;;;84     //		u_printf("memory alloc fail\n");
;;;85     //		goto exit_thread;
;;;86     //	}
;;;87     //	for(;;)
;;;88     //	{
;;;89     //		//u_printf("uart0 start ok\n");
;;;90     ////		recv_bytes = hfuart_recv(huart0,buf,1000,1000);
;;;91     ////		if(recv_bytes>0)
;;;92     ////		{
;;;93     ////			  u_printf("uart0 recv ok recv_bytes==%d\n",recv_bytes);
;;;94     ////			  memcpy(message.payload,buf,recv_bytes);
;;;95     ////				message.payloadlen = recv_bytes;
;;;96     ////			  u_printf("MQTTPublish start\n");
;;;97     ////				if ((rc = MQTTPublish(&client, "hsf/test/mac", &message)) != 0)
;;;98     ////				{
;;;99     ////				  u_printf("MQTTPublish fail\n");
;;;100    ////				}
;;;101    ////				u_printf("MQTTPublish over\n");
;;;102    ////				#if !defined(MQTT_TASK)
;;;103    ////						if ((rc = MQTTYield(&client, 1000)) != 0)
;;;104    ////            {
;;;105    ////							//msleep(1);
;;;106    ////						}
;;;107    ////				#endif      
;;;108    ////		}
;;;109    //		
;;;110    //	}
;;;111    //  exit_thread:
;;;112    //		if(buf!=NULL)
;;;113    //		{
;;;114    //			hfmem_free(buf);
;;;115    //		}
;;;116    //		hfuart_close(huart0);
;;;117    //		hfthread_destroy(NULL);
;;;118    	return ;
;;;119    }
;;;120    /**
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rbb_buff
                          %        1024

                          AREA ||area_number.10||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.bss||
                  sendbuf
                          %        512
                  readbuf
                          %        512
                  msg_payload
                          %        256
                  client_hf
                          %        96
                  msg_hf
                          %        16

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.bss||
                  ||rb||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4d515443          DCB      0x4d,0x51,0x54,0x43
                          DCD      0x00000000
000008  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000018  003c              DCW      0x003c
00001a  0100              DCB      0x01,0x00
00001c  4d515457          DCB      0x4d,0x51,0x54,0x57
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  mqtt_usr
                          DCD      0x00000000
                  mqtt_task
                          DCD      0x00000000
