; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\app_main.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\app_main.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\app_main.crf ..\src\app_main.c]
                          THUMB

                          AREA ||i.app_init||, CODE, READONLY, ALIGN=2

                  app_init PROC
;;;370    
;;;371    void app_init(void)
000000  a101              ADR      r1,|L1.8|
;;;372    {
;;;373    	u_printf("app_init\n");
000002  200a              MOVS     r0,#0xa
000004  f7ffbffe          B.W      HF_Debug
;;;374    }
;;;375    
                          ENDP

                  |L1.8|
000008  6170705f          DCB      "app_init\n",0
00000c  696e6974
000010  0a00    
000012  00                DCB      0
000013  00                DCB      0

                          AREA ||i.app_main||, CODE, READONLY, ALIGN=2

                  app_main PROC
;;;376    
;;;377    int USER_FUNC app_main (void)
000000  b538              PUSH     {r3-r5,lr}
;;;378    {
;;;379    	hfdbg_set_level(DEBUG_LEVEL_HI);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       hfdbg_set_level
;;;380    	
;;;381    	HF_Debug(DEBUG_LEVEL,"sdk version(%s),the app_main start time is %s %s\n",hfsys_get_sdk_version(),__DATE__,__TIME__);
000008  f7fffffe          BL       hfsys_get_sdk_version
00000c  4602              MOV      r2,r0
00000e  a025              ADR      r0,|L2.164|
000010  9000              STR      r0,[sp,#0]
000012  a327              ADR      r3,|L2.176|
000014  a129              ADR      r1,|L2.188|
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       HF_Debug
;;;382    	if(hfgpio_fmap_check(module_type)!=0)
00001c  4834              LDR      r0,|L2.240|
00001e  6800              LDR      r0,[r0,#0]  ; module_type
000020  f7fffffe          BL       hfgpio_fmap_check
000024  b148              CBZ      r0,|L2.58|
;;;383    	{
;;;384    		while(1)
;;;385    		{
;;;386    			HF_Debug(DEBUG_ERROR,"gpio map file error\n");
;;;387    			msleep(1000);
000026  f44f747a          MOV      r4,#0x3e8
                  |L2.42|
00002a  a132              ADR      r1,|L2.244|
00002c  2008              MOVS     r0,#8                 ;386
00002e  f7fffffe          BL       HF_Debug
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       hf_thread_delay
000038  e7f7              B        |L2.42|
                  |L2.58|
;;;388    		}
;;;389    		return 0;
;;;390    	}
;;;391    	show_reset_reason();
00003a  f7fffffe          BL       show_reset_reason
;;;392    	if(hfsys_register_system_event((hfsys_event_callback_t)hfsys_event_callback)!=HF_SUCCESS)
00003e  4833              LDR      r0,|L2.268|
000040  f7fffffe          BL       hfsys_register_system_event
000044  b138              CBZ      r0,|L2.86|
;;;393    	{
;;;394    		u_printf("register system event fail\n");
000046  a132              ADR      r1,|L2.272|
000048  200a              MOVS     r0,#0xa
00004a  f7fffffe          BL       HF_Debug
00004e  e002              B        |L2.86|
                  |L2.80|
;;;395    	}
;;;396    	while(!hfnet_wifi_is_active())
;;;397    	{
;;;398    		msleep(50);
000050  2032              MOVS     r0,#0x32
000052  f7fffffe          BL       hf_thread_delay
                  |L2.86|
000056  f7fffffe          BL       hfnet_wifi_is_active
00005a  2800              CMP      r0,#0                 ;396
00005c  d0f8              BEQ      |L2.80|
;;;399    	}
;;;400    	#if 0
;;;401    	int up_result=0;
;;;402    	up_result = hfupdate_auto_upgrade(0);
;;;403    	if(up_result<0)
;;;404    	{
;;;405    		u_printf("no entry the auto upgrade mode\n");
;;;406    	}
;;;407    	else if(up_result==0)
;;;408    	{
;;;409    		u_printf("upgrade success\n");
;;;410    	}
;;;411    	else
;;;412    	{
;;;413    		u_printf("upgrade fail %d\n",up_result);
;;;414    	}
;;;415    	#endif
;;;416    	
;;;417    	if(hfnet_start_assis(ASSIS_PORT)!=HF_SUCCESS)
00005e  f64b7003          MOV      r0,#0xbf03
000062  f7fffffe          BL       hfnet_start_assis
000066  b118              CBZ      r0,|L2.112|
;;;418    	{
;;;419    		HF_Debug(DEBUG_WARN,"start httpd fail\n");
000068  a130              ADR      r1,|L2.300|
00006a  2008              MOVS     r0,#8
00006c  f7fffffe          BL       HF_Debug
                  |L2.112|
;;;420    	}
;;;421    	if(hfnet_start_httpd(HFTHREAD_PRIORITIES_MID)!=HF_SUCCESS)
000070  2002              MOVS     r0,#2
000072  f7fffffe          BL       hfnet_start_httpd
000076  b118              CBZ      r0,|L2.128|
;;;422    	{
;;;423    		HF_Debug(DEBUG_WARN,"start httpd fail\n");
000078  a12c              ADR      r1,|L2.300|
00007a  2008              MOVS     r0,#8
00007c  f7fffffe          BL       HF_Debug
                  |L2.128|
;;;424    	}
;;;425    	hfat_send_cmd("AT+SOCKB=TCP,1883,q.emqtt.com\r\n",sizeof("AT+SOCKB=TCP,1883,q.emqtt.com\r\n"),rsp,sizeof(rsp));	
000080  4a1b              LDR      r2,|L2.240|
000082  2380              MOVS     r3,#0x80
000084  1d12              ADDS     r2,r2,#4
000086  2120              MOVS     r1,#0x20
000088  a02d              ADR      r0,|L2.320|
00008a  f7fffffe          BL       hfat_send_cmd
;;;426    	if(hfnet_start_socketb(HFTHREAD_PRIORITIES_MID,(hfnet_callback_t)socketb_recv_callback)!=HF_SUCCESS)
00008e  4934              LDR      r1,|L2.352|
000090  2002              MOVS     r0,#2
000092  f7fffffe          BL       hfnet_start_socketb
000096  b118              CBZ      r0,|L2.160|
;;;427    	{
;;;428    		HF_Debug(DEBUG_WARN,"start socketb fail\n");
000098  a132              ADR      r1,|L2.356|
00009a  2008              MOVS     r0,#8
00009c  f7fffffe          BL       HF_Debug
                  |L2.160|
;;;429    	}		
;;;430    	return 1;
0000a0  2001              MOVS     r0,#1
;;;431    }
0000a2  bd38              POP      {r3-r5,pc}
;;;432    
                          ENDP

                  |L2.164|
0000a4  31353a31          DCB      "15:10:28",0
0000a8  303a3238
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L2.176|
0000b0  4d617920          DCB      "May 21 2017",0
0000b4  32312032
0000b8  30313700
                  |L2.188|
0000bc  73646b20          DCB      "sdk version(%s),the app_main start time is %s %s\n",0
0000c0  76657273
0000c4  696f6e28
0000c8  2573292c
0000cc  74686520
0000d0  6170705f
0000d4  6d61696e
0000d8  20737461
0000dc  72742074
0000e0  696d6520
0000e4  69732025
0000e8  73202573
0000ec  0a00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L2.240|
                          DCD      ||.data||
                  |L2.244|
0000f4  6770696f          DCB      "gpio map file error\n",0
0000f8  206d6170
0000fc  2066696c
000100  65206572
000104  726f720a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L2.268|
                          DCD      hfsys_event_callback
                  |L2.272|
000110  72656769          DCB      "register system event fail\n",0
000114  73746572
000118  20737973
00011c  74656d20
000120  6576656e
000124  74206661
000128  696c0a00
                  |L2.300|
00012c  73746172          DCB      "start httpd fail\n",0
000130  74206874
000134  74706420
000138  6661696c
00013c  0a00    
00013e  00                DCB      0
00013f  00                DCB      0
                  |L2.320|
000140  41542b53          DCB      "AT+SOCKB=TCP,1883,q.emqtt.com\r\n",0
000144  4f434b42
000148  3d544350
00014c  2c313838
000150  332c712e
000154  656d7174
000158  742e636f
00015c  6d0d0a00
                  |L2.352|
                          DCD      socketb_recv_callback
                  |L2.356|
000164  73746172          DCB      "start socketb fail\n",0
000168  7420736f
00016c  636b6574
000170  62206661
000174  696c0a00

                          AREA ||i.hfsys_event_callback||, CODE, READONLY, ALIGN=2

                  hfsys_event_callback PROC
;;;254    };
;;;255    static int hfsys_event_callback( uint32_t event_id,void * param)
000000  b510              PUSH     {r4,lr}
;;;256    {
;;;257    	switch(event_id)
000002  2805              CMP      r0,#5
000004  d210              BCS      |L3.40|
000006  e8dff000          TBB      [pc,r0]
00000a  0305              DCB      0x03,0x05
00000c  180a1100          DCB      0x18,0x0a,0x11,0x00
;;;258    	{
;;;259    		case HFE_WIFI_STA_CONNECTED:
;;;260    			u_printf("wifi sta connected!!\n");
000010  a10b              ADR      r1,|L3.64|
;;;261    			break;
000012  e000              B        |L3.22|
;;;262    		case HFE_WIFI_STA_DISCONNECTED:
;;;263    			u_printf("wifi sta disconnected!!\n");
000014  a110              ADR      r1,|L3.88|
                  |L3.22|
000016  200a              MOVS     r0,#0xa               ;260
000018  f7fffffe          BL       HF_Debug
00001c  e004              B        |L3.40|
;;;264    			break;
;;;265    		case HFE_DHCP_OK:
;;;266    			{
;;;267    				uint32_t *p_ip;
;;;268    //				char mac[12]={0x00};
;;;269    				p_ip = (uint32_t*)param;
;;;270    				u_printf("dhcp ok %08X!\n",*p_ip);
00001e  680a              LDR      r2,[r1,#0]
000020  a114              ADR      r1,|L3.116|
000022  200a              MOVS     r0,#0xa
000024  f7fffffe          BL       HF_Debug
                  |L3.40|
;;;271    //				hfnet_get_smac(mac);
;;;272    //				u_printf("mac addr=====%s\n",mac);				
;;;273    			}
;;;274    			break;
;;;275    		case HFE_SMTLK_OK:
;;;276    			u_printf("smtlk ok!\n");
;;;277    			return -1;
;;;278    			break;
;;;279    		case HFE_CONFIG_RELOAD:
;;;280    			u_printf("reload!\n");
;;;281    			break;
;;;282    		default:
;;;283    			break;
;;;284    	}
;;;285    	return 0;
000028  2000              MOVS     r0,#0
;;;286    }
00002a  bd10              POP      {r4,pc}
00002c  a115              ADR      r1,|L3.132|
00002e  200a              MOVS     r0,#0xa               ;276
000030  f7fffffe          BL       HF_Debug
000034  f04f30ff          MOV      r0,#0xffffffff        ;277
000038  bd10              POP      {r4,pc}
00003a  a115              ADR      r1,|L3.144|
00003c  e7eb              B        |L3.22|
;;;287    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
000040  77696669          DCB      "wifi sta connected!!\n",0
000044  20737461
000048  20636f6e
00004c  6e656374
000050  65642121
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0
                  |L3.88|
000058  77696669          DCB      "wifi sta disconnected!!\n",0
00005c  20737461
000060  20646973
000064  636f6e6e
000068  65637465
00006c  6421210a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L3.116|
000074  64686370          DCB      "dhcp ok %08X!\n",0
000078  206f6b20
00007c  25303858
000080  210a00  
000083  00                DCB      0
                  |L3.132|
000084  736d746c          DCB      "smtlk ok!\n",0
000088  6b206f6b
00008c  210a00  
00008f  00                DCB      0
                  |L3.144|
000090  72656c6f          DCB      "reload!\n",0
000094  6164210a
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.show_reset_reason||, CODE, READONLY, ALIGN=2

                  show_reset_reason PROC
;;;323    }
;;;324    static void show_reset_reason(void)
000000  b510              PUSH     {r4,lr}
;;;325    {
;;;326    	uint32_t reset_reason=0;
;;;327    	
;;;328    	reset_reason = hfsys_get_reset_reason();
000002  f7fffffe          BL       hfsys_get_reset_reason
000006  4604              MOV      r4,r0
;;;329    	
;;;330    	
;;;331    #if 0
;;;332    	u_printf("reset_reasion:%08x\n",reset_reason);
;;;333    #else	
;;;334    	if(reset_reason&HFSYS_RESET_REASON_ERESET)
000008  07c0              LSLS     r0,r0,#31
00000a  d003              BEQ      |L4.20|
;;;335    	{
;;;336    		u_printf("ERESET\n");
00000c  a117              ADR      r1,|L4.108|
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       HF_Debug
                  |L4.20|
;;;337    	}
;;;338    	if(reset_reason&HFSYS_RESET_REASON_IRESET0)
000014  07a0              LSLS     r0,r4,#30
000016  d503              BPL      |L4.32|
;;;339    	{
;;;340    		u_printf("IRESET0\n");
000018  a116              ADR      r1,|L4.116|
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       HF_Debug
                  |L4.32|
;;;341    	}
;;;342    	if(reset_reason&HFSYS_RESET_REASON_IRESET1)
000020  0760              LSLS     r0,r4,#29
000022  d503              BPL      |L4.44|
;;;343    	{
;;;344    		u_printf("IRESET1\n");
000024  a116              ADR      r1,|L4.128|
000026  200a              MOVS     r0,#0xa
000028  f7fffffe          BL       HF_Debug
                  |L4.44|
;;;345    	}
;;;346    	if(reset_reason==HFSYS_RESET_REASON_NORMAL)
00002c  b91c              CBNZ     r4,|L4.54|
;;;347    	{
;;;348    		u_printf("RESET NORMAL\n");
00002e  a117              ADR      r1,|L4.140|
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       HF_Debug
                  |L4.54|
;;;349    	}
;;;350    	if(reset_reason&HFSYS_RESET_REASON_WPS)
000036  0720              LSLS     r0,r4,#28
000038  d503              BPL      |L4.66|
;;;351    	{
;;;352    		u_printf("RESET FOR WPS\n");
00003a  a118              ADR      r1,|L4.156|
00003c  200a              MOVS     r0,#0xa
00003e  f7fffffe          BL       HF_Debug
                  |L4.66|
;;;353    	}
;;;354    	if(reset_reason&HFSYS_RESET_REASON_SMARTLINK_START)
000042  06e0              LSLS     r0,r4,#27
000044  d503              BPL      |L4.78|
;;;355    	{
;;;356    		u_printf("RESET FOR SMARTLINK START\n");
000046  a119              ADR      r1,|L4.172|
000048  200a              MOVS     r0,#0xa
00004a  f7fffffe          BL       HF_Debug
                  |L4.78|
;;;357    	}
;;;358    	if(reset_reason&HFSYS_RESET_REASON_SMARTLINK_OK)
00004e  06a0              LSLS     r0,r4,#26
000050  d503              BPL      |L4.90|
;;;359    	{
;;;360    		u_printf("RESET FOR SMARTLINK OK\n");
000052  a11d              ADR      r1,|L4.200|
000054  200a              MOVS     r0,#0xa
000056  f7fffffe          BL       HF_Debug
                  |L4.90|
;;;361    	}
;;;362    	if(reset_reason&HFSYS_RESET_REASON_WPS_OK)
00005a  0620              LSLS     r0,r4,#24
00005c  d505              BPL      |L4.106|
;;;363    	{
;;;364    		u_printf("RESET FOR WPS OK\n");
00005e  e8bd4010          POP      {r4,lr}
000062  a11f              ADR      r1,|L4.224|
000064  200a              MOVS     r0,#0xa
000066  f7ffbffe          B.W      HF_Debug
                  |L4.106|
;;;365    	}
;;;366    #endif
;;;367    	
;;;368    	return;
;;;369    }
00006a  bd10              POP      {r4,pc}
;;;370    
                          ENDP

                  |L4.108|
00006c  45524553          DCB      "ERESET\n",0
000070  45540a00
                  |L4.116|
000074  49524553          DCB      "IRESET0\n",0
000078  4554300a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L4.128|
000080  49524553          DCB      "IRESET1\n",0
000084  4554310a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L4.140|
00008c  52455345          DCB      "RESET NORMAL\n",0
000090  54204e4f
000094  524d414c
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L4.156|
00009c  52455345          DCB      "RESET FOR WPS\n",0
0000a0  5420464f
0000a4  52205750
0000a8  530a00  
0000ab  00                DCB      0
                  |L4.172|
0000ac  52455345          DCB      "RESET FOR SMARTLINK START\n",0
0000b0  5420464f
0000b4  5220534d
0000b8  4152544c
0000bc  494e4b20
0000c0  53544152
0000c4  540a00  
0000c7  00                DCB      0
                  |L4.200|
0000c8  52455345          DCB      "RESET FOR SMARTLINK OK\n",0
0000cc  5420464f
0000d0  5220534d
0000d4  4152544c
0000d8  494e4b20
0000dc  4f4b0a00
                  |L4.224|
0000e0  52455345          DCB      "RESET FOR WPS OK\n",0
0000e4  5420464f
0000e8  52205750
0000ec  53204f4b
0000f0  0a00    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||i.socketb_recv_callback||, CODE, READONLY, ALIGN=2

                  socketb_recv_callback PROC
;;;288    
;;;289    static int USER_FUNC socketb_recv_callback(uint32_t event,char *data,uint32_t len,uint32_t buf_len)
000000  b570              PUSH     {r4-r6,lr}
;;;290    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
;;;291    	
;;;292    	if(event==HFNET_SOCKETB_CONNECTED)
000006  2804              CMP      r0,#4
000008  d004              BEQ      |L5.20|
;;;293    	{
;;;294    		rb_new(&rb,rbb_buff,sizeof(rbb_buff));	
;;;295    		mqttInitAndSubcribe();
;;;296    	}
;;;297    	else if(event==HFNET_SOCKETB_DISCONNECTED)
00000a  2805              CMP      r0,#5
00000c  d00b              BEQ      |L5.38|
;;;298    	{
;;;299        destroyMqttThread();
;;;300    	}	
;;;301    	else if(event==HFNET_SOCKETB_DATA_READY)
00000e  2803              CMP      r0,#3
000010  d00c              BEQ      |L5.44|
000012  e020              B        |L5.86|
                  |L5.20|
000014  f44f6280          MOV      r2,#0x400             ;294
000018  4910              LDR      r1,|L5.92|
00001a  4811              LDR      r0,|L5.96|
00001c  f7fffffe          BL       rb_new
000020  f7fffffe          BL       mqttInitAndSubcribe
000024  e017              B        |L5.86|
                  |L5.38|
000026  f7fffffe          BL       destroyMqttThread
00002a  e014              B        |L5.86|
                  |L5.44|
;;;302    	{
;;;303    		rb_write(&rb, data, len);
00002c  480c              LDR      r0,|L5.96|
00002e  f7fffffe          BL       rb_write
;;;304    		
;;;305    		u_printf("tcp recv:");
000032  a10c              ADR      r1,|L5.100|
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       HF_Debug
;;;306    		for(int i=0;i<len;i++) u_printf("%02x ",data[i]);
00003a  2400              MOVS     r4,#0
00003c  e005              B        |L5.74|
                  |L5.62|
00003e  5732              LDRSB    r2,[r6,r4]
000040  a10b              ADR      r1,|L5.112|
000042  200a              MOVS     r0,#0xa
000044  f7fffffe          BL       HF_Debug
000048  1c64              ADDS     r4,r4,#1
                  |L5.74|
00004a  42ac              CMP      r4,r5
00004c  d3f7              BCC      |L5.62|
;;;307    		u_printf("\r\n");		
00004e  a10a              ADR      r1,|L5.120|
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       HF_Debug
                  |L5.86|
;;;308    	}
;;;309    	return len;
000056  4628              MOV      r0,r5
;;;310    }
000058  bd70              POP      {r4-r6,pc}
;;;311    void USER_FUNC test_timer_callback( hftimer_handle_t htimer )
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      rbb_buff
                  |L5.96|
                          DCD      ||rb||
                  |L5.100|
000064  74637020          DCB      "tcp recv:",0
000068  72656376
00006c  3a00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L5.112|
000070  25303278          DCB      "%02x ",0
000074  2000    
000076  00                DCB      0
000077  00                DCB      0
                  |L5.120|
000078  0d0a00            DCB      "\r\n",0
00007b  00                DCB      0

                          AREA ||i.test_timer_callback||, CODE, READONLY, ALIGN=2

                  test_timer_callback PROC
;;;310    }
;;;311    void USER_FUNC test_timer_callback( hftimer_handle_t htimer )
000000  b510              PUSH     {r4,lr}
;;;312    {
000002  4604              MOV      r4,r0
;;;313    		if(hftimer_get_timer_id(htimer)==1)
000004  f7fffffe          BL       hftimer_get_timer_id
000008  2801              CMP      r0,#1
00000a  d006              BEQ      |L6.26|
;;;314    		{
;;;315    			u_printf("socket send test \n");
;;;316    			memcpy(rsp,"hello world \n",sizeof("hello world \n"));
;;;317          hfnet_socketb_send(rsp,sizeof(rsp),100);			
;;;318    		}
;;;319    		else
;;;320    		{
;;;321    			u_printf("%p\n",htimer);
00000c  4622              MOV      r2,r4
00000e  e8bd4010          POP      {r4,lr}
000012  a10a              ADR      r1,|L6.60|
000014  200a              MOVS     r0,#0xa
000016  f7ffbffe          B.W      HF_Debug
                  |L6.26|
00001a  a109              ADR      r1,|L6.64|
00001c  200a              MOVS     r0,#0xa               ;315
00001e  f7fffffe          BL       HF_Debug
000022  220e              MOVS     r2,#0xe               ;316
000024  a10b              ADR      r1,|L6.84|
000026  480f              LDR      r0,|L6.100|
000028  f7fffffe          BL       __aeabi_memcpy4
00002c  2264              MOVS     r2,#0x64              ;317
00002e  e8bd4010          POP      {r4,lr}               ;317
000032  2180              MOVS     r1,#0x80              ;317
000034  480b              LDR      r0,|L6.100|
000036  f7ffbffe          B.W      hfnet_socketb_send
;;;322    		}
;;;323    }
;;;324    static void show_reset_reason(void)
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
00003c  25700a00          DCB      "%p\n",0
                  |L6.64|
000040  736f636b          DCB      "socket send test \n",0
000044  65742073
000048  656e6420
00004c  74657374
000050  200a00  
000053  00                DCB      0
                  |L6.84|
000054  68656c6c          DCB      "hello world \n",0
000058  6f20776f
00005c  726c6420
000060  0a00    
000062  00                DCB      0
000063  00                DCB      0
                  |L6.100|
                          DCD      ||.data||+0x4

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  hf_gpio_fid_to_pid_map_table
                          DCD      0x00080002
                          DCD      0x00080003
                          DCD      0x00080004
                          DCD      0x00080005
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x008b0027
                          DCD      0x008b0028
                          DCD      0x008b0029
                          DCD      0x008b002a
                          DCD      0x028b001b
                          DCD      0x008b001c
                          DCD      0x028b001d
                          DCD      0x008b001e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0383000b
                          DCD      0x0383000c
                          DCD      0x0083002d
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01830012
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          %        264

                          AREA ||area_number.10||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.constdata||
                  user_define_at_cmds_table
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  module_type
                          DCD      0x00000004
                  ||rsp||
000004  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000008  6f20776f          DCB      0x6f,0x20,0x77,0x6f
00000c  726c640a          DCB      0x72,0x6c,0x64,0x0a
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          %        112

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  test_timer
                          DCD      0x00000000
