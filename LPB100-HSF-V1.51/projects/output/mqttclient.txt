; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqttclient.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqttclient.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqttclient.crf ..\..\mqtt\MQTTClient.c]
                          THUMB

                          AREA ||i.MQTTClientInit||, CODE, READONLY, ALIGN=1

                  MQTTClientInit PROC
;;;70       */
;;;71     void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;72     		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
;;;73     {
000004  4604              MOV      r4,r0
000006  e9dd6507          LDRD     r6,r5,[sp,#0x1c]
;;;74         int i;
;;;75         c->ipstack = network;
00000a  9f06              LDR      r7,[sp,#0x18]
;;;76         
;;;77         for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
00000c  6501              STR      r1,[r0,#0x50]
00000e  2000              MOVS     r0,#0
000010  4601              MOV      r1,r0
                  |L1.18|
;;;78             c->messageHandlers[i].topicFilter = 0;
000012  eb040cc0          ADD      r12,r4,r0,LSL #3
000016  1c40              ADDS     r0,r0,#1
000018  f8cc1024          STR      r1,[r12,#0x24]        ;77
00001c  2805              CMP      r0,#5                 ;77
00001e  dbf8              BLT      |L1.18|
;;;79         c->command_timeout_ms = command_timeout_ms;
;;;80         c->buf = sendbuf;
;;;81         c->buf_size = sendbuf_size;
;;;82         c->readbuf = readbuf;
;;;83         c->readbuf_size = readbuf_size;
;;;84         c->isconnected = 0;
000020  6166              STR      r6,[r4,#0x14]
000022  6221              STR      r1,[r4,#0x20]
000024  e9c42701          STRD     r2,r7,[r4,#4]
000028  e9c45303          STRD     r5,r3,[r4,#0xc]
;;;85         c->ping_outstanding = 0;
00002c  7721              STRB     r1,[r4,#0x1c]
;;;86         c->defaultMessageHandler = NULL;
;;;87     	  c->next_packetid = 1;
00002e  2001              MOVS     r0,#1
;;;88         TimerInit(&c->ping_timer);
000030  64e1              STR      r1,[r4,#0x4c]
000032  6020              STR      r0,[r4,#0]
000034  f1040054          ADD      r0,r4,#0x54
000038  f7fffffe          BL       TimerInit
;;;89     #if defined(MQTT_TASK)
;;;90     	  MutexInit(&c->mutex);
00003c  f1040058          ADD      r0,r4,#0x58
000040  e8bd41f0          POP      {r4-r8,lr}
000044  f7ffbffe          B.W      MutexInit
;;;91     #endif
;;;92     }
;;;93     /**
                          ENDP


                          AREA ||i.MQTTConnect||, CODE, READONLY, ALIGN=2

                  MQTTConnect PROC
;;;415      */
;;;416    int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;417    {
000004  b09a              SUB      sp,sp,#0x68
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
;;;418        Timer connect_timer;
;;;419        int rc = FAILURE;
00000a  f04f37ff          MOV      r7,#0xffffffff
00000e  463d              MOV      r5,r7
;;;420        MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
000010  2258              MOVS     r2,#0x58
000012  4925              LDR      r1,|L2.168|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memcpy4
;;;421        int len = 0;
;;;422    
;;;423    #if defined(MQTT_TASK)
;;;424    	MutexLock(&c->mutex);
00001a  f1040058          ADD      r0,r4,#0x58
00001e  4680              MOV      r8,r0
000020  f7fffffe          BL       MutexLock
;;;425    #endif
;;;426    	if (c->isconnected) /* don't send connect packet again if we are already connected */
000024  6a20              LDR      r0,[r4,#0x20]
000026  bb90              CBNZ     r0,|L2.142|
;;;427    		goto exit;
;;;428        
;;;429        TimerInit(&connect_timer);
000028  a816              ADD      r0,sp,#0x58
00002a  f7fffffe          BL       TimerInit
;;;430        TimerCountdownMS(&connect_timer, c->command_timeout_ms);
00002e  a816              ADD      r0,sp,#0x58
000030  6861              LDR      r1,[r4,#4]
000032  f7fffffe          BL       TimerCountdownMS
;;;431    
;;;432        if (options == 0)
000036  b906              CBNZ     r6,|L2.58|
;;;433            options = &default_options; /* set default options if none were supplied */
000038  466e              MOV      r6,sp
                  |L2.58|
;;;434    		
;;;435        c->keepAliveInterval = options->keepAliveInterval;
;;;436        TimerCountdown(&c->ping_timer, c->keepAliveInterval);
00003a  f1040054          ADD      r0,r4,#0x54
00003e  8b31              LDRH     r1,[r6,#0x18]         ;435
000040  61a1              STR      r1,[r4,#0x18]
000042  f7fffffe          BL       TimerCountdown
;;;437        if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
000046  4632              MOV      r2,r6
000048  68a1              LDR      r1,[r4,#8]
00004a  6920              LDR      r0,[r4,#0x10]
00004c  f7fffffe          BL       MQTTSerialize_connect
000050  2800              CMP      r0,#0
000052  dd22              BLE      |L2.154|
;;;438            goto exit;
;;;439        if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
000054  4601              MOV      r1,r0
000056  aa16              ADD      r2,sp,#0x58
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       sendPacket
00005e  0005              MOVS     r5,r0
000060  d11b              BNE      |L2.154|
;;;440            goto exit; // there was a problem
;;;441        // this will be a blocking call, wait for the connack
;;;442        if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
000062  aa16              ADD      r2,sp,#0x58
000064  2102              MOVS     r1,#2
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       waitfor
00006c  2802              CMP      r0,#2
00006e  d10d              BNE      |L2.140|
;;;443        {
;;;444            unsigned char connack_rc = 255;
000070  20ff              MOVS     r0,#0xff
000072  f88d005c          STRB     r0,[sp,#0x5c]
;;;445            unsigned char sessionPresent = 0;
000076  2000              MOVS     r0,#0
000078  f88d0060          STRB     r0,[sp,#0x60]
;;;446            if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
00007c  a917              ADD      r1,sp,#0x5c
00007e  a818              ADD      r0,sp,#0x60
000080  68e3              LDR      r3,[r4,#0xc]
000082  6962              LDR      r2,[r4,#0x14]
000084  f7fffffe          BL       MQTTDeserialize_connack
000088  2801              CMP      r0,#1
00008a  d001              BEQ      |L2.144|
                  |L2.140|
;;;447    				{			 
;;;448    				   rc = connack_rc;
;;;449    				}
;;;450            else
;;;451    				{					
;;;452    				   rc = FAILURE;
00008c  463d              MOV      r5,r7
                  |L2.142|
00008e  e004              B        |L2.154|
                  |L2.144|
000090  f89d505c          LDRB     r5,[sp,#0x5c]         ;448
000094  b90d              CBNZ     r5,|L2.154|
;;;453    				}
;;;454                
;;;455        }
;;;456        else
;;;457            rc = FAILURE;
;;;458        
;;;459    exit:
;;;460        if (rc == SUCCESS)
;;;461            c->isconnected = 1;
000096  2001              MOVS     r0,#1
000098  6220              STR      r0,[r4,#0x20]
                  |L2.154|
00009a  4640              MOV      r0,r8
;;;462    
;;;463    #if defined(MQTT_TASK)
;;;464    	MutexUnlock(&c->mutex);
00009c  f7fffffe          BL       MutexUnlock
;;;465    #endif
;;;466    
;;;467        return rc;
;;;468    }
0000a0  b01a              ADD      sp,sp,#0x68
0000a2  4628              MOV      r0,r5                 ;467
0000a4  e8bd81f0          POP      {r4-r8,pc}
;;;469    /**
                          ENDP

                  |L2.168|
                          DCD      ||.constdata||

                          AREA ||i.MQTTDisconnect||, CODE, READONLY, ALIGN=1

                  MQTTDisconnect PROC
;;;636      */
;;;637    int MQTTDisconnect(MQTTClient* c)
000000  b5f8              PUSH     {r3-r7,lr}
;;;638    {  
000002  4604              MOV      r4,r0
;;;639        int rc = FAILURE;
;;;640        Timer timer;     // we might wait for incomplete incoming publishes to complete
;;;641        int len = 0;
;;;642    
;;;643    #if defined(MQTT_TASK)
;;;644    	MutexLock(&c->mutex);
000004  3058              ADDS     r0,r0,#0x58
000006  f04f35ff          MOV      r5,#0xffffffff        ;639
00000a  4606              MOV      r6,r0
00000c  f7fffffe          BL       MutexLock
;;;645    #endif
;;;646        TimerInit(&timer);
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       TimerInit
;;;647        TimerCountdownMS(&timer, c->command_timeout_ms);
000016  4668              MOV      r0,sp
000018  6861              LDR      r1,[r4,#4]
00001a  f7fffffe          BL       TimerCountdownMS
;;;648    
;;;649    	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
00001e  68a1              LDR      r1,[r4,#8]
000020  6920              LDR      r0,[r4,#0x10]
000022  f7fffffe          BL       MQTTSerialize_disconnect
000026  1e01              SUBS     r1,r0,#0
;;;650        if (len > 0)
000028  dd04              BLE      |L3.52|
;;;651            rc = sendPacket(c, len, &timer);            // send the disconnect packet
00002a  466a              MOV      r2,sp
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       sendPacket
000032  4605              MOV      r5,r0
                  |L3.52|
;;;652            
;;;653        c->isconnected = 0;
000034  2000              MOVS     r0,#0
000036  6220              STR      r0,[r4,#0x20]
000038  4630              MOV      r0,r6
;;;654    
;;;655    #if defined(MQTT_TASK)
;;;656    	MutexUnlock(&c->mutex);
00003a  f7fffffe          BL       MutexUnlock
;;;657    #endif
;;;658        return rc;
00003e  4628              MOV      r0,r5
;;;659    }
000040  bdf8              POP      {r3-r7,pc}
;;;660    
                          ENDP


                          AREA ||i.MQTTPublish||, CODE, READONLY, ALIGN=1

                  MQTTPublish PROC
;;;572      */
;;;573    int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;574    {
000004  4604              MOV      r4,r0
;;;575        int rc = FAILURE;
000006  f04f37ff          MOV      r7,#0xffffffff
;;;576        Timer timer;   
;;;577        MQTTString topic = MQTTString_initializer;
;;;578        topic.cstring = (char *)topicName;
;;;579        int len = 0;
;;;580    
;;;581    #if defined(MQTT_TASK)
;;;582    	MutexLock(&c->mutex);
00000a  3058              ADDS     r0,r0,#0x58
00000c  b088              SUB      sp,sp,#0x20           ;574
00000e  4615              MOV      r5,r2                 ;574
000010  463e              MOV      r6,r7                 ;575
000012  f04f0900          MOV      r9,#0                 ;577
000016  4688              MOV      r8,r1                 ;578
000018  4682              MOV      r10,r0
00001a  f7fffffe          BL       MutexLock
;;;583    #endif
;;;584    	if (!c->isconnected)
00001e  6a20              LDR      r0,[r4,#0x20]
000020  b370              CBZ      r0,|L4.128|
;;;585    		goto exit;
;;;586    
;;;587        TimerInit(&timer);
000022  a807              ADD      r0,sp,#0x1c
000024  f7fffffe          BL       TimerInit
;;;588        TimerCountdownMS(&timer, c->command_timeout_ms);
000028  a807              ADD      r0,sp,#0x1c
00002a  6861              LDR      r1,[r4,#4]
00002c  f7fffffe          BL       TimerCountdownMS
;;;589    
;;;590        if (message->qos == QOS1 || message->qos == QOS2)
000030  6828              LDR      r0,[r5,#0]
000032  2801              CMP      r0,#1
000034  d001              BEQ      |L4.58|
000036  2802              CMP      r0,#2
000038  d103              BNE      |L4.66|
                  |L4.58|
;;;591            message->id = getNextPacketId(c);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       getNextPacketId
000040  80e8              STRH     r0,[r5,#6]
                  |L4.66|
000042  e9d50102          LDRD     r0,r1,[r5,#8]
000046  e9cd0105          STRD     r0,r1,[sp,#0x14]
00004a  e9cd8902          STRD     r8,r9,[sp,#8]
;;;592        
;;;593        len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
00004e  f8cd9010          STR      r9,[sp,#0x10]
000052  88e9              LDRH     r1,[r5,#6]
000054  7928              LDRB     r0,[r5,#4]
000056  e9cd0100          STRD     r0,r1,[sp,#0]
00005a  682b              LDR      r3,[r5,#0]
00005c  2200              MOVS     r2,#0
00005e  68a1              LDR      r1,[r4,#8]
000060  6920              LDR      r0,[r4,#0x10]
000062  f7fffffe          BL       MQTTSerialize_publish
000066  1e01              SUBS     r1,r0,#0
;;;594                  topic, (unsigned char*)message->payload, message->payloadlen);
;;;595        if (len <= 0)
000068  dd25              BLE      |L4.182|
;;;596            goto exit;
;;;597        if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
00006a  aa07              ADD      r2,sp,#0x1c
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       sendPacket
000072  0006              MOVS     r6,r0
000074  d11f              BNE      |L4.182|
;;;598            goto exit; // there was a problem
;;;599        
;;;600        if (message->qos == QOS1)
000076  6828              LDR      r0,[r5,#0]
000078  2801              CMP      r0,#1
00007a  d002              BEQ      |L4.130|
;;;601        {
;;;602            if (waitfor(c, PUBACK, &timer) == PUBACK)
;;;603            {
;;;604                unsigned short mypacketid;
;;;605                unsigned char dup, type;
;;;606                if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
;;;607                    rc = FAILURE;
;;;608            }
;;;609            else
;;;610                rc = FAILURE;
;;;611        }
;;;612        else if (message->qos == QOS2)
00007c  2802              CMP      r0,#2
00007e  d008              BEQ      |L4.146|
                  |L4.128|
000080  e019              B        |L4.182|
                  |L4.130|
000082  aa07              ADD      r2,sp,#0x1c           ;602
000084  2104              MOVS     r1,#4                 ;602
000086  4620              MOV      r0,r4                 ;602
000088  f7fffffe          BL       waitfor
00008c  2804              CMP      r0,#4                 ;602
00008e  d007              BEQ      |L4.160|
000090  e010              B        |L4.180|
                  |L4.146|
;;;613        {
;;;614            if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
000092  aa07              ADD      r2,sp,#0x1c
000094  2107              MOVS     r1,#7
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       waitfor
00009c  2807              CMP      r0,#7
00009e  d109              BNE      |L4.180|
                  |L4.160|
;;;615            {
;;;616                unsigned short mypacketid;
;;;617                unsigned char dup, type;
;;;618                if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
0000a0  68e0              LDR      r0,[r4,#0xc]
0000a2  9000              STR      r0,[sp,#0]
0000a4  aa01              ADD      r2,sp,#4
0000a6  a902              ADD      r1,sp,#8
0000a8  a803              ADD      r0,sp,#0xc
0000aa  6963              LDR      r3,[r4,#0x14]
0000ac  f7fffffe          BL       MQTTDeserialize_ack
0000b0  2801              CMP      r0,#1
0000b2  d000              BEQ      |L4.182|
                  |L4.180|
;;;619                    rc = FAILURE;
0000b4  463e              MOV      r6,r7
                  |L4.182|
0000b6  4650              MOV      r0,r10
;;;620            }
;;;621            else
;;;622                rc = FAILURE;
;;;623        }
;;;624        
;;;625    exit:
;;;626    #if defined(MQTT_TASK)
;;;627    	MutexUnlock(&c->mutex);
0000b8  f7fffffe          BL       MutexUnlock
;;;628    #endif
;;;629        return rc;
;;;630    }
0000bc  b008              ADD      sp,sp,#0x20
0000be  4630              MOV      r0,r6                 ;629
0000c0  e8bd87f0          POP      {r4-r10,pc}
;;;631    /**
                          ENDP


                          AREA ||i.MQTTRun||, CODE, READONLY, ALIGN=1

                  MQTTRun PROC
;;;361      */
;;;362    void MQTTRun(void* parm)
000000  b508              PUSH     {r3,lr}
;;;363    {
000002  4604              MOV      r4,r0
;;;364    	Timer timer;
;;;365    	MQTTClient* c = (MQTTClient*)parm;
;;;366    	TimerInit(&timer);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       TimerInit
;;;367    	for (;;)
;;;368    	{
;;;369    #if defined(MQTT_TASK)		
;;;370    		MutexLock(&c->mutex);
;;;371    #endif
;;;372    		TimerCountdownMS(&timer, 500); /* Don't wait too long if no traffic is incoming */
00000a  f44f76fa          MOV      r6,#0x1f4
00000e  f1040558          ADD      r5,r4,#0x58           ;370
                  |L5.18|
000012  4628              MOV      r0,r5                 ;370
000014  f7fffffe          BL       MutexLock
000018  4631              MOV      r1,r6
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       TimerCountdownMS
;;;373    		cycle(c, &timer);
000020  4669              MOV      r1,sp
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       cycle
000028  4628              MOV      r0,r5
;;;374    #if defined(MQTT_TASK)	
;;;375    		MutexUnlock(&c->mutex);
00002a  f7fffffe          BL       MutexUnlock
00002e  e7f0              B        |L5.18|
;;;376    #endif
;;;377    	} 
;;;378    }
;;;379    /**
                          ENDP


                          AREA ||i.MQTTStartTask||, CODE, READONLY, ALIGN=2

                  MQTTStartTask PROC
;;;385    #if defined(MQTT_TASK)
;;;386    int MQTTStartTask(MQTTClient* client)
000000  4602              MOV      r2,r0
;;;387    {
;;;388    	return ThreadStart(&client->thread, &MQTTRun, client);
000002  4902              LDR      r1,|L6.12|
000004  305c              ADDS     r0,r0,#0x5c
000006  f7ffbffe          B.W      ThreadStart
;;;389    }
;;;390    #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      MQTTRun

                          AREA ||i.MQTTSubscribe||, CODE, READONLY, ALIGN=1

                  MQTTSubscribe PROC
;;;474      */
;;;475    int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;476    { 
000004  b08a              SUB      sp,sp,#0x28
000006  4604              MOV      r4,r0
;;;477        int rc = FAILURE;  
;;;478        Timer timer;
;;;479        int len = 0;
;;;480        MQTTString topic = MQTTString_initializer;
000008  f04f0800          MOV      r8,#0
00000c  f04f37ff          MOV      r7,#0xffffffff        ;477
;;;481        topic.cstring = (char *)topicFilter;  
;;;482    #if defined(MQTT_TASK)
;;;483    	MutexLock(&c->mutex);
000010  3058              ADDS     r0,r0,#0x58
000012  4699              MOV      r9,r3                 ;476
000014  460e              MOV      r6,r1                 ;476
000016  463d              MOV      r5,r7                 ;477
000018  f8cd8010          STR      r8,[sp,#0x10]         ;480
00001c  4682              MOV      r10,r0
00001e  f8cd8014          STR      r8,[sp,#0x14]
000022  9103              STR      r1,[sp,#0xc]
000024  f7fffffe          BL       MutexLock
;;;484    #endif 
;;;485    	if (!c->isconnected)
000028  6a20              LDR      r0,[r4,#0x20]
00002a  b320              CBZ      r0,|L7.118|
;;;486    		goto exit;
;;;487    
;;;488        TimerInit(&timer);
00002c  a806              ADD      r0,sp,#0x18
00002e  f7fffffe          BL       TimerInit
;;;489        TimerCountdownMS(&timer, c->command_timeout_ms);
000032  a806              ADD      r0,sp,#0x18
000034  6861              LDR      r1,[r4,#4]
000036  f7fffffe          BL       TimerCountdownMS
;;;490        len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       getNextPacketId
000040  b283              UXTH     r3,r0
000042  aa0c              ADD      r2,sp,#0x30
000044  a903              ADD      r1,sp,#0xc
000046  2001              MOVS     r0,#1
000048  e88d0007          STM      sp,{r0-r2}
00004c  2200              MOVS     r2,#0
00004e  68a1              LDR      r1,[r4,#8]
000050  6920              LDR      r0,[r4,#0x10]
000052  f7fffffe          BL       MQTTSerialize_subscribe
000056  1e01              SUBS     r1,r0,#0
;;;491        if (len <= 0)
000058  dd0d              BLE      |L7.118|
;;;492            goto exit;
;;;493        if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
00005a  aa06              ADD      r2,sp,#0x18
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       sendPacket
000062  0005              MOVS     r5,r0
000064  d107              BNE      |L7.118|
;;;494            goto exit;             // there was a problem
;;;495        if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
000066  aa06              ADD      r2,sp,#0x18
000068  2109              MOVS     r1,#9
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       waitfor
000070  2809              CMP      r0,#9
000072  d007              BEQ      |L7.132|
;;;496        {
;;;497            int count = 0, grantedQoS = -1;
;;;498            unsigned short mypacketid;
;;;499            if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
;;;500                rc = grantedQoS; // 0, 1, 2 or 0x80 
;;;501            if (rc != 0x80)
;;;502            {
;;;503                int i;
;;;504                for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
;;;505                {
;;;506                    if (c->messageHandlers[i].topicFilter == 0)
;;;507                    {
;;;508                        c->messageHandlers[i].topicFilter = topicFilter;
;;;509                        c->messageHandlers[i].fp = messageHandler;
;;;510                        rc = 0;
;;;511                        break;
;;;512                    }
;;;513                }
;;;514            }
;;;515        }
;;;516        else 
;;;517            rc = FAILURE; 
000074  463d              MOV      r5,r7
                  |L7.118|
000076  4650              MOV      r0,r10
;;;518    exit:
;;;519    #if defined(MQTT_TASK)
;;;520    	MutexUnlock(&c->mutex);
000078  f7fffffe          BL       MutexUnlock
;;;521    #endif
;;;522        return rc;
;;;523    }
00007c  b00e              ADD      sp,sp,#0x38
00007e  4628              MOV      r0,r5                 ;522
000080  e8bd87f0          POP      {r4-r10,pc}
                  |L7.132|
000084  f8cd8008          STR      r8,[sp,#8]            ;499
000088  9707              STR      r7,[sp,#0x1c]         ;499
00008a  68e1              LDR      r1,[r4,#0xc]          ;499
00008c  6960              LDR      r0,[r4,#0x14]         ;499
00008e  e9cd0100          STRD     r0,r1,[sp,#0]         ;499
000092  ab07              ADD      r3,sp,#0x1c           ;499
000094  aa02              ADD      r2,sp,#8              ;499
000096  2101              MOVS     r1,#1                 ;499
000098  a808              ADD      r0,sp,#0x20           ;499
00009a  f7fffffe          BL       MQTTDeserialize_suback
00009e  2801              CMP      r0,#1                 ;499
0000a0  d102              BNE      |L7.168|
0000a2  9d07              LDR      r5,[sp,#0x1c]         ;501
0000a4  2d80              CMP      r5,#0x80              ;501
0000a6  d0e6              BEQ      |L7.118|
                  |L7.168|
0000a8  2000              MOVS     r0,#0                 ;504
                  |L7.170|
0000aa  eb0401c0          ADD      r1,r4,r0,LSL #3       ;506
0000ae  6a49              LDR      r1,[r1,#0x24]         ;506
0000b0  b119              CBZ      r1,|L7.186|
0000b2  1c40              ADDS     r0,r0,#1              ;506
0000b4  2805              CMP      r0,#5                 ;504
0000b6  dbf8              BLT      |L7.170|
0000b8  e7dd              B        |L7.118|
                  |L7.186|
0000ba  eb0400c0          ADD      r0,r4,r0,LSL #3       ;508
0000be  2500              MOVS     r5,#0                 ;510
0000c0  e9c06909          STRD     r6,r9,[r0,#0x24]      ;508
0000c4  e7d7              B        |L7.118|
;;;524    /**
                          ENDP


                          AREA ||i.MQTTUnsubscribe||, CODE, READONLY, ALIGN=1

                  MQTTUnsubscribe PROC
;;;529      */
;;;530    int MQTTUnsubscribe(MQTTClient* c, const char* topicFilter)
000000  b5f0              PUSH     {r4-r7,lr}
;;;531    {   
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
;;;532        int rc = FAILURE;
;;;533        Timer timer;    
;;;534        MQTTString topic = MQTTString_initializer;
000006  2000              MOVS     r0,#0
000008  9003              STR      r0,[sp,#0xc]
;;;535        topic.cstring = (char *)topicFilter;
;;;536        int len = 0;
;;;537    
;;;538    #if defined(MQTT_TASK)
;;;539    	MutexLock(&c->mutex);
00000a  9004              STR      r0,[sp,#0x10]
00000c  f04f36ff          MOV      r6,#0xffffffff        ;532
000010  f1040058          ADD      r0,r4,#0x58
000014  4635              MOV      r5,r6                 ;532
000016  9102              STR      r1,[sp,#8]
000018  4607              MOV      r7,r0
00001a  f7fffffe          BL       MutexLock
;;;540    #endif
;;;541    	if (!c->isconnected)
00001e  6a20              LDR      r0,[r4,#0x20]
000020  b320              CBZ      r0,|L8.108|
;;;542    		goto exit;
;;;543    
;;;544        TimerInit(&timer);
000022  a805              ADD      r0,sp,#0x14
000024  f7fffffe          BL       TimerInit
;;;545        TimerCountdownMS(&timer, c->command_timeout_ms);
000028  a805              ADD      r0,sp,#0x14
00002a  6861              LDR      r1,[r4,#4]
00002c  f7fffffe          BL       TimerCountdownMS
;;;546        
;;;547        if ((len = MQTTSerialize_unsubscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic)) <= 0)
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       getNextPacketId
000036  b283              UXTH     r3,r0
000038  a902              ADD      r1,sp,#8
00003a  2001              MOVS     r0,#1
00003c  e9cd0100          STRD     r0,r1,[sp,#0]
000040  2200              MOVS     r2,#0
000042  68a1              LDR      r1,[r4,#8]
000044  6920              LDR      r0,[r4,#0x10]
000046  f7fffffe          BL       MQTTSerialize_unsubscribe
00004a  2800              CMP      r0,#0
00004c  dd0e              BLE      |L8.108|
;;;548            goto exit;
;;;549        if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
00004e  4601              MOV      r1,r0
000050  aa05              ADD      r2,sp,#0x14
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       sendPacket
000058  0005              MOVS     r5,r0
00005a  d107              BNE      |L8.108|
;;;550            goto exit; // there was a problem
;;;551        
;;;552        if (waitfor(c, UNSUBACK, &timer) == UNSUBACK)
00005c  aa05              ADD      r2,sp,#0x14
00005e  210b              MOVS     r1,#0xb
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       waitfor
000066  280b              CMP      r0,#0xb
000068  d006              BEQ      |L8.120|
;;;553        {
;;;554            unsigned short mypacketid;  // should be the same as the packetid above
;;;555            if (MQTTDeserialize_unsuback(&mypacketid, c->readbuf, c->readbuf_size) == 1)
;;;556                rc = 0; 
;;;557        }
;;;558        else
;;;559            rc = FAILURE;
00006a  4635              MOV      r5,r6
                  |L8.108|
00006c  4638              MOV      r0,r7
;;;560        
;;;561    exit:
;;;562    #if defined(MQTT_TASK)
;;;563    	MutexUnlock(&c->mutex);
00006e  f7fffffe          BL       MutexUnlock
;;;564    #endif
;;;565        return rc;
;;;566    }
000072  b007              ADD      sp,sp,#0x1c
000074  4628              MOV      r0,r5                 ;565
000076  bdf0              POP      {r4-r7,pc}
                  |L8.120|
000078  4668              MOV      r0,sp                 ;555
00007a  68e2              LDR      r2,[r4,#0xc]          ;555
00007c  6961              LDR      r1,[r4,#0x14]         ;555
00007e  f7fffffe          BL       MQTTDeserialize_unsuback
000082  e7f3              B        |L8.108|
;;;567    /**
                          ENDP


                          AREA ||i.MQTTYield||, CODE, READONLY, ALIGN=1

                  MQTTYield PROC
;;;336      */
;;;337    int MQTTYield(MQTTClient* c, int timeout_ms)
000000  b5f8              PUSH     {r3-r7,lr}
;;;338    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;339        int rc = SUCCESS;
000006  2400              MOVS     r4,#0
;;;340        Timer timer;
;;;341    
;;;342        TimerInit(&timer);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       TimerInit
;;;343        TimerCountdownMS(&timer, timeout_ms);
00000e  4631              MOV      r1,r6
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       TimerCountdownMS
                  |L9.22|
;;;344    
;;;345    	do
;;;346        {
;;;347            if (cycle(c, &timer) == FAILURE)
000016  4669              MOV      r1,sp
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       cycle
00001e  1c40              ADDS     r0,r0,#1
000020  d006              BEQ      |L9.48|
;;;348            {
;;;349                rc = FAILURE;
;;;350                break;
;;;351            }
;;;352    	} while (!TimerIsExpired(&timer));
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       TimerIsExpired
000028  2800              CMP      r0,#0
00002a  d0f4              BEQ      |L9.22|
                  |L9.44|
;;;353            
;;;354        return rc;
00002c  4620              MOV      r0,r4
;;;355    }
00002e  bdf8              POP      {r3-r7,pc}
                  |L9.48|
000030  f04f34ff          MOV      r4,#0xffffffff        ;349
000034  e7fa              B        |L9.44|
;;;356    /**
                          ENDP


                          AREA ||i.cycle||, CODE, READONLY, ALIGN=1

                  cycle PROC
;;;265      */
;;;266    int cycle(MQTTClient* c, Timer* timer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;267    {
000004  b08e              SUB      sp,sp,#0x38
000006  4688              MOV      r8,r1
000008  4604              MOV      r4,r0
;;;268        // read the socket, see what work is due
;;;269        unsigned short packet_type = readPacket(c, timer);
00000a  f7fffffe          BL       readPacket
00000e  b286              UXTH     r6,r0
;;;270        
;;;271        int len = 0,
;;;272        rc = SUCCESS;
000010  2500              MOVS     r5,#0
;;;273    		
;;;274        switch (packet_type)
000012  1eb0              SUBS     r0,r6,#2
;;;275        {
;;;276            case CONNACK:
;;;277            case PUBACK:
;;;278            case SUBACK:
;;;279                break;
;;;280            case PUBLISH:
;;;281            {
;;;282                MQTTString topicName;
;;;283                MQTTMessage msg;
;;;284                int intQoS;
;;;285                if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
;;;286                   (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
;;;287                    goto exit;
;;;288                msg.qos = (enum QoS)intQoS;
;;;289                deliverMessage(c, &topicName, &msg);
;;;290                if (msg.qos != QOS0)
;;;291                {
;;;292                    if (msg.qos == QOS1)
;;;293                        len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
;;;294                    else if (msg.qos == QOS2)
;;;295                        len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
;;;296                    if (len <= 0)
;;;297                        rc = FAILURE;
000014  1e6f              SUBS     r7,r5,#1
000016  280c              CMP      r0,#0xc               ;274
000018  d264              BCS      |L10.228|
00001a  e8dff000          TBB      [pc,r0]               ;274
00001e  6306              DCB      0x63,0x06
000020  63426363          DCB      0x63,0x42,0x63,0x63
000024  63636363          DCB      0x63,0x63,0x63,0x63
000028  6361              DCB      0x63,0x61
00002a  aa08              ADD      r2,sp,#0x20           ;285
00002c  6961              LDR      r1,[r4,#0x14]         ;285
00002e  68e0              LDR      r0,[r4,#0xc]          ;285
000030  9202              STR      r2,[sp,#8]            ;285
000032  e9cd1003          STRD     r1,r0,[sp,#0xc]       ;285
000036  ab07              ADD      r3,sp,#0x1c           ;285
000038  a809              ADD      r0,sp,#0x24           ;285
00003a  e9cd0300          STRD     r0,r3,[sp,#0]         ;285
00003e  a805              ADD      r0,sp,#0x14           ;285
000040  1d83              ADDS     r3,r0,#6              ;285
000042  1d02              ADDS     r2,r0,#4              ;285
000044  a90c              ADD      r1,sp,#0x30           ;285
000046  1d40              ADDS     r0,r0,#5              ;285
000048  f7fffffe          BL       MQTTDeserialize_publish
00004c  2801              CMP      r0,#1                 ;285
00004e  d14d              BNE      |L10.236|
000050  980c              LDR      r0,[sp,#0x30]         ;288
000052  9005              STR      r0,[sp,#0x14]         ;289
000054  aa05              ADD      r2,sp,#0x14           ;289
000056  a909              ADD      r1,sp,#0x24           ;289
000058  4620              MOV      r0,r4                 ;289
00005a  f7fffffe          BL       deliverMessage
00005e  9805              LDR      r0,[sp,#0x14]         ;290
000060  b3e8              CBZ      r0,|L10.222|
000062  2801              CMP      r0,#1                 ;292
000064  d002              BEQ      |L10.108|
000066  2802              CMP      r0,#2                 ;294
000068  d008              BEQ      |L10.124|
00006a  e012              B        |L10.146|
                  |L10.108|
00006c  f8bd001a          LDRH     r0,[sp,#0x1a]         ;293
000070  9000              STR      r0,[sp,#0]            ;293
000072  2300              MOVS     r3,#0                 ;293
000074  2204              MOVS     r2,#4                 ;293
000076  68a1              LDR      r1,[r4,#8]            ;293
000078  6920              LDR      r0,[r4,#0x10]         ;293
00007a  e006              B        |L10.138|
                  |L10.124|
00007c  f8bd001a          LDRH     r0,[sp,#0x1a]         ;295
000080  9000              STR      r0,[sp,#0]            ;295
000082  2300              MOVS     r3,#0                 ;295
000084  2205              MOVS     r2,#5                 ;295
000086  68a1              LDR      r1,[r4,#8]            ;295
000088  6920              LDR      r0,[r4,#0x10]         ;295
                  |L10.138|
00008a  f7fffffe          BL       MQTTSerialize_ack
00008e  1e01              SUBS     r1,r0,#0              ;295
000090  dc01              BGT      |L10.150|
                  |L10.146|
000092  463d              MOV      r5,r7
000094  e021              B        |L10.218|
                  |L10.150|
;;;298                    else
;;;299                        rc = sendPacket(c, len, timer);
000096  4642              MOV      r2,r8
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       sendPacket
00009e  4605              MOV      r5,r0
0000a0  e01b              B        |L10.218|
;;;300                    if (rc == FAILURE)
;;;301                        goto exit; // there was a problem
;;;302                }
;;;303                break;
;;;304            }
;;;305            case PUBREC:
;;;306            {
;;;307                unsigned short mypacketid;
;;;308                unsigned char dup, type;
;;;309                if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
0000a2  68e0              LDR      r0,[r4,#0xc]
0000a4  9000              STR      r0,[sp,#0]
0000a6  aa01              ADD      r2,sp,#4
0000a8  a902              ADD      r1,sp,#8
0000aa  a803              ADD      r0,sp,#0xc
0000ac  6963              LDR      r3,[r4,#0x14]
0000ae  f7fffffe          BL       MQTTDeserialize_ack
0000b2  2801              CMP      r0,#1
0000b4  d1ed              BNE      |L10.146|
;;;310                    rc = FAILURE;
;;;311                else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
0000b6  f8bd0004          LDRH     r0,[sp,#4]
0000ba  9000              STR      r0,[sp,#0]
0000bc  2300              MOVS     r3,#0
0000be  2206              MOVS     r2,#6
0000c0  68a1              LDR      r1,[r4,#8]
0000c2  6920              LDR      r0,[r4,#0x10]
0000c4  f7fffffe          BL       MQTTSerialize_ack
0000c8  2800              CMP      r0,#0
0000ca  dde2              BLE      |L10.146|
;;;312                    rc = FAILURE;
;;;313                else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
0000cc  4601              MOV      r1,r0
0000ce  4642              MOV      r2,r8
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       sendPacket
0000d6  0005              MOVS     r5,r0
0000d8  d1db              BNE      |L10.146|
                  |L10.218|
;;;314                    rc = FAILURE; // there was a problem
;;;315                if (rc == FAILURE)
0000da  1c68              ADDS     r0,r5,#1
0000dc  d007              BEQ      |L10.238|
                  |L10.222|
0000de  e001              B        |L10.228|
;;;316                    goto exit; // there was a problem
;;;317                break;
;;;318            }
;;;319            case PUBCOMP:
;;;320                break;
;;;321            case PINGRESP:
;;;322                c->ping_outstanding = 0;
0000e0  2000              MOVS     r0,#0
0000e2  7720              STRB     r0,[r4,#0x1c]
                  |L10.228|
;;;323                break;
;;;324        }
;;;325        keepalive(c);
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       keepalive
;;;326    exit:
0000ea  b905              CBNZ     r5,|L10.238|
                  |L10.236|
;;;327        if (rc == SUCCESS)
;;;328            rc = packet_type;
0000ec  4635              MOV      r5,r6
                  |L10.238|
;;;329        return rc;
;;;330    }
0000ee  b00e              ADD      sp,sp,#0x38
0000f0  4628              MOV      r0,r5                 ;329
0000f2  e8bd81f0          POP      {r4-r8,pc}
;;;331    /**
                          ENDP


                          AREA ||i.deliverMessage||, CODE, READONLY, ALIGN=1

                  deliverMessage PROC
;;;196      */
;;;197    int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;198    {
000004  4691              MOV      r9,r2
000006  460e              MOV      r6,r1
000008  4680              MOV      r8,r0
;;;199        int i;
;;;200        int rc = FAILURE;
00000a  f04f37ff          MOV      r7,#0xffffffff
;;;201    
;;;202        // we have to find the right message handler - indexed by topic
;;;203        for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
00000e  2400              MOVS     r4,#0
                  |L11.16|
;;;204        {
;;;205            if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
000010  eb0805c4          ADD      r5,r8,r4,LSL #3
000014  6a69              LDR      r1,[r5,#0x24]
000016  b3c9              CBZ      r1,|L11.140|
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       MQTTPacket_equals
00001e  bb68              CBNZ     r0,|L11.124|
;;;206                    isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
000020  e9d61001          LDRD     r1,r0,[r6,#4]
000024  180a              ADDS     r2,r1,r0
000026  6a6b              LDR      r3,[r5,#0x24]
000028  e01f              B        |L11.106|
                  |L11.42|
00002a  f990c000          LDRSB    r12,[r0,#0]
00002e  f1bc0f2f          CMP      r12,#0x2f
000032  d00a              BEQ      |L11.74|
000034  292b              CMP      r1,#0x2b
000036  d00b              BEQ      |L11.80|
000038  2923              CMP      r1,#0x23
00003a  d013              BEQ      |L11.100|
00003c  4561              CMP      r1,r12
00003e  d119              BNE      |L11.116|
000040  292b              CMP      r1,#0x2b
000042  d005              BEQ      |L11.80|
000044  2923              CMP      r1,#0x23
000046  d00d              BEQ      |L11.100|
000048  e00d              B        |L11.102|
                  |L11.74|
00004a  292f              CMP      r1,#0x2f
00004c  d112              BNE      |L11.116|
00004e  e00a              B        |L11.102|
                  |L11.80|
000050  1c41              ADDS     r1,r0,#1
000052  e001              B        |L11.88|
                  |L11.84|
000054  1c81              ADDS     r1,r0,#2
000056  1c40              ADDS     r0,r0,#1
                  |L11.88|
000058  4291              CMP      r1,r2
00005a  d204              BCS      |L11.102|
00005c  7809              LDRB     r1,[r1,#0]
00005e  292f              CMP      r1,#0x2f
000060  d1f8              BNE      |L11.84|
000062  e000              B        |L11.102|
                  |L11.100|
000064  1e50              SUBS     r0,r2,#1
                  |L11.102|
000066  1c40              ADDS     r0,r0,#1
000068  1c5b              ADDS     r3,r3,#1
                  |L11.106|
00006a  f9931000          LDRSB    r1,[r3,#0]
00006e  b109              CBZ      r1,|L11.116|
000070  4290              CMP      r0,r2
000072  d3da              BCC      |L11.42|
                  |L11.116|
000074  4290              CMP      r0,r2
000076  d109              BNE      |L11.140|
000078  7818              LDRB     r0,[r3,#0]
00007a  b938              CBNZ     r0,|L11.140|
                  |L11.124|
;;;207            {
;;;208                if (c->messageHandlers[i].fp != NULL)
00007c  6aa8              LDR      r0,[r5,#0x28]
00007e  b128              CBZ      r0,|L11.140|
000080  e9cd9600          STRD     r9,r6,[sp,#0]
;;;209                {
;;;210                    MessageData md;
;;;211                    NewMessageData(&md, topicName, message);
;;;212                    c->messageHandlers[i].fp(&md);
000084  6aa9              LDR      r1,[r5,#0x28]
000086  4668              MOV      r0,sp
000088  4788              BLX      r1
;;;213                    rc = SUCCESS;
00008a  2700              MOVS     r7,#0
                  |L11.140|
00008c  1c64              ADDS     r4,r4,#1
00008e  2c05              CMP      r4,#5                 ;203
000090  dbbe              BLT      |L11.16|
;;;214                }
;;;215            }
;;;216        }
;;;217        
;;;218        if (rc == FAILURE && c->defaultMessageHandler != NULL) 
000092  1c78              ADDS     r0,r7,#1
000094  d109              BNE      |L11.170|
000096  f8d8004c          LDR      r0,[r8,#0x4c]
00009a  b130              CBZ      r0,|L11.170|
00009c  e9cd9600          STRD     r9,r6,[sp,#0]
;;;219        {
;;;220            MessageData md;
;;;221            NewMessageData(&md, topicName, message);
;;;222            c->defaultMessageHandler(&md);
0000a0  f8d8104c          LDR      r1,[r8,#0x4c]
0000a4  4668              MOV      r0,sp
0000a6  4788              BLX      r1
;;;223            rc = SUCCESS;
0000a8  2700              MOVS     r7,#0
                  |L11.170|
;;;224        }   
;;;225        
;;;226        return rc;
0000aa  4638              MOV      r0,r7
;;;227    }
0000ac  e8bd87fc          POP      {r2-r10,pc}
;;;228    /**
                          ENDP


                          AREA ||i.getNextPacketId||, CODE, READONLY, ALIGN=1

                  getNextPacketId PROC
;;;34       */
;;;35     static int getNextPacketId(MQTTClient *c) {
000000  4601              MOV      r1,r0
;;;36         return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
000002  6800              LDR      r0,[r0,#0]
000004  f5a0427f          SUB      r2,r0,#0xff00
000008  3aff              SUBS     r2,r2,#0xff
00000a  d002              BEQ      |L12.18|
00000c  1c40              ADDS     r0,r0,#1              ;35
                  |L12.14|
00000e  6008              STR      r0,[r1,#0]
;;;37     }
000010  4770              BX       lr
                  |L12.18|
000012  2001              MOVS     r0,#1                 ;36
000014  e7fb              B        |L12.14|
;;;38     /**
                          ENDP


                          AREA ||i.keepalive||, CODE, READONLY, ALIGN=1

                  keepalive PROC
;;;233      */
;;;234    int keepalive(MQTTClient* c)
000000  b538              PUSH     {r3-r5,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236        int rc = FAILURE;
;;;237    
;;;238        if (c->keepAliveInterval == 0)
000004  6980              LDR      r0,[r0,#0x18]
000006  f04f35ff          MOV      r5,#0xffffffff        ;236
00000a  b138              CBZ      r0,|L13.28|
;;;239        {
;;;240            rc = SUCCESS;
;;;241            goto exit;
;;;242        }
;;;243    
;;;244        if (TimerIsExpired(&c->ping_timer))
00000c  f1040054          ADD      r0,r4,#0x54
000010  f7fffffe          BL       TimerIsExpired
000014  b1d0              CBZ      r0,|L13.76|
;;;245        {
;;;246            if (!c->ping_outstanding)
000016  7f20              LDRB     r0,[r4,#0x1c]
000018  b110              CBZ      r0,|L13.32|
00001a  e017              B        |L13.76|
                  |L13.28|
00001c  2500              MOVS     r5,#0                 ;240
00001e  e015              B        |L13.76|
                  |L13.32|
;;;247            {
;;;248                Timer timer;
;;;249                TimerInit(&timer);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       TimerInit
;;;250                TimerCountdownMS(&timer, 1000);
000026  f44f717a          MOV      r1,#0x3e8
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       TimerCountdownMS
;;;251                int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
000030  68a1              LDR      r1,[r4,#8]
000032  6920              LDR      r0,[r4,#0x10]
000034  f7fffffe          BL       MQTTSerialize_pingreq
000038  1e01              SUBS     r1,r0,#0
;;;252                if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
00003a  dd07              BLE      |L13.76|
00003c  466a              MOV      r2,sp
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       sendPacket
000044  0005              MOVS     r5,r0
000046  d101              BNE      |L13.76|
;;;253                    c->ping_outstanding = 1;
000048  2001              MOVS     r0,#1
00004a  7720              STRB     r0,[r4,#0x1c]
                  |L13.76|
;;;254            }
;;;255        }
;;;256    
;;;257    exit:
;;;258        return rc;
00004c  4628              MOV      r0,r5
;;;259    }
00004e  bd38              POP      {r3-r5,pc}
;;;260    /**
                          ENDP


                          AREA ||i.readPacket||, CODE, READONLY, ALIGN=1

                  readPacket PROC
;;;130      */
;;;131    static int readPacket(MQTTClient* c, Timer* timer)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;132    {
000004  b081              SUB      sp,sp,#4
000006  4604              MOV      r4,r0
;;;133        int rc = FAILURE;
;;;134        MQTTHeader header = {0};
000008  f04f0900          MOV      r9,#0
00000c  f04f38ff          MOV      r8,#0xffffffff        ;133
;;;135        int len = 0;
;;;136        int rem_len = 0;
000010  464d              MOV      r5,r9
;;;137    
;;;138        /* 1. read the header byte.  This has the packet type in it */
;;;139        if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
000012  9802              LDR      r0,[sp,#8]
000014  f7fffffe          BL       TimerLeftMS
000018  4603              MOV      r3,r0
00001a  6d20              LDR      r0,[r4,#0x50]
00001c  6961              LDR      r1,[r4,#0x14]
00001e  2201              MOVS     r2,#1
000020  6846              LDR      r6,[r0,#4]
000022  47b0              BLX      r6
000024  2801              CMP      r0,#1
000026  d137              BNE      |L14.152|
;;;140            goto exit;
;;;141    
;;;142        len = 1;
000028  4682              MOV      r10,r0
;;;143        /* 2. read the remaining length.  This is variable in itself */
;;;144        decodePacket(c, &rem_len, TimerLeftMS(timer));
00002a  9802              LDR      r0,[sp,#8]
00002c  f7fffffe          BL       TimerLeftMS
000030  2601              MOVS     r6,#1
000032  4683              MOV      r11,r0
000034  2700              MOVS     r7,#0
                  |L14.54|
000036  1c7f              ADDS     r7,r7,#1
000038  2f04              CMP      r7,#4
00003a  dc11              BGT      |L14.96|
00003c  6d20              LDR      r0,[r4,#0x50]
00003e  465b              MOV      r3,r11
000040  2201              MOVS     r2,#1
000042  f8d0c004          LDR      r12,[r0,#4]
000046  4669              MOV      r1,sp
000048  47e0              BLX      r12
00004a  2801              CMP      r0,#1
00004c  d108              BNE      |L14.96|
00004e  f89d0000          LDRB     r0,[sp,#0]
000052  f000017f          AND      r1,r0,#0x7f
000056  fb015506          MLA      r5,r1,r6,r5
00005a  01f6              LSLS     r6,r6,#7
00005c  0600              LSLS     r0,r0,#24
00005e  d4ea              BMI      |L14.54|
                  |L14.96|
;;;145        len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
000060  6960              LDR      r0,[r4,#0x14]
000062  4629              MOV      r1,r5
000064  1c40              ADDS     r0,r0,#1
000066  f7fffffe          BL       MQTTPacket_encode
00006a  eb00060a          ADD      r6,r0,r10
;;;146    
;;;147        /* 3. read the rest of the buffer using a callback to supply the rest of the data */
;;;148        if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
00006e  2d00              CMP      r5,#0
000070  dd0b              BLE      |L14.138|
000072  9802              LDR      r0,[sp,#8]
000074  f7fffffe          BL       TimerLeftMS
000078  4603              MOV      r3,r0
00007a  6960              LDR      r0,[r4,#0x14]
00007c  462a              MOV      r2,r5
00007e  1981              ADDS     r1,r0,r6
000080  6d20              LDR      r0,[r4,#0x50]
000082  6846              LDR      r6,[r0,#4]
000084  47b0              BLX      r6
000086  42a8              CMP      r0,r5
000088  d106              BNE      |L14.152|
                  |L14.138|
;;;149            goto exit;
;;;150    
;;;151        header.byte = c->readbuf[0];
00008a  6960              LDR      r0,[r4,#0x14]
00008c  7801              LDRB     r1,[r0,#0]
00008e  4648              MOV      r0,r9
000090  f3610007          BFI      r0,r1,#0,#8
;;;152        rc = header.bits.type;
000094  ea4f1810          LSR      r8,r0,#4
                  |L14.152|
;;;153    exit:
;;;154        return rc;
000098  4640              MOV      r0,r8
;;;155    }
00009a  e8bd8ffe          POP      {r1-r11,pc}
;;;156    /**
                          ENDP


                          AREA ||i.sendPacket||, CODE, READONLY, ALIGN=1

                  sendPacket PROC
;;;43       */
;;;44     static int sendPacket(MQTTClient* c, int length, Timer* timer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;45     {
000004  4690              MOV      r8,r2
000006  460e              MOV      r6,r1
000008  4605              MOV      r5,r0
;;;46         int rc = FAILURE, 
00000a  f04f37ff          MOV      r7,#0xffffffff
;;;47             sent = 0;
00000e  2400              MOVS     r4,#0
000010  e00d              B        |L15.46|
                  |L15.18|
;;;48         
;;;49         while (sent < length && !TimerIsExpired(timer))
;;;50         {
;;;51             rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       TimerLeftMS
000018  4603              MOV      r3,r0
00001a  6928              LDR      r0,[r5,#0x10]
00001c  4632              MOV      r2,r6
00001e  1901              ADDS     r1,r0,r4
000020  6d28              LDR      r0,[r5,#0x50]
000022  f8d0c008          LDR      r12,[r0,#8]
000026  47e0              BLX      r12
;;;52             if (rc < 0)  // there was an error writing the data
000028  2800              CMP      r0,#0
00002a  db07              BLT      |L15.60|
;;;53                 break;
;;;54             sent += rc;
00002c  4404              ADD      r4,r4,r0
                  |L15.46|
00002e  42b4              CMP      r4,r6                 ;49
000030  da04              BGE      |L15.60|
000032  4640              MOV      r0,r8                 ;49
000034  f7fffffe          BL       TimerIsExpired
000038  2800              CMP      r0,#0                 ;49
00003a  d0ea              BEQ      |L15.18|
                  |L15.60|
;;;55         }
;;;56         if (sent == length)
00003c  42b4              CMP      r4,r6
00003e  d107              BNE      |L15.80|
;;;57         {
;;;58             TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
000040  f1050054          ADD      r0,r5,#0x54
000044  69a9              LDR      r1,[r5,#0x18]
000046  f7fffffe          BL       TimerCountdown
;;;59             rc = SUCCESS;
00004a  2000              MOVS     r0,#0
                  |L15.76|
;;;60         }
;;;61         else
;;;62             rc = FAILURE;
;;;63         return rc;
;;;64     }
00004c  e8bd81f0          POP      {r4-r8,pc}
                  |L15.80|
000050  4638              MOV      r0,r7                 ;62
000052  e7fb              B        |L15.76|
;;;65     /**
                          ENDP


                          AREA ||i.waitfor||, CODE, READONLY, ALIGN=1

                  waitfor PROC
;;;396      */
;;;397    int waitfor(MQTTClient* c, int packet_type, Timer* timer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;398    {
000004  4615              MOV      r5,r2
000006  460c              MOV      r4,r1
000008  4606              MOV      r6,r0
;;;399        int rc = FAILURE;
00000a  f04f37ff          MOV      r7,#0xffffffff
                  |L16.14|
;;;400        
;;;401        do
;;;402        {
;;;403            if (TimerIsExpired(timer))
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       TimerIsExpired
000014  b930              CBNZ     r0,|L16.36|
;;;404                break; // we timed out
;;;405        }
;;;406        while ((rc = cycle(c, timer)) != packet_type);  
000016  4629              MOV      r1,r5
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       cycle
00001e  4607              MOV      r7,r0
000020  42a0              CMP      r0,r4
000022  d1f4              BNE      |L16.14|
                  |L16.36|
;;;407        
;;;408        return rc;
000024  4638              MOV      r0,r7
;;;409    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;410    /**
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4d515443          DCB      0x4d,0x51,0x54,0x43
                          DCD      0x00000000
000008  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000018  003c              DCW      0x003c
00001a  0100              DCB      0x01,0x00
00001c  4d515457          DCB      0x4d,0x51,0x54,0x57
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
