; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqttconnectserver.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqttconnectserver.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqttconnectserver.crf ..\..\mqtt\MQTTConnectServer.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_connect||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_connect PROC
;;;50       */
;;;51     int MQTTDeserialize_connect(MQTTPacket_connectData* data, unsigned char* buf, int len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;52     {
000002  b085              SUB      sp,sp,#0x14
;;;53     	MQTTHeader header = {0};
000004  2500              MOVS     r5,#0
000006  4604              MOV      r4,r0                 ;52
;;;54     	MQTTConnectFlags flags = {0};
;;;55     	unsigned char* curdata = buf;
;;;56     	unsigned char* enddata = &buf[len];
000008  188e              ADDS     r6,r1,r2
;;;57     	int rc = 0;
00000a  462f              MOV      r7,r5
;;;58     	MQTTString Protocol;
;;;59     	int version;
;;;60     	int mylen = 0;
;;;61     
;;;62     	FUNC_ENTRY;
;;;63     	header.byte = readChar(&curdata);
00000c  4668              MOV      r0,sp
00000e  9504              STR      r5,[sp,#0x10]
000010  9100              STR      r1,[sp,#0]
000012  f7fffffe          BL       readChar
000016  4601              MOV      r1,r0
000018  4628              MOV      r0,r5
00001a  f3610007          BFI      r0,r1,#0,#8
;;;64     	if (header.bits.type != CONNECT)
00001e  0900              LSRS     r0,r0,#4
000020  2801              CMP      r0,#1
000022  d166              BNE      |L1.242|
;;;65     		goto exit;
;;;66     
;;;67     	curdata += MQTTPacket_decodeBuf(curdata, &mylen); /* read remaining length */
000024  a904              ADD      r1,sp,#0x10
000026  9800              LDR      r0,[sp,#0]
000028  f7fffffe          BL       MQTTPacket_decodeBuf
00002c  9900              LDR      r1,[sp,#0]
;;;68     
;;;69     	if (!readMQTTLenString(&Protocol, &curdata, enddata) ||
00002e  4632              MOV      r2,r6
000030  4408              ADD      r0,r0,r1              ;67
000032  9000              STR      r0,[sp,#0]
000034  4669              MOV      r1,sp
000036  a801              ADD      r0,sp,#4
000038  f7fffffe          BL       readMQTTLenString
00003c  2800              CMP      r0,#0
00003e  d058              BEQ      |L1.242|
;;;70     		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
000040  9800              LDR      r0,[sp,#0]
000042  1a30              SUBS     r0,r6,r0
000044  d455              BMI      |L1.242|
;;;71     		goto exit;
;;;72     
;;;73     	version = (int)readChar(&curdata); /* Protocol version */
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       readChar
00004c  4601              MOV      r1,r0
;;;74     	/* If we don't recognize the protocol version, we don't parse the connect packet on the
;;;75     	 * basis that we don't know what the format will be.
;;;76     	 */
;;;77     	if (MQTTPacket_checkVersion(&Protocol, version))
00004e  a801              ADD      r0,sp,#4
000050  f7fffffe          BL       MQTTPacket_checkVersion
000054  b3f0              CBZ      r0,|L1.212|
;;;78     	{
;;;79     		flags.all = readChar(&curdata);
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       readChar
00005c  f3600507          BFI      r5,r0,#0,#8
;;;80     		data->cleansession = flags.bits.cleansession;
000060  f3c50040          UBFX     r0,r5,#1,#1
000064  76a0              STRB     r0,[r4,#0x1a]
;;;81     		data->keepAliveInterval = readInt(&curdata);
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       readInt
00006c  8320              STRH     r0,[r4,#0x18]
;;;82     		if (!readMQTTLenString(&data->clientID, &curdata, enddata))
00006e  4632              MOV      r2,r6
000070  4669              MOV      r1,sp
000072  f104000c          ADD      r0,r4,#0xc
000076  f7fffffe          BL       readMQTTLenString
00007a  b358              CBZ      r0,|L1.212|
;;;83     			goto exit;
;;;84     		data->willFlag = flags.bits.will;
00007c  f3c50080          UBFX     r0,r5,#2,#1
000080  76e0              STRB     r0,[r4,#0x1b]
;;;85     		if (flags.bits.will)
000082  0768              LSLS     r0,r5,#29
000084  d515              BPL      |L1.178|
;;;86     		{
;;;87     			data->will.qos = flags.bits.willQoS;
000086  f3c500c1          UBFX     r0,r5,#3,#2
00008a  f884003d          STRB     r0,[r4,#0x3d]
;;;88     			data->will.retained = flags.bits.willRetain;
00008e  f3c51040          UBFX     r0,r5,#5,#1
000092  f884003c          STRB     r0,[r4,#0x3c]
;;;89     			if (!readMQTTLenString(&data->will.topicName, &curdata, enddata) ||
000096  4632              MOV      r2,r6
000098  4669              MOV      r1,sp
00009a  f1040024          ADD      r0,r4,#0x24
00009e  f7fffffe          BL       readMQTTLenString
0000a2  b1b8              CBZ      r0,|L1.212|
;;;90     				  !readMQTTLenString(&data->will.message, &curdata, enddata))
0000a4  4632              MOV      r2,r6
0000a6  4669              MOV      r1,sp
0000a8  f1040030          ADD      r0,r4,#0x30
0000ac  f7fffffe          BL       readMQTTLenString
0000b0  b180              CBZ      r0,|L1.212|
                  |L1.178|
;;;91     				goto exit;
;;;92     		}
;;;93     		if (flags.bits.username)
0000b2  0628              LSLS     r0,r5,#24
0000b4  d51a              BPL      |L1.236|
;;;94     		{
;;;95     			if (enddata - curdata < 3 || !readMQTTLenString(&data->username, &curdata, enddata))
0000b6  9800              LDR      r0,[sp,#0]
0000b8  1a30              SUBS     r0,r6,r0
0000ba  2803              CMP      r0,#3
0000bc  db19              BLT      |L1.242|
0000be  4632              MOV      r2,r6
0000c0  4669              MOV      r1,sp
0000c2  f1040040          ADD      r0,r4,#0x40
0000c6  f7fffffe          BL       readMQTTLenString
0000ca  b118              CBZ      r0,|L1.212|
;;;96     				goto exit; /* username flag set, but no username supplied - invalid */
;;;97     			if (flags.bits.password &&
0000cc  0668              LSLS     r0,r5,#25
0000ce  d50f              BPL      |L1.240|
;;;98     				(enddata - curdata < 3 || !readMQTTLenString(&data->password, &curdata, enddata)))
0000d0  9800              LDR      r0,[sp,#0]
0000d2  e000              B        |L1.214|
                  |L1.212|
0000d4  e00d              B        |L1.242|
                  |L1.214|
0000d6  1a30              SUBS     r0,r6,r0
0000d8  2803              CMP      r0,#3
0000da  db0a              BLT      |L1.242|
0000dc  4632              MOV      r2,r6
0000de  4669              MOV      r1,sp
0000e0  f104004c          ADD      r0,r4,#0x4c
0000e4  f7fffffe          BL       readMQTTLenString
0000e8  b118              CBZ      r0,|L1.242|
0000ea  e001              B        |L1.240|
                  |L1.236|
;;;99     				goto exit; /* password flag set, but no password supplied - invalid */
;;;100    		}
;;;101    		else if (flags.bits.password)
0000ec  0668              LSLS     r0,r5,#25
0000ee  d400              BMI      |L1.242|
                  |L1.240|
;;;102    			goto exit; /* password flag set without username - invalid */
;;;103    		rc = 1;
0000f0  2701              MOVS     r7,#1
                  |L1.242|
;;;104    	}
;;;105    exit:
;;;106    	FUNC_EXIT_RC(rc);
;;;107    	return rc;
;;;108    }
0000f2  b005              ADD      sp,sp,#0x14
0000f4  4638              MOV      r0,r7                 ;107
0000f6  bdf0              POP      {r4-r7,pc}
;;;109    
                          ENDP


                          AREA ||i.MQTTPacket_checkVersion||, CODE, READONLY, ALIGN=2

                  MQTTPacket_checkVersion PROC
;;;29       */
;;;30     int MQTTPacket_checkVersion(MQTTString* protocol, int version)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32     	int rc = 0;
000002  2400              MOVS     r4,#0
;;;33     
;;;34     	if (version == 3 && memcmp(protocol->lenstring.data, "MQIsdp",
000004  2903              CMP      r1,#3
000006  d002              BEQ      |L2.14|
;;;35     			min(6, protocol->lenstring.len)) == 0)
;;;36     		rc = 1;
;;;37     	else if (version == 4 && memcmp(protocol->lenstring.data, "MQTT",
000008  2904              CMP      r1,#4
00000a  d007              BEQ      |L2.28|
00000c  e010              B        |L2.48|
                  |L2.14|
00000e  6842              LDR      r2,[r0,#4]            ;34
000010  2a06              CMP      r2,#6                 ;34
000012  dd00              BLE      |L2.22|
000014  2206              MOVS     r2,#6                 ;35
                  |L2.22|
000016  6880              LDR      r0,[r0,#8]            ;35
000018  a106              ADR      r1,|L2.52|
00001a  e005              B        |L2.40|
                  |L2.28|
00001c  6842              LDR      r2,[r0,#4]
00001e  2a04              CMP      r2,#4
000020  dd00              BLE      |L2.36|
;;;38     			min(4, protocol->lenstring.len)) == 0)
000022  2204              MOVS     r2,#4
                  |L2.36|
000024  6880              LDR      r0,[r0,#8]
000026  a105              ADR      r1,|L2.60|
                  |L2.40|
000028  f7fffffe          BL       memcmp
00002c  b900              CBNZ     r0,|L2.48|
;;;39     		rc = 1;
00002e  2401              MOVS     r4,#1
                  |L2.48|
;;;40     	return rc;
000030  4620              MOV      r0,r4
;;;41     }
000032  bd10              POP      {r4,pc}
;;;42     
                          ENDP

                  |L2.52|
000034  4d514973          DCB      "MQIsdp",0
000038  647000  
00003b  00                DCB      0
                  |L2.60|
00003c  4d515454          DCB      "MQTT",0
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.MQTTSerialize_connack||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_connack PROC
;;;118      */
;;;119    int MQTTSerialize_connack(unsigned char* buf, int buflen, unsigned char connack_rc, unsigned char sessionPresent)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;120    {
;;;121    	MQTTHeader header = {0};
000004  2700              MOVS     r7,#0
000006  461e              MOV      r6,r3                 ;120
000008  4690              MOV      r8,r2                 ;120
00000a  4604              MOV      r4,r0                 ;120
;;;122    	int rc = 0;
;;;123    	unsigned char *ptr = buf;
;;;124    	MQTTConnackFlags flags = {0};
;;;125    
;;;126    	FUNC_ENTRY;
;;;127    	if (buflen < 2)
00000c  9000              STR      r0,[sp,#0]
00000e  2902              CMP      r1,#2
000010  da02              BGE      |L3.24|
;;;128    	{
;;;129    		rc = MQTTPACKET_BUFFER_TOO_SHORT;
000012  1eb8              SUBS     r0,r7,#2
                  |L3.20|
;;;130    		goto exit;
;;;131    	}
;;;132    	header.byte = 0;
;;;133    	header.bits.type = CONNACK;
;;;134    	writeChar(&ptr, header.byte); /* write header */
;;;135    
;;;136    	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
;;;137    
;;;138    	flags.all = 0;
;;;139    	flags.bits.sessionpresent = sessionPresent;
;;;140    	writeChar(&ptr, flags.all); 
;;;141    	writeChar(&ptr, connack_rc);
;;;142    
;;;143    	rc = ptr - buf;
;;;144    exit:
;;;145    	FUNC_EXIT_RC(rc);
;;;146    	return rc;
;;;147    }
000014  e8bd83f8          POP      {r3-r9,pc}
                  |L3.24|
000018  463d              MOV      r5,r7                 ;132
00001a  4629              MOV      r1,r5                 ;132
00001c  f3650107          BFI      r1,r5,#0,#8           ;132
000020  4668              MOV      r0,sp                 ;134
000022  3120              ADDS     r1,r1,#0x20           ;134
000024  f7fffffe          BL       writeChar
000028  2102              MOVS     r1,#2                 ;136
00002a  9800              LDR      r0,[sp,#0]            ;136
00002c  f7fffffe          BL       MQTTPacket_encode
000030  9900              LDR      r1,[sp,#0]            ;136
000032  f3650707          BFI      r7,r5,#0,#8           ;136
000036  4408              ADD      r0,r0,r1              ;136
000038  f36617c7          BFI      r7,r6,#7,#1           ;139
00003c  9000              STR      r0,[sp,#0]            ;140
00003e  b279              SXTB     r1,r7                 ;139
000040  4668              MOV      r0,sp                 ;140
000042  f7fffffe          BL       writeChar
000046  fa4ff188          SXTB     r1,r8                 ;141
00004a  4668              MOV      r0,sp                 ;141
00004c  f7fffffe          BL       writeChar
000050  9800              LDR      r0,[sp,#0]            ;143
000052  1b00              SUBS     r0,r0,r4              ;143
000054  e7de              B        |L3.20|
;;;148    
                          ENDP

