; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqttconnectclient.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqttconnectclient.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqttconnectclient.crf ..\..\mqtt\MQTTConnectClient.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_connack||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_connack PROC
;;;131      */
;;;132    int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;133    {
000004  4607              MOV      r7,r0
;;;134    	MQTTHeader header = {0};
000006  2400              MOVS     r4,#0
000008  460e              MOV      r6,r1                 ;133
;;;135    	unsigned char* curdata = buf;
;;;136    	unsigned char* enddata = NULL;
;;;137    	int rc = 0;
00000a  4625              MOV      r5,r4
;;;138    	int mylen;
;;;139    	MQTTConnackFlags flags = {0};
;;;140    
;;;141    	FUNC_ENTRY;
;;;142    	header.byte = readChar(&curdata);
00000c  4668              MOV      r0,sp
00000e  9200              STR      r2,[sp,#0]
000010  f7fffffe          BL       readChar
000014  4601              MOV      r1,r0
000016  4620              MOV      r0,r4
000018  f3610007          BFI      r0,r1,#0,#8
;;;143    	if (header.bits.type != CONNACK)
00001c  0900              LSRS     r0,r0,#4
00001e  2802              CMP      r0,#2
000020  d118              BNE      |L1.84|
;;;144    		goto exit;
;;;145    
;;;146    	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
000022  a901              ADD      r1,sp,#4
000024  9800              LDR      r0,[sp,#0]
000026  f7fffffe          BL       MQTTPacket_decodeBuf
00002a  9900              LDR      r1,[sp,#0]
00002c  4605              MOV      r5,r0
00002e  4408              ADD      r0,r0,r1
;;;147    	enddata = curdata + mylen;
000030  9901              LDR      r1,[sp,#4]
000032  9000              STR      r0,[sp,#0]
000034  4401              ADD      r1,r1,r0
;;;148    	if (enddata - curdata < 2)
000036  1a08              SUBS     r0,r1,r0
000038  2802              CMP      r0,#2
00003a  db0b              BLT      |L1.84|
;;;149    		goto exit;
;;;150    
;;;151    	flags.all = readChar(&curdata);
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       readChar
000042  f3600407          BFI      r4,r0,#0,#8
;;;152    	*sessionPresent = flags.bits.sessionpresent;
000046  09e0              LSRS     r0,r4,#7
000048  7038              STRB     r0,[r7,#0]
;;;153    	*connack_rc = readChar(&curdata);
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       readChar
000050  7030              STRB     r0,[r6,#0]
;;;154    
;;;155    	rc = 1;
000052  2501              MOVS     r5,#1
                  |L1.84|
;;;156    exit:
;;;157    	FUNC_EXIT_RC(rc);
;;;158    	return rc;
000054  4628              MOV      r0,r5
;;;159    }
000056  e8bd81fc          POP      {r2-r8,pc}
;;;160    
                          ENDP


                          AREA ||i.MQTTSerialize_connect||, CODE, READONLY, ALIGN=2

                  MQTTSerialize_connect PROC
;;;57       */
;;;58     int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;59     {
000004  4606              MOV      r6,r0
;;;60     	unsigned char *ptr = buf;
;;;61     	MQTTHeader header = {0};
;;;62     	MQTTConnectFlags flags = {0};
;;;63     	int len = 0;
;;;64     	int rc = -1;
;;;65     
;;;66     	FUNC_ENTRY;
;;;67     	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
000006  9000              STR      r0,[sp,#0]
000008  4688              MOV      r8,r1                 ;59
00000a  4614              MOV      r4,r2                 ;59
00000c  2500              MOVS     r5,#0                 ;61
00000e  4610              MOV      r0,r2
000010  f7fffffe          BL       MQTTSerialize_connectLength
000014  4681              MOV      r9,r0
000016  f7fffffe          BL       MQTTPacket_len
00001a  4540              CMP      r0,r8
00001c  dd02              BLE      |L2.36|
;;;68     	{
;;;69     		rc = MQTTPACKET_BUFFER_TOO_SHORT;
00001e  1ea8              SUBS     r0,r5,#2
                  |L2.32|
;;;70     		goto exit;
;;;71     	}
;;;72     
;;;73     	header.byte = 0;
;;;74     	header.bits.type = CONNECT;
;;;75     	writeChar(&ptr, header.byte); /* write header */
;;;76     
;;;77     	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
;;;78     
;;;79     	if (options->MQTTVersion == 4)
;;;80     	{
;;;81     		writeCString(&ptr, "MQTT");
;;;82     		writeChar(&ptr, (char) 4);
;;;83     	}
;;;84     	else
;;;85     	{
;;;86     		writeCString(&ptr, "MQIsdp");
;;;87     		writeChar(&ptr, (char) 3);
;;;88     	}
;;;89     
;;;90     	flags.all = 0;
;;;91     	flags.bits.cleansession = options->cleansession;
;;;92     	flags.bits.will = (options->willFlag) ? 1 : 0;
;;;93     	if (flags.bits.will)
;;;94     	{
;;;95     		flags.bits.willQoS = options->will.qos;
;;;96     		flags.bits.willRetain = options->will.retained;
;;;97     	}
;;;98     
;;;99     	if (options->username.cstring || options->username.lenstring.data)
;;;100    		flags.bits.username = 1;
;;;101    	if (options->password.cstring || options->password.lenstring.data)
;;;102    		flags.bits.password = 1;
;;;103    
;;;104    	writeChar(&ptr, flags.all);
;;;105    	writeInt(&ptr, options->keepAliveInterval);
;;;106    	writeMQTTString(&ptr, options->clientID);
;;;107    	if (options->willFlag)
;;;108    	{
;;;109    		writeMQTTString(&ptr, options->will.topicName);
;;;110    		writeMQTTString(&ptr, options->will.message);
;;;111    	}
;;;112    	if (flags.bits.username)
;;;113    		writeMQTTString(&ptr, options->username);
;;;114    	if (flags.bits.password)
;;;115    		writeMQTTString(&ptr, options->password);
;;;116    
;;;117    	rc = ptr - buf;
;;;118    
;;;119    	exit: FUNC_EXIT_RC(rc);
;;;120    	return rc;
;;;121    }
000020  e8bd83f8          POP      {r3-r9,pc}
                  |L2.36|
000024  462f              MOV      r7,r5                 ;73
000026  4639              MOV      r1,r7                 ;73
000028  f3670107          BFI      r1,r7,#0,#8           ;73
00002c  4668              MOV      r0,sp                 ;75
00002e  3110              ADDS     r1,r1,#0x10           ;75
000030  f7fffffe          BL       writeChar
000034  4649              MOV      r1,r9                 ;77
000036  9800              LDR      r0,[sp,#0]            ;77
000038  f7fffffe          BL       MQTTPacket_encode
00003c  9900              LDR      r1,[sp,#0]            ;77
00003e  4408              ADD      r0,r0,r1              ;77
000040  9000              STR      r0,[sp,#0]            ;79
000042  7a20              LDRB     r0,[r4,#8]            ;79
000044  2804              CMP      r0,#4                 ;79
000046  d01d              BEQ      |L2.132|
000048  a12f              ADR      r1,|L2.264|
00004a  4668              MOV      r0,sp                 ;86
00004c  f7fffffe          BL       writeCString
000050  2103              MOVS     r1,#3                 ;87
                  |L2.82|
000052  4668              MOV      r0,sp                 ;87
000054  f7fffffe          BL       writeChar
000058  7ea0              LDRB     r0,[r4,#0x1a]         ;91
00005a  f3670507          BFI      r5,r7,#0,#8           ;87
00005e  f3600541          BFI      r5,r0,#1,#1           ;91
000062  7ee0              LDRB     r0,[r4,#0x1b]         ;92
000064  b108              CBZ      r0,|L2.106|
000066  f0450504          ORR      r5,r5,#4              ;92
                  |L2.106|
00006a  0768              LSLS     r0,r5,#29             ;93
00006c  d507              BPL      |L2.126|
00006e  f894003d          LDRB     r0,[r4,#0x3d]         ;95
000072  f36005c4          BFI      r5,r0,#3,#2           ;95
000076  f894003c          LDRB     r0,[r4,#0x3c]         ;96
00007a  f3601545          BFI      r5,r0,#5,#1           ;96
                  |L2.126|
00007e  6c20              LDR      r0,[r4,#0x40]         ;99
000080  b940              CBNZ     r0,|L2.148|
000082  e005              B        |L2.144|
                  |L2.132|
000084  a122              ADR      r1,|L2.272|
000086  4668              MOV      r0,sp                 ;81
000088  f7fffffe          BL       writeCString
00008c  2104              MOVS     r1,#4                 ;82
00008e  e7e0              B        |L2.82|
                  |L2.144|
000090  6ca0              LDR      r0,[r4,#0x48]         ;99
000092  b108              CBZ      r0,|L2.152|
                  |L2.148|
000094  f0450580          ORR      r5,r5,#0x80           ;100
                  |L2.152|
000098  6ce0              LDR      r0,[r4,#0x4c]         ;101
00009a  b908              CBNZ     r0,|L2.160|
00009c  6d60              LDR      r0,[r4,#0x54]         ;101
00009e  b108              CBZ      r0,|L2.164|
                  |L2.160|
0000a0  f0450540          ORR      r5,r5,#0x40           ;102
                  |L2.164|
0000a4  b269              SXTB     r1,r5                 ;102
0000a6  4668              MOV      r0,sp                 ;104
0000a8  f7fffffe          BL       writeChar
0000ac  8b21              LDRH     r1,[r4,#0x18]         ;105
0000ae  4668              MOV      r0,sp                 ;105
0000b0  f7fffffe          BL       writeInt
0000b4  f104010c          ADD      r1,r4,#0xc            ;106
0000b8  4668              MOV      r0,sp                 ;106
0000ba  c90e              LDM      r1,{r1-r3}            ;106
0000bc  f7fffffe          BL       writeMQTTString
0000c0  7ee0              LDRB     r0,[r4,#0x1b]         ;107
0000c2  b168              CBZ      r0,|L2.224|
0000c4  3424              ADDS     r4,r4,#0x24           ;109
0000c6  4668              MOV      r0,sp                 ;109
0000c8  e894000e          LDM      r4,{r1-r3}            ;109
0000cc  3c24              SUBS     r4,r4,#0x24           ;109
0000ce  f7fffffe          BL       writeMQTTString
0000d2  3430              ADDS     r4,r4,#0x30           ;110
0000d4  4668              MOV      r0,sp                 ;110
0000d6  e894000e          LDM      r4,{r1-r3}            ;110
0000da  3c30              SUBS     r4,r4,#0x30           ;110
0000dc  f7fffffe          BL       writeMQTTString
                  |L2.224|
0000e0  0628              LSLS     r0,r5,#24             ;112
0000e2  d505              BPL      |L2.240|
0000e4  f1040140          ADD      r1,r4,#0x40           ;113
0000e8  4668              MOV      r0,sp                 ;113
0000ea  c90e              LDM      r1,{r1-r3}            ;113
0000ec  f7fffffe          BL       writeMQTTString
                  |L2.240|
0000f0  0668              LSLS     r0,r5,#25             ;114
0000f2  d505              BPL      |L2.256|
0000f4  344c              ADDS     r4,r4,#0x4c           ;114
0000f6  4668              MOV      r0,sp                 ;115
0000f8  e894000e          LDM      r4,{r1-r3}            ;114
0000fc  f7fffffe          BL       writeMQTTString
                  |L2.256|
000100  9800              LDR      r0,[sp,#0]            ;117
000102  1b80              SUBS     r0,r0,r6              ;117
000104  e78c              B        |L2.32|
;;;122    
                          ENDP

000106  0000              DCW      0x0000
                  |L2.264|
000108  4d514973          DCB      "MQIsdp",0
00010c  647000  
00010f  00                DCB      0
                  |L2.272|
000110  4d515454          DCB      "MQTT",0
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.MQTTSerialize_connectLength||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_connectLength PROC
;;;26       */
;;;27     int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29     	int len = 0;
;;;30     
;;;31     	FUNC_ENTRY;
;;;32     
;;;33     	if (options->MQTTVersion == 3)
000004  7a00              LDRB     r0,[r0,#8]
000006  2500              MOVS     r5,#0                 ;29
000008  2803              CMP      r0,#3
00000a  d002              BEQ      |L3.18|
;;;34     		len = 12; /* variable depending on MQTT or MQIsdp */
;;;35     	else if (options->MQTTVersion == 4)
00000c  2804              CMP      r0,#4
00000e  d002              BEQ      |L3.22|
000010  e002              B        |L3.24|
                  |L3.18|
000012  250c              MOVS     r5,#0xc               ;34
000014  e000              B        |L3.24|
                  |L3.22|
;;;36     		len = 10;
000016  250a              MOVS     r5,#0xa
                  |L3.24|
000018  f104000c          ADD      r0,r4,#0xc
00001c  c807              LDM      r0,{r0-r2}
;;;37     
;;;38     	len += MQTTstrlen(options->clientID)+2;
00001e  f7fffffe          BL       MQTTstrlen
000022  4405              ADD      r5,r5,r0
;;;39     	if (options->willFlag)
000024  7ee0              LDRB     r0,[r4,#0x1b]
000026  1cad              ADDS     r5,r5,#2
000028  b178              CBZ      r0,|L3.74|
00002a  3424              ADDS     r4,r4,#0x24
00002c  e8940007          LDM      r4,{r0-r2}
000030  3c24              SUBS     r4,r4,#0x24
;;;40     		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
000032  f7fffffe          BL       MQTTstrlen
000036  3430              ADDS     r4,r4,#0x30
000038  4606              MOV      r6,r0
00003a  e8940007          LDM      r4,{r0-r2}
00003e  3c30              SUBS     r4,r4,#0x30
000040  f7fffffe          BL       MQTTstrlen
000044  4430              ADD      r0,r0,r6
000046  4405              ADD      r5,r5,r0
000048  1d2d              ADDS     r5,r5,#4
                  |L3.74|
;;;41     	if (options->username.cstring || options->username.lenstring.data)
00004a  6c20              LDR      r0,[r4,#0x40]
00004c  b908              CBNZ     r0,|L3.82|
00004e  6ca1              LDR      r1,[r4,#0x48]
000050  b129              CBZ      r1,|L3.94|
                  |L3.82|
000052  e9d41211          LDRD     r1,r2,[r4,#0x44]
;;;42     		len += MQTTstrlen(options->username)+2;
000056  f7fffffe          BL       MQTTstrlen
00005a  4405              ADD      r5,r5,r0
00005c  1cad              ADDS     r5,r5,#2
                  |L3.94|
;;;43     	if (options->password.cstring || options->password.lenstring.data)
00005e  6ce0              LDR      r0,[r4,#0x4c]
000060  b908              CBNZ     r0,|L3.102|
000062  6d61              LDR      r1,[r4,#0x54]
000064  b129              CBZ      r1,|L3.114|
                  |L3.102|
000066  e9d41214          LDRD     r1,r2,[r4,#0x50]
;;;44     		len += MQTTstrlen(options->password)+2;
00006a  f7fffffe          BL       MQTTstrlen
00006e  4405              ADD      r5,r5,r0
000070  1cad              ADDS     r5,r5,#2
                  |L3.114|
;;;45     
;;;46     	FUNC_EXIT_RC(len);
;;;47     	return len;
000072  4628              MOV      r0,r5
;;;48     }
000074  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP


                          AREA ||i.MQTTSerialize_disconnect||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_disconnect PROC
;;;196      */
;;;197    int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
000000  220e              MOVS     r2,#0xe
;;;198    {
;;;199    	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
000002  f7ffbffe          B.W      MQTTSerialize_zero
;;;200    }
;;;201    /**
                          ENDP


                          AREA ||i.MQTTSerialize_pingreq||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_pingreq PROC
;;;206      */
;;;207    int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
000000  220c              MOVS     r2,#0xc
;;;208    {
;;;209    	return MQTTSerialize_zero(buf, buflen, PINGREQ);
000002  f7ffbffe          B.W      MQTTSerialize_zero
;;;210    }
                          ENDP


                          AREA ||i.MQTTSerialize_zero||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_zero PROC
;;;168      */
;;;169    int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
000000  b538              PUSH     {r3-r5,lr}
;;;170    {
;;;171    	MQTTHeader header = {0};
000002  2300              MOVS     r3,#0
000004  4604              MOV      r4,r0                 ;170
;;;172    	int rc = -1;
;;;173    	unsigned char *ptr = buf;
;;;174    
;;;175    	FUNC_ENTRY;
;;;176    	if (buflen < 2)
000006  9000              STR      r0,[sp,#0]
000008  2902              CMP      r1,#2
00000a  da01              BGE      |L6.16|
;;;177    	{
;;;178    		rc = MQTTPACKET_BUFFER_TOO_SHORT;
00000c  1e98              SUBS     r0,r3,#2
;;;179    		goto exit;
;;;180    	}
;;;181    	header.byte = 0;
;;;182    	header.bits.type = packettype;
;;;183    	writeChar(&ptr, header.byte); /* write header */
;;;184    
;;;185    	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
;;;186    	rc = ptr - buf;
;;;187    exit:
;;;188    	FUNC_EXIT_RC(rc);
;;;189    	return rc;
;;;190    }
00000e  bd38              POP      {r3-r5,pc}
                  |L6.16|
000010  f3630307          BFI      r3,r3,#0,#8
000014  f3621307          BFI      r3,r2,#4,#4           ;182
000018  b259              SXTB     r1,r3                 ;182
00001a  4668              MOV      r0,sp                 ;183
00001c  f7fffffe          BL       writeChar
000020  2100              MOVS     r1,#0                 ;185
000022  9800              LDR      r0,[sp,#0]            ;185
000024  f7fffffe          BL       MQTTPacket_encode
000028  9900              LDR      r1,[sp,#0]            ;185
00002a  4401              ADD      r1,r1,r0              ;185
00002c  1b08              SUBS     r0,r1,r4              ;186
00002e  9100              STR      r1,[sp,#0]            ;186
000030  bd38              POP      {r3-r5,pc}
;;;191    /**
                          ENDP

