; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqttformat.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqttformat.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqttformat.crf ..\..\mqtt\MQTTFormat.c]
                          THUMB

                          AREA ||i.MQTTFormat_toClientString||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  MQTTFormat_toClientString PROC
;;;116    
;;;117    char* MQTTFormat_toClientString(char* strbuf, int strbuflen, unsigned char* buf, int buflen)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;118    {
000004  b091              SUB      sp,sp,#0x44
;;;119    	int index = 0;
;;;120    	int rem_length = 0;
000006  2500              MOVS     r5,#0
000008  4681              MOV      r9,r0                 ;118
;;;121    	MQTTHeader header = {0};
;;;122    	int strindex = 0;
;;;123    
;;;124    	header.byte = buf[index++];
00000a  9510              STR      r5,[sp,#0x40]
00000c  7810              LDRB     r0,[r2,#0]
00000e  462f              MOV      r7,r5
000010  4688              MOV      r8,r1                 ;118
000012  f3600707          BFI      r7,r0,#0,#8
000016  461e              MOV      r6,r3                 ;118
000018  4614              MOV      r4,r2                 ;118
;;;125    	index += MQTTPacket_decodeBuf(&buf[index], &rem_length);
00001a  1c50              ADDS     r0,r2,#1
00001c  a910              ADD      r1,sp,#0x40
00001e  f7fffffe          BL       MQTTPacket_decodeBuf
;;;126    
;;;127    	switch (header.bits.type)
000022  0938              LSRS     r0,r7,#4
000024  1e81              SUBS     r1,r0,#2
000026  290d              CMP      r1,#0xd
000028  d218              BCS      |L1.92|
00002a  e8dff001          TBB      [pc,r1]
00002e  0718              DCB      0x07,0x18
000030  43434343          DCB      0x43,0x43,0x43,0x43
000034  82548269          DCB      0x82,0x54,0x82,0x69
000038  7a7a7a00          DCB      0x7a,0x7a,0x7a,0x00
;;;128    	{
;;;129    	case CONNACK:
;;;130    	{
;;;131    		unsigned char sessionPresent, connack_rc;
;;;132    		if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, buf, buflen) == 1)
00003c  4633              MOV      r3,r6
00003e  4622              MOV      r2,r4
000040  a901              ADD      r1,sp,#4
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       MQTTDeserialize_connack
000048  2801              CMP      r0,#1
00004a  d172              BNE      |L1.306|
;;;133    			strindex = MQTTStringFormat_connack(strbuf, strbuflen, connack_rc, sessionPresent);
00004c  f89d3000          LDRB     r3,[sp,#0]
000050  f89d2004          LDRB     r2,[sp,#4]
000054  4641              MOV      r1,r8
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       MQTTStringFormat_connack
                  |L1.92|
00005c  e069              B        |L1.306|
;;;134    	}
;;;135    	break;
;;;136    	case PUBLISH:
;;;137    	{
;;;138    		unsigned char dup, retained, *payload;
;;;139    		unsigned short packetid;
;;;140    		int qos, payloadlen;
;;;141    		MQTTString topicName = MQTTString_initializer;
;;;142    		if (MQTTDeserialize_publish(&dup, &qos, &retained, &packetid, &topicName,
00005e  aa02              ADD      r2,sp,#8
000060  9507              STR      r5,[sp,#0x1c]         ;141
000062  9508              STR      r5,[sp,#0x20]         ;141
000064  a80e              ADD      r0,sp,#0x38
000066  9509              STR      r5,[sp,#0x24]
000068  e8820051          STM      r2,{r0,r4,r6}
00006c  a90f              ADD      r1,sp,#0x3c
00006e  a807              ADD      r0,sp,#0x1c
000070  e9cd0100          STRD     r0,r1,[sp,#0]
000074  ab0c              ADD      r3,sp,#0x30
000076  aa0d              ADD      r2,sp,#0x34
000078  a90a              ADD      r1,sp,#0x28
00007a  a80b              ADD      r0,sp,#0x2c
00007c  f7fffffe          BL       MQTTDeserialize_publish
000080  2801              CMP      r0,#1
000082  d156              BNE      |L1.306|
000084  e9dd100e          LDRD     r1,r0,[sp,#0x38]
000088  ab07              ADD      r3,sp,#0x1c
00008a  e9cd0105          STRD     r0,r1,[sp,#0x14]
00008e  e8930007          LDM      r3,{r0-r2}
000092  ab02              ADD      r3,sp,#8
000094  e8830007          STM      r3,{r0-r2}
;;;143    				&payload, &payloadlen, buf, buflen) == 1)
;;;144    			strindex = MQTTStringFormat_publish(strbuf, strbuflen, dup, qos, retained, packetid,
000098  f8bd1030          LDRH     r1,[sp,#0x30]
00009c  f89d0034          LDRB     r0,[sp,#0x34]
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  f89d202c          LDRB     r2,[sp,#0x2c]
0000a8  4641              MOV      r1,r8
0000aa  4648              MOV      r0,r9
0000ac  9b0a              LDR      r3,[sp,#0x28]
0000ae  f7fffffe          BL       MQTTStringFormat_publish
0000b2  e03e              B        |L1.306|
;;;145    					topicName, payload, payloadlen);
;;;146    	}
;;;147    	break;
;;;148    	case PUBACK:
;;;149    	case PUBREC:
;;;150    	case PUBREL:
;;;151    	case PUBCOMP:
;;;152    	{
;;;153    		unsigned char packettype, dup;
;;;154    		unsigned short packetid;
;;;155    		if (MQTTDeserialize_ack(&packettype, &dup, &packetid, buf, buflen) == 1)
0000b4  4623              MOV      r3,r4
0000b6  aa03              ADD      r2,sp,#0xc
0000b8  a901              ADD      r1,sp,#4
0000ba  a802              ADD      r0,sp,#8
0000bc  9600              STR      r6,[sp,#0]
0000be  f7fffffe          BL       MQTTDeserialize_ack
0000c2  2801              CMP      r0,#1
0000c4  d135              BNE      |L1.306|
;;;156    			strindex = MQTTStringFormat_ack(strbuf, strbuflen, packettype, dup, packetid);
0000c6  f8bd000c          LDRH     r0,[sp,#0xc]
0000ca  9000              STR      r0,[sp,#0]
0000cc  f89d3004          LDRB     r3,[sp,#4]
0000d0  f89d2008          LDRB     r2,[sp,#8]
0000d4  e020              B        |L1.280|
;;;157    	}
;;;158    	break;
;;;159    	case SUBACK:
;;;160    	{
;;;161    		unsigned short packetid;
;;;162    		int maxcount = 1, count = 0;
;;;163    		int grantedQoSs[1];
;;;164    		if (MQTTDeserialize_suback(&packetid, maxcount, &count, grantedQoSs, buf, buflen) == 1)
0000d6  e9cd4600          STRD     r4,r6,[sp,#0]
0000da  2101              MOVS     r1,#1                 ;162
0000dc  ab04              ADD      r3,sp,#0x10
0000de  aa02              ADD      r2,sp,#8
0000e0  a803              ADD      r0,sp,#0xc
0000e2  9502              STR      r5,[sp,#8]
0000e4  f7fffffe          BL       MQTTDeserialize_suback
0000e8  2801              CMP      r0,#1
0000ea  d122              BNE      |L1.306|
;;;165    			strindex = MQTTStringFormat_suback(strbuf, strbuflen, packetid, count, grantedQoSs);
0000ec  a804              ADD      r0,sp,#0x10
0000ee  9000              STR      r0,[sp,#0]
0000f0  f8bd200c          LDRH     r2,[sp,#0xc]
0000f4  4641              MOV      r1,r8
0000f6  4648              MOV      r0,r9
0000f8  9b02              LDR      r3,[sp,#8]
0000fa  f7fffffe          BL       MQTTStringFormat_suback
0000fe  e018              B        |L1.306|
;;;166    	}
;;;167    	break;
;;;168    	case UNSUBACK:
;;;169    	{
;;;170    		unsigned short packetid;
;;;171    		if (MQTTDeserialize_unsuback(&packetid, buf, buflen) == 1)
000100  4632              MOV      r2,r6
000102  4621              MOV      r1,r4
000104  a801              ADD      r0,sp,#4
000106  f7fffffe          BL       MQTTDeserialize_unsuback
00010a  2801              CMP      r0,#1
00010c  d111              BNE      |L1.306|
;;;172    			strindex = MQTTStringFormat_ack(strbuf, strbuflen, UNSUBACK, 0, packetid);
00010e  f8bd0004          LDRH     r0,[sp,#4]
000112  2300              MOVS     r3,#0
000114  220b              MOVS     r2,#0xb
000116  9000              STR      r0,[sp,#0]
                  |L1.280|
000118  4641              MOV      r1,r8
00011a  4648              MOV      r0,r9
00011c  f7fffffe          BL       MQTTStringFormat_ack
000120  e007              B        |L1.306|
;;;173    	}
;;;174    	break;
;;;175    	case PINGREQ:
;;;176    	case PINGRESP:
;;;177    	case DISCONNECT:
;;;178    		strindex = snprintf(strbuf, strbuflen, "%s", MQTTPacket_names[header.bits.type]);
000122  4906              LDR      r1,|L1.316|
000124  a206              ADR      r2,|L1.320|
000126  f8513020          LDR      r3,[r1,r0,LSL #2]
00012a  4641              MOV      r1,r8
00012c  4648              MOV      r0,r9
00012e  f7fffffe          BL       __2snprintf
                  |L1.306|
;;;179    		break;
;;;180    	}
;;;181    	return strbuf;
;;;182    }
000132  b011              ADD      sp,sp,#0x44
000134  4648              MOV      r0,r9                 ;181
000136  e8bd83f0          POP      {r4-r9,pc}
;;;183    
                          ENDP

00013a  0000              DCW      0x0000
                  |L1.316|
                          DCD      ||.data||
                  |L1.320|
000140  257300            DCB      "%s",0
000143  00                DCB      0

                          AREA ||i.MQTTFormat_toServerString||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  MQTTFormat_toServerString PROC
;;;184    
;;;185    char* MQTTFormat_toServerString(char* strbuf, int strbuflen, unsigned char* buf, int buflen)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;186    {
000004  b098              SUB      sp,sp,#0x60
;;;187    	int index = 0;
;;;188    	int rem_length = 0;
000006  2600              MOVS     r6,#0
000008  4682              MOV      r10,r0                ;186
;;;189    	MQTTHeader header = {0};
;;;190    	int strindex = 0;
;;;191    
;;;192    	header.byte = buf[index++];
00000a  9616              STR      r6,[sp,#0x58]
00000c  7810              LDRB     r0,[r2,#0]
00000e  4637              MOV      r7,r6
000010  4689              MOV      r9,r1                 ;186
000012  f3600707          BFI      r7,r0,#0,#8
000016  461d              MOV      r5,r3                 ;186
000018  4614              MOV      r4,r2                 ;186
;;;193    	index += MQTTPacket_decodeBuf(&buf[index], &rem_length);
00001a  1c50              ADDS     r0,r2,#1
00001c  a916              ADD      r1,sp,#0x58
00001e  f7fffffe          BL       MQTTPacket_decodeBuf
;;;194    
;;;195    	switch (header.bits.type)
000022  0938              LSRS     r0,r7,#4
000024  280f              CMP      r0,#0xf
000026  d215              BCS      |L2.84|
000028  e8dff000          TBB      [pc,r0]
00002c  93089315          DCB      0x93,0x08,0x93,0x15
000030  40404040          DCB      0x40,0x40,0x40,0x40
000034  55937293          DCB      0x55,0x93,0x72,0x93
000038  8b8b8b00          DCB      0x8b,0x8b,0x8b,0x00
;;;196    	{
;;;197    	case CONNECT:
;;;198    	{
;;;199    		MQTTPacket_connectData data;
;;;200    		int rc;
;;;201    		if ((rc = MQTTDeserialize_connect(&data, buf, buflen)) == 1)
00003c  462a              MOV      r2,r5
00003e  4621              MOV      r1,r4
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       MQTTDeserialize_connect
000046  2801              CMP      r0,#1
000048  d104              BNE      |L2.84|
;;;202    			strindex = MQTTStringFormat_connect(strbuf, strbuflen, &data);
00004a  466a              MOV      r2,sp
00004c  4649              MOV      r1,r9
00004e  4650              MOV      r0,r10
000050  f7fffffe          BL       MQTTStringFormat_connect
                  |L2.84|
000054  e07d              B        |L2.338|
;;;203    	}
;;;204    	break;
;;;205    	case PUBLISH:
;;;206    	{
;;;207    		unsigned char dup, retained, *payload;
;;;208    		unsigned short packetid;
;;;209    		int qos, payloadlen;
;;;210    		MQTTString topicName = MQTTString_initializer;
;;;211    		if (MQTTDeserialize_publish(&dup, &qos, &retained, &packetid, &topicName,
000056  aa02              ADD      r2,sp,#8
000058  9607              STR      r6,[sp,#0x1c]         ;210
00005a  9608              STR      r6,[sp,#0x20]         ;210
00005c  a80e              ADD      r0,sp,#0x38
00005e  9609              STR      r6,[sp,#0x24]
000060  e8820031          STM      r2,{r0,r4,r5}
000064  a90f              ADD      r1,sp,#0x3c
000066  a807              ADD      r0,sp,#0x1c
000068  e9cd0100          STRD     r0,r1,[sp,#0]
00006c  ab0c              ADD      r3,sp,#0x30
00006e  aa0d              ADD      r2,sp,#0x34
000070  a90a              ADD      r1,sp,#0x28
000072  a80b              ADD      r0,sp,#0x2c
000074  f7fffffe          BL       MQTTDeserialize_publish
000078  2801              CMP      r0,#1
00007a  d16a              BNE      |L2.338|
00007c  e9dd100e          LDRD     r1,r0,[sp,#0x38]
000080  ab07              ADD      r3,sp,#0x1c
000082  e9cd0105          STRD     r0,r1,[sp,#0x14]
000086  e8930007          LDM      r3,{r0-r2}
00008a  ab02              ADD      r3,sp,#8
00008c  e8830007          STM      r3,{r0-r2}
;;;212    				&payload, &payloadlen, buf, buflen) == 1)
;;;213    			strindex = MQTTStringFormat_publish(strbuf, strbuflen, dup, qos, retained, packetid,
000090  f8bd1030          LDRH     r1,[sp,#0x30]
000094  f89d0034          LDRB     r0,[sp,#0x34]
000098  e9cd0100          STRD     r0,r1,[sp,#0]
00009c  f89d202c          LDRB     r2,[sp,#0x2c]
0000a0  4649              MOV      r1,r9
0000a2  4650              MOV      r0,r10
0000a4  9b0a              LDR      r3,[sp,#0x28]
0000a6  f7fffffe          BL       MQTTStringFormat_publish
0000aa  e052              B        |L2.338|
;;;214    					topicName, payload, payloadlen);
;;;215    	}
;;;216    	break;
;;;217    	case PUBACK:
;;;218    	case PUBREC:
;;;219    	case PUBREL:
;;;220    	case PUBCOMP:
;;;221    	{
;;;222    		unsigned char packettype, dup;
;;;223    		unsigned short packetid;
;;;224    		if (MQTTDeserialize_ack(&packettype, &dup, &packetid, buf, buflen) == 1)
0000ac  4623              MOV      r3,r4
0000ae  aa03              ADD      r2,sp,#0xc
0000b0  a901              ADD      r1,sp,#4
0000b2  a802              ADD      r0,sp,#8
0000b4  9500              STR      r5,[sp,#0]
0000b6  f7fffffe          BL       MQTTDeserialize_ack
0000ba  2801              CMP      r0,#1
0000bc  d149              BNE      |L2.338|
;;;225    			strindex = MQTTStringFormat_ack(strbuf, strbuflen, packettype, dup, packetid);
0000be  f8bd000c          LDRH     r0,[sp,#0xc]
0000c2  9000              STR      r0,[sp,#0]
0000c4  f89d3004          LDRB     r3,[sp,#4]
0000c8  f89d2008          LDRB     r2,[sp,#8]
0000cc  4649              MOV      r1,r9
0000ce  4650              MOV      r0,r10
0000d0  f7fffffe          BL       MQTTStringFormat_ack
0000d4  e03d              B        |L2.338|
;;;226    	}
;;;227    	break;
;;;228    	case SUBSCRIBE:
;;;229    	{
;;;230    		unsigned char dup;
;;;231    		unsigned short packetid;
;;;232    		int maxcount = 1, count = 0;
;;;233    		MQTTString topicFilters[1];
;;;234    		int requestedQoSs[1];
;;;235    		if (MQTTDeserialize_subscribe(&dup, &packetid, maxcount, &count,
0000d6  af0a              ADD      r7,sp,#0x28
0000d8  f10d081c          ADD      r8,sp,#0x1c
0000dc  9606              STR      r6,[sp,#0x18]
0000de  e9cd8700          STRD     r8,r7,[sp,#0]
0000e2  2201              MOVS     r2,#1                 ;232
0000e4  ab06              ADD      r3,sp,#0x18
0000e6  a904              ADD      r1,sp,#0x10
0000e8  a805              ADD      r0,sp,#0x14
0000ea  e9cd4502          STRD     r4,r5,[sp,#8]
0000ee  f7fffffe          BL       MQTTDeserialize_subscribe
0000f2  2801              CMP      r0,#1
0000f4  d12d              BNE      |L2.338|
;;;236    				topicFilters, requestedQoSs, buf, buflen) == 1)
;;;237    			strindex = MQTTStringFormat_subscribe(strbuf, strbuflen, dup, packetid, count, topicFilters, requestedQoSs);;
0000f6  9806              LDR      r0,[sp,#0x18]
0000f8  e9cd0800          STRD     r0,r8,[sp,#0]
0000fc  9702              STR      r7,[sp,#8]
0000fe  f8bd3010          LDRH     r3,[sp,#0x10]
000102  f89d2014          LDRB     r2,[sp,#0x14]
000106  4649              MOV      r1,r9
000108  4650              MOV      r0,r10
00010a  f7fffffe          BL       MQTTStringFormat_subscribe
00010e  e020              B        |L2.338|
;;;238    	}
;;;239    	break;
;;;240    	case UNSUBSCRIBE:
;;;241    	{
;;;242    		unsigned char dup;
;;;243    		unsigned short packetid;
;;;244    		int maxcount = 1, count = 0;
;;;245    		MQTTString topicFilters[1];
;;;246    		if (MQTTDeserialize_unsubscribe(&dup, &packetid, maxcount, &count, topicFilters, buf, buflen) == 1)
000110  af06              ADD      r7,sp,#0x18
000112  9700              STR      r7,[sp,#0]
000114  9605              STR      r6,[sp,#0x14]
000116  2201              MOVS     r2,#1                 ;244
000118  ab05              ADD      r3,sp,#0x14
00011a  a903              ADD      r1,sp,#0xc
00011c  a804              ADD      r0,sp,#0x10
00011e  e9cd4501          STRD     r4,r5,[sp,#4]
000122  f7fffffe          BL       MQTTDeserialize_unsubscribe
000126  2801              CMP      r0,#1
000128  d113              BNE      |L2.338|
;;;247    			strindex =  MQTTStringFormat_unsubscribe(strbuf, strbuflen, dup, packetid, count, topicFilters);
00012a  9805              LDR      r0,[sp,#0x14]
00012c  e9cd0700          STRD     r0,r7,[sp,#0]
000130  f8bd300c          LDRH     r3,[sp,#0xc]
000134  f89d2010          LDRB     r2,[sp,#0x10]
000138  4649              MOV      r1,r9
00013a  4650              MOV      r0,r10
00013c  f7fffffe          BL       MQTTStringFormat_unsubscribe
000140  e007              B        |L2.338|
;;;248    	}
;;;249    	break;
;;;250    	case PINGREQ:
;;;251    	case PINGRESP:
;;;252    	case DISCONNECT:
;;;253    		strindex = snprintf(strbuf, strbuflen, "%s", MQTTPacket_names[header.bits.type]);
000142  4907              LDR      r1,|L2.352|
000144  a207              ADR      r2,|L2.356|
000146  f8513020          LDR      r3,[r1,r0,LSL #2]
00014a  4649              MOV      r1,r9
00014c  4650              MOV      r0,r10
00014e  f7fffffe          BL       __2snprintf
                  |L2.338|
;;;254    		break;
;;;255    	}
;;;256    	strbuf[strbuflen] = '\0';
000152  f80a6009          STRB     r6,[r10,r9]
;;;257    	return strbuf;
;;;258    }
000156  b018              ADD      sp,sp,#0x60
000158  4650              MOV      r0,r10                ;256
00015a  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

00015e  0000              DCW      0x0000
                  |L2.352|
                          DCD      ||.data||
                  |L2.356|
000164  257300            DCB      "%s",0
000167  00                DCB      0

                          AREA ||i.MQTTPacket_getName||, CODE, READONLY, ALIGN=2

                  MQTTPacket_getName PROC
;;;30     
;;;31     const char* MQTTPacket_getName(unsigned short packetid)
000000  4901              LDR      r1,|L3.8|
;;;32     {
;;;33     	return MQTTPacket_names[packetid];
000002  f8510020          LDR      r0,[r1,r0,LSL #2]
;;;34     }
000006  4770              BX       lr
;;;35     
                          ENDP

                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.MQTTStringFormat_ack||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  MQTTStringFormat_ack PROC
;;;79     
;;;80     int MQTTStringFormat_ack(char* strbuf, int strbuflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
000000  b5f8              PUSH     {r3-r7,lr}
;;;81     {
000002  4606              MOV      r6,r0
;;;82     	int strindex = snprintf(strbuf, strbuflen, "%s, packet id %d", MQTTPacket_names[packettype], packetid);
000004  9806              LDR      r0,[sp,#0x18]
000006  9000              STR      r0,[sp,#0]
000008  4809              LDR      r0,|L4.48|
00000a  461d              MOV      r5,r3                 ;81
00000c  460f              MOV      r7,r1                 ;81
00000e  f8503022          LDR      r3,[r0,r2,LSL #2]
000012  a208              ADR      r2,|L4.52|
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       __2snprintf
00001a  4604              MOV      r4,r0
;;;83     	if (dup)
00001c  b135              CBZ      r5,|L4.44|
;;;84     		strindex += snprintf(strbuf + strindex, strbuflen - strindex, ", dup %d", dup);
00001e  1b39              SUBS     r1,r7,r4
000020  1930              ADDS     r0,r6,r4
000022  462b              MOV      r3,r5
000024  a208              ADR      r2,|L4.72|
000026  f7fffffe          BL       __2snprintf
00002a  4404              ADD      r4,r4,r0
                  |L4.44|
;;;85     	return strindex;
00002c  4620              MOV      r0,r4
;;;86     }
00002e  bdf8              POP      {r3-r7,pc}
;;;87     
                          ENDP

                  |L4.48|
                          DCD      ||.data||
                  |L4.52|
000034  25732c20          DCB      "%s, packet id %d",0
000038  7061636b
00003c  65742069
000040  64202564
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L4.72|
000048  2c206475          DCB      ", dup %d",0
00004c  70202564
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.MQTTStringFormat_connack||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  MQTTStringFormat_connack PROC
;;;60     
;;;61     int MQTTStringFormat_connack(char* strbuf, int strbuflen, unsigned char connack_rc, unsigned char sessionPresent)
000000  b508              PUSH     {r3,lr}
;;;62     {
;;;63     	int strindex = snprintf(strbuf, strbuflen, "CONNACK session present %d, rc %d", sessionPresent, connack_rc);
000002  9200              STR      r2,[sp,#0]
000004  a201              ADR      r2,|L5.12|
000006  f7fffffe          BL       __2snprintf
;;;64     	return strindex;
;;;65     }
00000a  bd08              POP      {r3,pc}
;;;66     
                          ENDP

                  |L5.12|
00000c  434f4e4e          DCB      "CONNACK session present %d, rc %d",0
000010  41434b20
000014  73657373
000018  696f6e20
00001c  70726573
000020  656e7420
000024  25642c20
000028  72632025
00002c  6400    
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.MQTTStringFormat_connect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  MQTTStringFormat_connect PROC
;;;36     
;;;37     int MQTTStringFormat_connect(char* strbuf, int strbuflen, MQTTPacket_connectData* data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;38     {
000002  4614              MOV      r4,r2
;;;39     	int strindex = 0;
;;;40     
;;;41     	strindex = snprintf(strbuf, strbuflen,
000004  8b13              LDRH     r3,[r2,#0x18]
000006  b085              SUB      sp,sp,#0x14           ;38
000008  460e              MOV      r6,r1                 ;38
00000a  4607              MOV      r7,r0                 ;38
00000c  7e92              LDRB     r2,[r2,#0x1a]
00000e  e9d40104          LDRD     r0,r1,[r4,#0x10]
000012  e88d000f          STM      sp,{r0-r3}
000016  7a23              LDRB     r3,[r4,#8]
000018  4a1a              LDR      r2,|L6.132|
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       __2snprintf
000022  4605              MOV      r5,r0
;;;42     			"CONNECT MQTT version %d, client id %.*s, clean session %d, keep alive %d",
;;;43     			(int)data->MQTTVersion, data->clientID.lenstring.len, data->clientID.lenstring.data,
;;;44     			(int)data->cleansession, data->keepAliveInterval);
;;;45     	if (data->willFlag)
000024  7ee0              LDRB     r0,[r4,#0x1b]
000026  b190              CBZ      r0,|L6.78|
000028  e9d4230d          LDRD     r2,r3,[r4,#0x34]
00002c  e9d4010a          LDRD     r0,r1,[r4,#0x28]
000030  f10d0c04          ADD      r12,sp,#4
000034  e88c000f          STM      r12,{r0-r3}
;;;46     		strindex += snprintf(&strbuf[strindex], strbuflen - strindex,
000038  f894003c          LDRB     r0,[r4,#0x3c]
00003c  9000              STR      r0,[sp,#0]
00003e  f994303d          LDRSB    r3,[r4,#0x3d]
000042  1b71              SUBS     r1,r6,r5
000044  1978              ADDS     r0,r7,r5
000046  4a10              LDR      r2,|L6.136|
000048  f7fffffe          BL       __2snprintf
00004c  4405              ADD      r5,r5,r0
                  |L6.78|
;;;47     				", will QoS %d, will retain %d, will topic %.*s, will message %.*s",
;;;48     				data->will.qos, data->will.retained,
;;;49     				data->will.topicName.lenstring.len, data->will.topicName.lenstring.data,
;;;50     				data->will.message.lenstring.len, data->will.message.lenstring.data);
;;;51     	if (data->username.lenstring.data && data->username.lenstring.len > 0)
00004e  6ca0              LDR      r0,[r4,#0x48]
000050  b148              CBZ      r0,|L6.102|
000052  6c63              LDR      r3,[r4,#0x44]
000054  2b00              CMP      r3,#0
000056  dd06              BLE      |L6.102|
;;;52     		strindex += snprintf(&strbuf[strindex], strbuflen - strindex,
000058  9000              STR      r0,[sp,#0]
00005a  1b71              SUBS     r1,r6,r5
00005c  1978              ADDS     r0,r7,r5
00005e  a20b              ADR      r2,|L6.140|
000060  f7fffffe          BL       __2snprintf
000064  4405              ADD      r5,r5,r0
                  |L6.102|
;;;53     				", user name %.*s", data->username.lenstring.len, data->username.lenstring.data);
;;;54     	if (data->password.lenstring.data && data->password.lenstring.len > 0)
000066  6d60              LDR      r0,[r4,#0x54]
000068  b148              CBZ      r0,|L6.126|
00006a  6d23              LDR      r3,[r4,#0x50]
00006c  2b00              CMP      r3,#0
00006e  dd06              BLE      |L6.126|
;;;55     		strindex += snprintf(&strbuf[strindex], strbuflen - strindex,
000070  9000              STR      r0,[sp,#0]
000072  1b71              SUBS     r1,r6,r5
000074  1978              ADDS     r0,r7,r5
000076  a20a              ADR      r2,|L6.160|
000078  f7fffffe          BL       __2snprintf
00007c  4405              ADD      r5,r5,r0
                  |L6.126|
;;;56     				", password %.*s", data->password.lenstring.len, data->password.lenstring.data);
;;;57     	return strindex;
;;;58     }
00007e  b005              ADD      sp,sp,#0x14
000080  4628              MOV      r0,r5                 ;57
000082  bdf0              POP      {r4-r7,pc}
;;;59     
                          ENDP

                  |L6.132|
                          DCD      ||.conststring||+0x90
                  |L6.136|
                          DCD      ||.conststring||+0xdc
                  |L6.140|
00008c  2c207573          DCB      ", user name %.*s",0
000090  6572206e
000094  616d6520
000098  252e2a73
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L6.160|
0000a0  2c207061          DCB      ", password %.*s",0
0000a4  7373776f
0000a8  72642025
0000ac  2e2a7300

                          AREA ||i.MQTTStringFormat_publish||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  MQTTStringFormat_publish PROC
;;;67     
;;;68     int MQTTStringFormat_publish(char* strbuf, int strbuflen, unsigned char dup, int qos, unsigned char retained,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;69     		unsigned short packetid, MQTTString topicName, unsigned char* payload, int payloadlen)
;;;70     {
000004  b089              SUB      sp,sp,#0x24
000006  4681              MOV      r9,r0
000008  461e              MOV      r6,r3
00000a  e9dd5015          LDRD     r5,r0,[sp,#0x54]
00000e  e9dd3813          LDRD     r3,r8,[sp,#0x4c]
000012  e9ddc710          LDRD     r12,r7,[sp,#0x40]
;;;71     	int strindex = snprintf(strbuf, strbuflen,
000016  2814              CMP      r0,#0x14
000018  da01              BGE      |L7.30|
;;;72     				"PUBLISH dup %d, QoS %d, retained %d, packet id %d, topic %.*s, payload length %d, payload %.*s",
;;;73     				dup, qos, retained, packetid,
;;;74     				(topicName.lenstring.len < 20) ? topicName.lenstring.len : 20, topicName.lenstring.data,
;;;75     				payloadlen, (payloadlen < 20) ? payloadlen : 20, payload);
00001a  4604              MOV      r4,r0
00001c  e000              B        |L7.32|
                  |L7.30|
00001e  2414              MOVS     r4,#0x14
                  |L7.32|
000020  f10d0e14          ADD      lr,sp,#0x14
000024  f8cd8010          STR      r8,[sp,#0x10]
000028  e88e0031          STM      lr,{r0,r4,r5}
00002c  2b14              CMP      r3,#0x14
00002e  db00              BLT      |L7.50|
000030  2314              MOVS     r3,#0x14              ;74
                  |L7.50|
000032  e9cd7302          STRD     r7,r3,[sp,#8]         ;74
000036  e9cd6c00          STRD     r6,r12,[sp,#0]        ;74
00003a  4613              MOV      r3,r2                 ;74
00003c  4a03              LDR      r2,|L7.76|
00003e  4648              MOV      r0,r9                 ;74
000040  f7fffffe          BL       __2snprintf
;;;76     	return strindex;
;;;77     }
000044  b009              ADD      sp,sp,#0x24
000046  e8bd83f0          POP      {r4-r9,pc}
;;;78     
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      ||.conststring||+0x120

                          AREA ||i.MQTTStringFormat_suback||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  MQTTStringFormat_suback PROC
;;;99     
;;;100    int MQTTStringFormat_suback(char* strbuf, int strbuflen, unsigned short packetid, int count, int* grantedQoSs)
000000  b51c              PUSH     {r2-r4,lr}
;;;101    {
000002  461c              MOV      r4,r3
;;;102    	return snprintf(strbuf, strbuflen,
000004  9b04              LDR      r3,[sp,#0x10]
000006  681b              LDR      r3,[r3,#0]
000008  e9cd4300          STRD     r4,r3,[sp,#0]
00000c  4613              MOV      r3,r2
00000e  a202              ADR      r2,|L8.24|
000010  f7fffffe          BL       __2snprintf
;;;103    		"SUBACK packet id %d count %d granted qos %d", packetid, count, grantedQoSs[0]);
;;;104    }
000014  bd1c              POP      {r2-r4,pc}
;;;105    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
000018  53554241          DCB      "SUBACK packet id %d count %d granted qos %d",0
00001c  434b2070
000020  61636b65
000024  74206964
000028  20256420
00002c  636f756e
000030  74202564
000034  20677261
000038  6e746564
00003c  20716f73
000040  20256400

                          AREA ||i.MQTTStringFormat_subscribe||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  MQTTStringFormat_subscribe PROC
;;;88     
;;;89     int MQTTStringFormat_subscribe(char* strbuf, int strbuflen, unsigned char dup, unsigned short packetid, int count,
000000  b5f0              PUSH     {r4-r7,lr}
;;;90     		MQTTString topicFilters[], int requestedQoSs[])
;;;91     {
000002  b085              SUB      sp,sp,#0x14
000004  461e              MOV      r6,r3
000006  e9dd340b          LDRD     r3,r4,[sp,#0x2c]
;;;92     	return snprintf(strbuf, strbuflen,
00000a  9f0a              LDR      r7,[sp,#0x28]
00000c  689d              LDR      r5,[r3,#8]
00000e  6824              LDR      r4,[r4,#0]
000010  685b              LDR      r3,[r3,#4]
000012  e9cd3502          STRD     r3,r5,[sp,#8]
000016  4613              MOV      r3,r2
000018  9404              STR      r4,[sp,#0x10]
00001a  a203              ADR      r2,|L9.40|
00001c  e9cd6700          STRD     r6,r7,[sp,#0]
000020  f7fffffe          BL       __2snprintf
;;;93     		"SUBSCRIBE dup %d, packet id %d count %d topic %.*s qos %d",
;;;94     		dup, packetid, count,
;;;95     		topicFilters[0].lenstring.len, topicFilters[0].lenstring.data,
;;;96     		requestedQoSs[0]);
;;;97     }
000024  b005              ADD      sp,sp,#0x14
000026  bdf0              POP      {r4-r7,pc}
;;;98     
                          ENDP

                  |L9.40|
000028  53554253          DCB      "SUBSCRIBE dup %d, packet id %d count %d topic %.*s qos "
00002c  43524942
000030  45206475
000034  70202564
000038  2c207061
00003c  636b6574
000040  20696420
000044  25642063
000048  6f756e74
00004c  20256420
000050  746f7069
000054  6320252e
000058  2a732071
00005c  6f7320  
00005f  256400            DCB      "%d",0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.MQTTStringFormat_unsubscribe||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  MQTTStringFormat_unsubscribe PROC
;;;106    
;;;107    int MQTTStringFormat_unsubscribe(char* strbuf, int strbuflen, unsigned char dup, unsigned short packetid,
000000  b57f              PUSH     {r0-r6,lr}
;;;108    		int count, MQTTString topicFilters[])
;;;109    {
000002  461d              MOV      r5,r3
000004  e9dd6308          LDRD     r6,r3,[sp,#0x20]
;;;110    	return snprintf(strbuf, strbuflen,
000008  689c              LDR      r4,[r3,#8]
00000a  685b              LDR      r3,[r3,#4]
00000c  e9cd3402          STRD     r3,r4,[sp,#8]
000010  e9cd5600          STRD     r5,r6,[sp,#0]
000014  4613              MOV      r3,r2
000016  a202              ADR      r2,|L10.32|
000018  f7fffffe          BL       __2snprintf
;;;111    					"UNSUBSCRIBE dup %d, packet id %d count %d topic %.*s",
;;;112    					dup, packetid, count,
;;;113    					topicFilters[0].lenstring.len, topicFilters[0].lenstring.data);
;;;114    }
00001c  b004              ADD      sp,sp,#0x10
00001e  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP

                  |L10.32|
000020  554e5355          DCB      "UNSUBSCRIBE dup %d, packet id %d count %d topic %.*s",0
000024  42534352
000028  49424520
00002c  64757020
000030  25642c20
000034  7061636b
000038  65742069
00003c  64202564
000040  20636f75
000044  6e742025
000048  6420746f
00004c  70696320
000050  252e2a73
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  52455345          DCB      "RESERVED",0
000004  52564544
000008  00      
000009  00                DCB      0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  434f4e4e          DCB      "CONNECT",0
000010  45435400
000014  434f4e4e          DCB      "CONNACK",0
000018  41434b00
00001c  5055424c          DCB      "PUBLISH",0
000020  49534800
000024  50554241          DCB      "PUBACK",0
000028  434b00  
00002b  00                DCB      0
00002c  50554252          DCB      "PUBREC",0
000030  454300  
000033  00                DCB      0
000034  50554252          DCB      "PUBREL",0
000038  454c00  
00003b  00                DCB      0
00003c  50554243          DCB      "PUBCOMP",0
000040  4f4d5000
000044  53554253          DCB      "SUBSCRIBE",0
000048  43524942
00004c  4500    
00004e  00                DCB      0
00004f  00                DCB      0
000050  53554241          DCB      "SUBACK",0
000054  434b00  
000057  00                DCB      0
000058  554e5355          DCB      "UNSUBSCRIBE",0
00005c  42534352
000060  49424500
000064  554e5355          DCB      "UNSUBACK",0
000068  4241434b
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  50494e47          DCB      "PINGREQ",0
000074  52455100
000078  50494e47          DCB      "PINGRESP",0
00007c  52455350
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  44495343          DCB      "DISCONNECT",0
000088  4f4e4e45
00008c  435400  
00008f  00                DCB      0
000090  434f4e4e          DCB      "CONNECT MQTT version %d, client id %.*s, clean session "
000094  45435420
000098  4d515454
00009c  20766572
0000a0  73696f6e
0000a4  2025642c
0000a8  20636c69
0000ac  656e7420
0000b0  69642025
0000b4  2e2a732c
0000b8  20636c65
0000bc  616e2073
0000c0  65737369
0000c4  6f6e20  
0000c7  25642c20          DCB      "%d, keep alive %d",0
0000cb  6b656570
0000cf  20616c69
0000d3  76652025
0000d7  6400    
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  2c207769          DCB      ", will QoS %d, will retain %d, will topic %.*s, will me"
0000e0  6c6c2051
0000e4  6f532025
0000e8  642c2077
0000ec  696c6c20
0000f0  72657461
0000f4  696e2025
0000f8  642c2077
0000fc  696c6c20
000100  746f7069
000104  6320252e
000108  2a732c20
00010c  77696c6c
000110  206d65  
000113  73736167          DCB      "ssage %.*s",0
000117  6520252e
00011b  2a7300  
00011e  00                DCB      0
00011f  00                DCB      0
000120  5055424c          DCB      "PUBLISH dup %d, QoS %d, retained %d, packet id %d, topi"
000124  49534820
000128  64757020
00012c  25642c20
000130  516f5320
000134  25642c20
000138  72657461
00013c  696e6564
000140  2025642c
000144  20706163
000148  6b657420
00014c  69642025
000150  642c2074
000154  6f7069  
000157  6320252e          DCB      "c %.*s, payload length %d, payload %.*s",0
00015b  2a732c20
00015f  7061796c
000163  6f616420
000167  6c656e67
00016b  74682025
00016f  642c2070
000173  61796c6f
000177  61642025
00017b  2e2a7300

                          AREA ||.data||, DATA, ALIGN=2

                  MQTTPacket_names
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x14
                          DCD      ||.conststring||+0x1c
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x2c
                          DCD      ||.conststring||+0x34
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x50
                          DCD      ||.conststring||+0x58
                          DCD      ||.conststring||+0x64
                          DCD      ||.conststring||+0x70
                          DCD      ||.conststring||+0x78
                          DCD      ||.conststring||+0x84
