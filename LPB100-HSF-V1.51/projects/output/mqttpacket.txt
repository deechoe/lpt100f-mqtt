; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\mqttpacket.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\mqttpacket.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931,494 -I..\sdk\1.51\include -I..\..\usr -I..\..\mqtt -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -D__KEIL_MDK__ -D__LPT100F__ --enum_is_int --signed_chars --omf_browse=.\output\mqttpacket.crf ..\..\mqtt\MQTTPacket.c]
                          THUMB

                          AREA ||i.MQTTPacket_decode||, CODE, READONLY, ALIGN=1

                  MQTTPacket_decode PROC
;;;53      */
;;;54     int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
000000  b5f8              PUSH     {r3-r7,lr}
;;;55     {
;;;56     	unsigned char c;
;;;57     	int multiplier = 1;
000002  2401              MOVS     r4,#1
;;;58     	int len = 0;
000004  2500              MOVS     r5,#0
000006  460e              MOV      r6,r1                 ;55
000008  4607              MOV      r7,r0                 ;55
;;;59     #define MAX_NO_OF_REMAINING_LENGTH_BYTES 4
;;;60     
;;;61     	FUNC_ENTRY;
;;;62     	*value = 0;
00000a  600d              STR      r5,[r1,#0]
                  |L1.12|
00000c  1c6d              ADDS     r5,r5,#1
;;;63     	do
;;;64     	{
;;;65     		int rc = MQTTPACKET_READ_ERROR;
;;;66     
;;;67     		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
00000e  2d04              CMP      r5,#4
000010  dc0f              BGT      |L1.50|
;;;68     		{
;;;69     			rc = MQTTPACKET_READ_ERROR;	/* bad data */
;;;70     			goto exit;
;;;71     		}
;;;72     		rc = (*getcharfn)(&c, 1);
000012  2101              MOVS     r1,#1
000014  4668              MOV      r0,sp
000016  47b8              BLX      r7
;;;73     		if (rc != 1)
000018  2801              CMP      r0,#1
00001a  d10a              BNE      |L1.50|
;;;74     			goto exit;
;;;75     		*value += (c & 127) * multiplier;
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  6831              LDR      r1,[r6,#0]
000022  f000027f          AND      r2,r0,#0x7f
000026  fb021104          MLA      r1,r2,r4,r1
;;;76     		multiplier *= 128;
00002a  01e4              LSLS     r4,r4,#7
;;;77     	} while ((c & 128) != 0);
00002c  6031              STR      r1,[r6,#0]
00002e  0600              LSLS     r0,r0,#24
000030  d4ec              BMI      |L1.12|
                  |L1.50|
;;;78     exit:
;;;79     	FUNC_EXIT_RC(len);
;;;80     	return len;
000032  4628              MOV      r0,r5
;;;81     }
000034  bdf8              POP      {r3-r7,pc}
;;;82     
                          ENDP


                          AREA ||i.MQTTPacket_decodeBuf||, CODE, READONLY, ALIGN=2

                  MQTTPacket_decodeBuf PROC
;;;112    
;;;113    int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
000000  4a02              LDR      r2,|L2.12|
;;;114    {
;;;115    	bufptr = buf;
;;;116    	return MQTTPacket_decode(bufchar, value);
000002  6010              STR      r0,[r2,#0]  ; bufptr
000004  4802              LDR      r0,|L2.16|
000006  f7ffbffe          B.W      MQTTPacket_decode
;;;117    }
;;;118    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      ||.data||
                  |L2.16|
                          DCD      bufchar

                          AREA ||i.MQTTPacket_encode||, CODE, READONLY, ALIGN=1

                  MQTTPacket_encode PROC
;;;28      */
;;;29     int MQTTPacket_encode(unsigned char* buf, int length)
000000  b510              PUSH     {r4,lr}
;;;30     {
000002  4604              MOV      r4,r0
;;;31     	int rc = 0;
000004  2000              MOVS     r0,#0
                  |L3.6|
;;;32     
;;;33     	FUNC_ENTRY;
;;;34     	do
;;;35     	{
;;;36     		char d = length % 128;
000006  17ca              ASRS     r2,r1,#31
000008  eb016352          ADD      r3,r1,r2,LSR #25
00000c  f023027f          BIC      r2,r3,#0x7f
000010  1a89              SUBS     r1,r1,r2
000012  b24a              SXTB     r2,r1
;;;37     		length /= 128;
000014  11d9              ASRS     r1,r3,#7
;;;38     		/* if there are more digits to encode, set the top bit of this digit */
;;;39     		if (length > 0)
000016  2900              CMP      r1,#0
000018  dd02              BLE      |L3.32|
;;;40     			d |= 0x80;
00001a  f0420280          ORR      r2,r2,#0x80
00001e  b252              SXTB     r2,r2
                  |L3.32|
;;;41     		buf[rc++] = d;
000020  5422              STRB     r2,[r4,r0]
000022  f1000001          ADD      r0,r0,#1
;;;42     	} while (length > 0);
000026  dcee              BGT      |L3.6|
;;;43     	FUNC_EXIT_RC(rc);
;;;44     	return rc;
;;;45     }
000028  bd10              POP      {r4,pc}
;;;46     
                          ENDP


                          AREA ||i.MQTTPacket_equals||, CODE, READONLY, ALIGN=1

                  MQTTPacket_equals PROC
;;;259     */
;;;260    int MQTTPacket_equals(MQTTString* a, char* bptr)
000000  b570              PUSH     {r4-r6,lr}
;;;261    {
000002  4602              MOV      r2,r0
;;;262    	int alen = 0,
;;;263    		blen = 0;
;;;264    	char *aptr;
;;;265    	
;;;266    	if (a->cstring)
000004  6800              LDR      r0,[r0,#0]
000006  460d              MOV      r5,r1                 ;261
000008  b120              CBZ      r0,|L4.20|
;;;267    	{
;;;268    		aptr = a->cstring;
00000a  4606              MOV      r6,r0
;;;269    		alen = strlen(a->cstring);
00000c  f7fffffe          BL       strlen
000010  4604              MOV      r4,r0
000012  e001              B        |L4.24|
                  |L4.20|
000014  e9d24601          LDRD     r4,r6,[r2,#4]
                  |L4.24|
;;;270    	}
;;;271    	else
;;;272    	{
;;;273    		aptr = a->lenstring.data;
;;;274    		alen = a->lenstring.len;
;;;275    	}
;;;276    	blen = strlen(bptr);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       strlen
;;;277    	
;;;278    	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
00001e  4284              CMP      r4,r0
000020  d105              BNE      |L4.46|
000022  4622              MOV      r2,r4
000024  4629              MOV      r1,r5
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       strncmp
00002c  b108              CBZ      r0,|L4.50|
                  |L4.46|
00002e  2000              MOVS     r0,#0
;;;279    }
000030  bd70              POP      {r4-r6,pc}
                  |L4.50|
000032  2001              MOVS     r0,#1                 ;278
000034  bd70              POP      {r4-r6,pc}
;;;280    
                          ENDP


                          AREA ||i.MQTTPacket_len||, CODE, READONLY, ALIGN=2

                  MQTTPacket_len PROC
;;;83     
;;;84     int MQTTPacket_len(int rem_len)
000000  1c40              ADDS     r0,r0,#1
;;;85     {
;;;86     	rem_len += 1; /* header byte */
;;;87     
;;;88     	/* now remaining_length field */
;;;89     	if (rem_len < 128)
000002  2880              CMP      r0,#0x80
000004  da01              BGE      |L5.10|
000006  1c40              ADDS     r0,r0,#1              ;85
;;;90     		rem_len += 1;
;;;91     	else if (rem_len < 16384)
;;;92     		rem_len += 2;
;;;93     	else if (rem_len < 2097151)
;;;94     		rem_len += 3;
;;;95     	else
;;;96     		rem_len += 4;
;;;97     	return rem_len;
;;;98     }
000008  4770              BX       lr
                  |L5.10|
00000a  f5b04f80          CMP      r0,#0x4000            ;91
00000e  da01              BGE      |L5.20|
000010  1c80              ADDS     r0,r0,#2              ;91
000012  4770              BX       lr
                  |L5.20|
000014  4903              LDR      r1,|L5.36|
000016  4288              CMP      r0,r1                 ;93
000018  da01              BGE      |L5.30|
00001a  1cc0              ADDS     r0,r0,#3              ;93
00001c  4770              BX       lr
                  |L5.30|
00001e  1d00              ADDS     r0,r0,#4
000020  4770              BX       lr
;;;99     
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x001fffff

                          AREA ||i.MQTTPacket_read||, CODE, READONLY, ALIGN=1

                  MQTTPacket_read PROC
;;;289     */
;;;290    int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;291    {
;;;292    	int rc = -1;
;;;293    	MQTTHeader header = {0};
000004  2500              MOVS     r5,#0
000006  4688              MOV      r8,r1                 ;291
000008  4616              MOV      r6,r2                 ;291
00000a  4604              MOV      r4,r0                 ;291
00000c  f04f37ff          MOV      r7,#0xffffffff        ;292
;;;294    	int len = 0;
;;;295    	int rem_len = 0;
;;;296    
;;;297    	/* 1. read the header byte.  This has the packet type in it */
;;;298    	if ((*getfn)(buf, 1) != 1)
000010  2101              MOVS     r1,#1
000012  9500              STR      r5,[sp,#0]
000014  47b0              BLX      r6
000016  2801              CMP      r0,#1
000018  d115              BNE      |L6.70|
;;;299    		goto exit;
;;;300    
;;;301    	len = 1;
;;;302    	/* 2. read the remaining length.  This is variable in itself */
;;;303    	MQTTPacket_decode(getfn, &rem_len);
00001a  4669              MOV      r1,sp
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       MQTTPacket_decode
;;;304    	len += MQTTPacket_encode(buf + 1, rem_len); /* put the original remaining length back into the buffer */
000022  1c60              ADDS     r0,r4,#1
000024  9900              LDR      r1,[sp,#0]
000026  f7fffffe          BL       MQTTPacket_encode
;;;305    
;;;306    	/* 3. read the rest of the buffer using a callback to supply the rest of the data */
;;;307    	if((rem_len + len) > buflen)
00002a  9900              LDR      r1,[sp,#0]
00002c  1c40              ADDS     r0,r0,#1
00002e  180b              ADDS     r3,r1,r0
000030  4543              CMP      r3,r8
000032  dc08              BGT      |L6.70|
;;;308    		goto exit;
;;;309    	if ((*getfn)(buf + len, rem_len) != rem_len)
000034  4420              ADD      r0,r0,r4
000036  47b0              BLX      r6
000038  9900              LDR      r1,[sp,#0]
00003a  4288              CMP      r0,r1
00003c  d103              BNE      |L6.70|
;;;310    		goto exit;
;;;311    
;;;312    	header.byte = buf[0];
00003e  7820              LDRB     r0,[r4,#0]
000040  f3600507          BFI      r5,r0,#0,#8
;;;313    	rc = header.bits.type;
000044  092f              LSRS     r7,r5,#4
                  |L6.70|
;;;314    exit:
;;;315    	return rc;
000046  4638              MOV      r0,r7
;;;316    }
000048  e8bd83f8          POP      {r3-r9,pc}
;;;317    
                          ENDP


                          AREA ||i.MQTTPacket_readnb||, CODE, READONLY, ALIGN=1

                  MQTTPacket_readnb PROC
;;;360     */
;;;361    int MQTTPacket_readnb(unsigned char* buf, int buflen, MQTTTransport *trp)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;362    {
000004  4607              MOV      r7,r0
;;;363    	int rc = -1, frc;
000006  f04f35ff          MOV      r5,#0xffffffff
;;;364    	MQTTHeader header = {0};
;;;365    
;;;366    	switch(trp->state){
00000a  f9920014          LDRSB    r0,[r2,#0x14]
00000e  4614              MOV      r4,r2                 ;362
000010  4689              MOV      r9,r1                 ;362
000012  46a8              MOV      r8,r5                 ;363
000014  2600              MOVS     r6,#0                 ;364
000016  b120              CBZ      r0,|L7.34|
000018  2801              CMP      r0,#1
00001a  d00f              BEQ      |L7.60|
00001c  2802              CMP      r0,#2
00001e  d03d              BEQ      |L7.156|
;;;367    	default:
;;;368    		trp->state = 0;
000020  7526              STRB     r6,[r4,#0x14]
                  |L7.34|
;;;369    		/*FALLTHROUGH*/
;;;370    	case 0:
;;;371    		/* read the header byte.  This has the packet type in it */
;;;372    		if ((frc=(*trp->getfn)(trp->sck, buf, 1)) == -1)
000022  e9d43000          LDRD     r3,r0,[r4,#0]
000026  2201              MOVS     r2,#1
000028  4639              MOV      r1,r7
00002a  4798              BLX      r3
00002c  1c41              ADDS     r1,r0,#1
00002e  d052              BEQ      |L7.214|
;;;373    			goto exit;
;;;374    		if (frc == 0)
000030  2800              CMP      r0,#0
000032  d045              BEQ      |L7.192|
;;;375    			return 0;
;;;376    		trp->len = 0;
;;;377    		++trp->state;
000034  6126              STR      r6,[r4,#0x10]
000036  7d20              LDRB     r0,[r4,#0x14]
000038  1c40              ADDS     r0,r0,#1
00003a  7520              STRB     r0,[r4,#0x14]
                  |L7.60|
00003c  6920              LDR      r0,[r4,#0x10]
00003e  b910              CBNZ     r0,|L7.70|
000040  2001              MOVS     r0,#1
000042  e9c40602          STRD     r0,r6,[r4,#8]
                  |L7.70|
000046  6920              LDR      r0,[r4,#0x10]
000048  1c40              ADDS     r0,r0,#1
00004a  6120              STR      r0,[r4,#0x10]
00004c  2804              CMP      r0,#4
00004e  dc15              BGT      |L7.124|
000050  e9d43000          LDRD     r3,r0,[r4,#0]
000054  2201              MOVS     r2,#1
000056  4669              MOV      r1,sp
000058  4798              BLX      r3
00005a  1c41              ADDS     r1,r0,#1
00005c  d00e              BEQ      |L7.124|
00005e  b388              CBZ      r0,|L7.196|
000060  f89d0000          LDRB     r0,[sp,#0]
000064  e9d41202          LDRD     r1,r2,[r4,#8]
000068  f000037f          AND      r3,r0,#0x7f
00006c  fb032201          MLA      r2,r3,r1,r2
000070  01c9              LSLS     r1,r1,#7
000072  e9c41202          STRD     r1,r2,[r4,#8]
000076  0600              LSLS     r0,r0,#24
000078  d4e5              BMI      |L7.70|
00007a  6925              LDR      r5,[r4,#0x10]
                  |L7.124|
;;;378    		/*FALLTHROUGH*/
;;;379    		/* read the remaining length.  This is variable in itself */
;;;380    	case 1:
;;;381    		if((frc=MQTTPacket_decodenb(trp)) == MQTTPACKET_READ_ERROR)
00007c  1c68              ADDS     r0,r5,#1
00007e  d02a              BEQ      |L7.214|
;;;382    			goto exit;
;;;383    		if(frc == 0)
000080  b1ed              CBZ      r5,|L7.190|
;;;384    			return 0;
;;;385    		trp->len = 1 + MQTTPacket_encode(buf + 1, trp->rem_len); /* put the original remaining length back into the buffer */
000082  1c78              ADDS     r0,r7,#1
000084  68e1              LDR      r1,[r4,#0xc]
000086  f7fffffe          BL       MQTTPacket_encode
00008a  1c40              ADDS     r0,r0,#1
;;;386    		if((trp->rem_len + trp->len) > buflen)
00008c  6120              STR      r0,[r4,#0x10]
00008e  68e1              LDR      r1,[r4,#0xc]
000090  4401              ADD      r1,r1,r0
000092  4549              CMP      r1,r9
000094  dc1f              BGT      |L7.214|
;;;387    			goto exit;
;;;388    		++trp->state;
000096  7d20              LDRB     r0,[r4,#0x14]
000098  1c40              ADDS     r0,r0,#1
00009a  7520              STRB     r0,[r4,#0x14]
                  |L7.156|
00009c  e9d42003          LDRD     r2,r0,[r4,#0xc]
;;;389    		/*FALLTHROUGH*/
;;;390    	case 2:
;;;391    		/* read the rest of the buffer using a callback to supply the rest of the data */
;;;392    		if ((frc=(*trp->getfn)(trp->sck, buf + trp->len, trp->rem_len)) == -1)
0000a0  19c1              ADDS     r1,r0,r7
0000a2  e9d43000          LDRD     r3,r0,[r4,#0]
0000a6  4798              BLX      r3
0000a8  1c41              ADDS     r1,r0,#1
0000aa  d014              BEQ      |L7.214|
;;;393    			goto exit;
;;;394    		if (frc == 0)
0000ac  2800              CMP      r0,#0
0000ae  d007              BEQ      |L7.192|
;;;395    			return 0;
;;;396    		trp->rem_len -= frc;
0000b0  68e1              LDR      r1,[r4,#0xc]
0000b2  1a09              SUBS     r1,r1,r0
;;;397    		trp->len += frc;
0000b4  60e1              STR      r1,[r4,#0xc]
0000b6  6922              LDR      r2,[r4,#0x10]
0000b8  4410              ADD      r0,r0,r2
;;;398    		if(trp->rem_len)
0000ba  6120              STR      r0,[r4,#0x10]
0000bc  d005              BEQ      |L7.202|
                  |L7.190|
;;;399    			return 0;
0000be  2000              MOVS     r0,#0
                  |L7.192|
;;;400    
;;;401    		header.byte = buf[0];
;;;402    		rc = header.bits.type;
;;;403    		break;
;;;404    	}
;;;405    
;;;406    exit:
;;;407    	trp->state = 0;
;;;408    	return rc;
;;;409    }
0000c0  e8bd83f8          POP      {r3-r9,pc}
                  |L7.196|
0000c4  e7ff              B        |L7.198|
                  |L7.198|
0000c6  2500              MOVS     r5,#0
0000c8  e7d8              B        |L7.124|
                  |L7.202|
0000ca  7839              LDRB     r1,[r7,#0]            ;401
0000cc  4630              MOV      r0,r6                 ;401
0000ce  f3610007          BFI      r0,r1,#0,#8           ;401
0000d2  ea4f1810          LSR      r8,r0,#4              ;402
                  |L7.214|
0000d6  7526              STRB     r6,[r4,#0x14]         ;407
0000d8  4640              MOV      r0,r8                 ;408
0000da  e7f1              B        |L7.192|
;;;410    
                          ENDP


                          AREA ||i.MQTTstrlen||, CODE, READONLY, ALIGN=1

                  MQTTstrlen PROC
;;;241     */
;;;242    int MQTTstrlen(MQTTString mqttstring)
000000  0002              MOVS     r2,r0
;;;243    {
000002  4608              MOV      r0,r1
000004  d002              BEQ      |L8.12|
;;;244    	int rc = 0;
;;;245    
;;;246    	if (mqttstring.cstring)
;;;247    		rc = strlen(mqttstring.cstring);
000006  4610              MOV      r0,r2
000008  f7ffbffe          B.W      strlen
                  |L8.12|
;;;248    	else
;;;249    		rc = mqttstring.lenstring.len;
;;;250    	return rc;
;;;251    }
00000c  4770              BX       lr
;;;252    
                          ENDP


                          AREA ||i.bufchar||, CODE, READONLY, ALIGN=2

                  bufchar PROC
;;;102    
;;;103    int bufchar(unsigned char* c, int count)
000000  b530              PUSH     {r4,r5,lr}
;;;104    {
;;;105    	int i;
;;;106    
;;;107    	for (i = 0; i < count; ++i)
000002  2200              MOVS     r2,#0
;;;108    		*c = *bufptr++;
000004  4c05              LDR      r4,|L9.28|
000006  e005              B        |L9.20|
                  |L9.8|
000008  6823              LDR      r3,[r4,#0]  ; bufptr
00000a  1c52              ADDS     r2,r2,#1
00000c  f8135b01          LDRB     r5,[r3],#1
000010  7005              STRB     r5,[r0,#0]
000012  6023              STR      r3,[r4,#0]  ; bufptr
                  |L9.20|
000014  428a              CMP      r2,r1                 ;107
000016  dbf7              BLT      |L9.8|
;;;109    	return count;
000018  4608              MOV      r0,r1
;;;110    }
00001a  bd30              POP      {r4,r5,pc}
;;;111    
                          ENDP

                  |L9.28|
                          DCD      ||.data||

                          AREA ||i.getLenStringLen||, CODE, READONLY, ALIGN=1

                  getLenStringLen PROC
;;;186    
;;;187    int getLenStringLen(char* ptr)
000000  7841              LDRB     r1,[r0,#1]
;;;188    {
;;;189    	int len = 256*((unsigned char)(*ptr)) + (unsigned char)(*(ptr+1));
000002  7800              LDRB     r0,[r0,#0]
000004  eb012000          ADD      r0,r1,r0,LSL #8
;;;190    	return len;
;;;191    }
000008  4770              BX       lr
;;;192    
                          ENDP


                          AREA ||i.readChar||, CODE, READONLY, ALIGN=1

                  readChar PROC
;;;138     */
;;;139    char readChar(unsigned char** pptr)
000000  6801              LDR      r1,[r0,#0]
;;;140    {
;;;141    	char c = **pptr;
000002  f9112b01          LDRSB    r2,[r1],#1
;;;142    	(*pptr)++;
;;;143    	return c;
000006  6001              STR      r1,[r0,#0]
000008  4610              MOV      r0,r2
;;;144    }
00000a  4770              BX       lr
;;;145    
                          ENDP


                          AREA ||i.readInt||, CODE, READONLY, ALIGN=1

                  readInt PROC
;;;124     */
;;;125    int readInt(unsigned char** pptr)
000000  6801              LDR      r1,[r0,#0]
;;;126    {
;;;127    	unsigned char* ptr = *pptr;
;;;128    	int len = 256*(*ptr) + (*(ptr+1));
000002  784a              LDRB     r2,[r1,#1]
000004  f8113b02          LDRB     r3,[r1],#2
;;;129    	*pptr += 2;
;;;130    	return len;
000008  6001              STR      r1,[r0,#0]
00000a  eb022203          ADD      r2,r2,r3,LSL #8       ;128
00000e  4610              MOV      r0,r2
;;;131    }
000010  4770              BX       lr
;;;132    
                          ENDP


                          AREA ||i.readMQTTLenString||, CODE, READONLY, ALIGN=1

                  readMQTTLenString PROC
;;;214     */
;;;215    int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
000000  b5f0              PUSH     {r4-r7,lr}
;;;216    {
000002  4605              MOV      r5,r0
;;;217    	int rc = 0;
;;;218    
;;;219    	FUNC_ENTRY;
;;;220    	/* the first two bytes are the length of the string */
;;;221    	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
000004  6808              LDR      r0,[r1,#0]
000006  2600              MOVS     r6,#0                 ;217
000008  1a10              SUBS     r0,r2,r0
00000a  4617              MOV      r7,r2                 ;216
00000c  460c              MOV      r4,r1                 ;216
00000e  2801              CMP      r0,#1
000010  dd0c              BLE      |L13.44|
;;;222    	{
;;;223    		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       readInt
;;;224    		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
000018  6068              STR      r0,[r5,#4]
00001a  6821              LDR      r1,[r4,#0]
00001c  180a              ADDS     r2,r1,r0
00001e  42ba              CMP      r2,r7
000020  d804              BHI      |L13.44|
;;;225    		{
;;;226    			mqttstring->lenstring.data = (char*)*pptr;
;;;227    			*pptr += mqttstring->lenstring.len;
000022  60a9              STR      r1,[r5,#8]
000024  6821              LDR      r1,[r4,#0]
;;;228    			rc = 1;
000026  2601              MOVS     r6,#1
000028  4408              ADD      r0,r0,r1              ;227
00002a  6020              STR      r0,[r4,#0]
                  |L13.44|
;;;229    		}
;;;230    	}
;;;231    	mqttstring->cstring = NULL;
00002c  2000              MOVS     r0,#0
;;;232    	FUNC_EXIT_RC(rc);
;;;233    	return rc;
00002e  6028              STR      r0,[r5,#0]
000030  4630              MOV      r0,r6
;;;234    }
000032  bdf0              POP      {r4-r7,pc}
;;;235    
                          ENDP


                          AREA ||i.writeCString||, CODE, READONLY, ALIGN=1

                  writeCString PROC
;;;177     */
;;;178    void writeCString(unsigned char** pptr, const char* string)
000000  b570              PUSH     {r4-r6,lr}
;;;179    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;180    	int len = strlen(string);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       strlen
00000c  4606              MOV      r6,r0
;;;181    	writeInt(pptr, len);
00000e  4601              MOV      r1,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       writeInt
;;;182    	memcpy(*pptr, string, len);
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       __aeabi_memcpy
;;;183    	*pptr += len;
000020  6820              LDR      r0,[r4,#0]
000022  4430              ADD      r0,r0,r6
000024  6020              STR      r0,[r4,#0]
;;;184    }
000026  bd70              POP      {r4-r6,pc}
;;;185    
                          ENDP


                          AREA ||i.writeChar||, CODE, READONLY, ALIGN=1

                  writeChar PROC
;;;151     */
;;;152    void writeChar(unsigned char** pptr, char c)
000000  6802              LDR      r2,[r0,#0]
;;;153    {
;;;154    	**pptr = c;
000002  7011              STRB     r1,[r2,#0]
;;;155    	(*pptr)++;
000004  6801              LDR      r1,[r0,#0]
000006  1c49              ADDS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;156    }
00000a  4770              BX       lr
;;;157    
                          ENDP


                          AREA ||i.writeInt||, CODE, READONLY, ALIGN=1

                  writeInt PROC
;;;163     */
;;;164    void writeInt(unsigned char** pptr, int anInt)
000000  b510              PUSH     {r4,lr}
;;;165    {
;;;166    	**pptr = (unsigned char)(anInt / 256);
000002  17ca              ASRS     r2,r1,#31
000004  6804              LDR      r4,[r0,#0]
000006  eb016312          ADD      r3,r1,r2,LSR #24
00000a  0a1a              LSRS     r2,r3,#8
00000c  7022              STRB     r2,[r4,#0]
;;;167    	(*pptr)++;
00000e  6802              LDR      r2,[r0,#0]
000010  1c52              ADDS     r2,r2,#1
;;;168    	**pptr = (unsigned char)(anInt % 256);
000012  6002              STR      r2,[r0,#0]
000014  7011              STRB     r1,[r2,#0]
;;;169    	(*pptr)++;
000016  6801              LDR      r1,[r0,#0]
000018  1c49              ADDS     r1,r1,#1
00001a  6001              STR      r1,[r0,#0]
;;;170    }
00001c  bd10              POP      {r4,pc}
;;;171    
                          ENDP


                          AREA ||i.writeMQTTString||, CODE, READONLY, ALIGN=1

                  writeMQTTString PROC
;;;193    
;;;194    void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
000002  1e14              SUBS     r4,r2,#0
000004  461e              MOV      r6,r3
000006  4605              MOV      r5,r0
000008  dd0b              BLE      |L17.34|
;;;196    	if (mqttstring.lenstring.len > 0)
;;;197    	{
;;;198    		writeInt(pptr, mqttstring.lenstring.len);
00000a  4611              MOV      r1,r2
00000c  f7fffffe          BL       writeInt
;;;199    		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
000010  4622              MOV      r2,r4
000012  4631              MOV      r1,r6
000014  6828              LDR      r0,[r5,#0]
000016  f7fffffe          BL       __aeabi_memcpy
;;;200    		*pptr += mqttstring.lenstring.len;
00001a  6828              LDR      r0,[r5,#0]
00001c  4420              ADD      r0,r0,r4
00001e  6028              STR      r0,[r5,#0]
;;;201    	}
;;;202    	else if (mqttstring.cstring)
;;;203    		writeCString(pptr, mqttstring.cstring);
;;;204    	else
;;;205    		writeInt(pptr, 0);
;;;206    }
000020  bd70              POP      {r4-r6,pc}
                  |L17.34|
000022  b119              CBZ      r1,|L17.44|
000024  e8bd4070          POP      {r4-r6,lr}            ;203
000028  f7ffbffe          B.W      writeCString
                  |L17.44|
00002c  e8bd4070          POP      {r4-r6,lr}            ;205
000030  2100              MOVS     r1,#0                 ;205
000032  f7ffbffe          B.W      writeInt
;;;207    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  bufptr
                          DCD      0x00000000
