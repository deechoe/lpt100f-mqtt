<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\LPBS2W.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\LPBS2W.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Feb 19 13:39:17 2016
<BR><P>
<H3>Maximum Stack Usage =       4744 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
wpaTask &rArr; wps_supplicant_rx_eapol &rArr; eap_wsc_process &rArr; wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[110]">__down_interruptible_failed</a>
 <LI><a href="#[d1]">__down_trylock_failed</a>
 <LI><a href="#[69]">__up_wakeup</a>
 <LI><a href="#[5c]">__mv_main</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[15f]">__asm___6_init_c_2bb6fb04__Delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15f]">__asm___6_init_c_2bb6fb04__Delay</a><BR>
 <LI><a href="#[40]">nmi_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">nmi_handler</a><BR>
 <LI><a href="#[1c0]">msgq_msg_ioctl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69c]">xTaskResumeAll</a><BR>
 <LI><a href="#[164]">__asm___6_msgq_c_38077172__Delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[164]">__asm___6_msgq_c_38077172__Delay</a><BR>
 <LI><a href="#[21d]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[777]">lwip_sendto</a><BR>
 <LI><a href="#[25a]">wifi_restart</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24e]">wifi_start</a><BR>
 <LI><a href="#[59c]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59c]">netconn_drain</a><BR>
 <LI><a href="#[22a]">byteReverse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22a]">byteReverse</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[cf]">ASSIS_Receive</a> from assis_thread.o(i.ASSIS_Receive) referenced from assis_thread.o(i.start_assis_thread)
 <LI><a href="#[4a]">BuartInterrupt</a> from buart.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[4d]">CacheInit</a> from cache.o(.mach.init) referenced from cache.o(.mach1.init)
 <LI><a href="#[49]">FuartInterruptHf</a> from hfuart.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[48]">GpioInterrupt</a> from hfgpio.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[9b]">SDIO_Init</a> from sdiocard.o(i.SDIO_Init) referenced from mv_cm3_main.o(i.main)
 <LI><a href="#[4b]">Timer0Interrupt</a> from hftimer.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[4c]">Timer1Interrupt</a> from mv_cm3_main.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[65]">UDP_Receive</a> from dhcpd.o(i.UDP_Receive) referenced from dhcpd.o(i.DHCPD_start)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.SD_IOReadDirectly)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.SD_IOReadExtended)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.SD_IOWriteExtended)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from gl_os.o(i.__wait_for_completion)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.sdio_readl)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.sdio_writel)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sys_arch.o(i.sys_arch_sem_wait)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from gl_kal.o(i.tx_thread)
 <LI><a href="#[68]">__down_failed</a> from semaphore.o(.sched.stub) referenced from sys_arch.o(i.vPortEnterCritical)
 <LI><a href="#[d1]">__down_trylock_failed</a> from semaphore.o(.sched.stub) referenced from sys_arch.o(i.sys_arch_sem_wait)
 <LI><a href="#[d1]">__down_trylock_failed</a> from semaphore.o(.sched.stub) referenced from gl_os.o(i.wait_for_completion_timeout)
 <LI><a href="#[5c]">__mv_main</a> from startup.o(.text) referenced from startup.o(.text)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.SD_IOReadDirectly)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.SD_IOReadExtended)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.SD_IOWriteExtended)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from gl_os.o(i.__complete)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.sdio_readl)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sdiocard.o(i.sdio_writel)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sys_arch.o(i.sys_sem_signal)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from sys_arch.o(i.vPortExitCritical)
 <LI><a href="#[69]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from wlan_lib.o(i.wlanAdapterStart)
 <LI><a href="#[61]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[62]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[60]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[63]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5f]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5d]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[5e]">_sputc</a> from _sputc.o(.text) referenced 2 times from __2sprintf.o(.text)
 <LI><a href="#[b]">aaaFsmRunEventRxAssoc</a> from aaa_fsm.o(i.aaaFsmRunEventRxAssoc) referenced 4 times from nic_rx.o(.data)
 <LI><a href="#[75]">aaaFsmRunEventTxDone</a> from aaa_fsm.o(i.aaaFsmRunEventTxDone) referenced from assoc.o(i.assocSendReAssocRespFrame)
 <LI><a href="#[75]">aaaFsmRunEventTxDone</a> from aaa_fsm.o(i.aaaFsmRunEventTxDone) referenced from auth.o(i.authSendAuthFrame)
 <LI><a href="#[81]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.do_listen)
 <LI><a href="#[6b]">airkiss_decode</a> from airkiss.o(i.airkiss_decode) referenced from airkiss.o(i.airkiss_fix_channel)
 <LI><a href="#[6a]">airkiss_reset</a> from airkiss.o(i.airkiss_reset) referenced from airkiss.o(i.airkiss_fix_channel)
 <LI><a href="#[71]">aisDeauthXmitComplete</a> from ais_fsm.o(i.aisDeauthXmitComplete) referenced from ais_fsm.o(i.aisFsmSteps)
 <LI><a href="#[35]">aisFsmRunEventAbort</a> from ais_fsm.o(i.aisFsmRunEventAbort) referenced 6 times from hem_mbox.o(.data)
 <LI><a href="#[6c]">aisFsmRunEventBGSleepTimeOut</a> from ais_fsm.o(i.aisFsmRunEventBGSleepTimeOut) referenced from ais_fsm.o(i.aisFsmInit)
 <LI><a href="#[2f]">aisFsmRunEventChGrant</a> from ais_fsm.o(i.aisFsmRunEventChGrant) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[6d]">aisFsmRunEventIbssAloneTimeOut</a> from ais_fsm.o(i.aisFsmRunEventIbssAloneTimeOut) referenced from ais_fsm.o(i.aisFsmInit)
 <LI><a href="#[70]">aisFsmRunEventIntermittentScanTimeOut</a> from ais_fsm.o(i.aisFsmRunEventIntermittentScanTimeOut) referenced from ais_fsm.o(i.aisFsmInit)
 <LI><a href="#[38]">aisFsmRunEventJoinComplete</a> from ais_fsm.o(i.aisFsmRunEventJoinComplete) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[6f]">aisFsmRunEventJoinTimeout</a> from ais_fsm.o(i.aisFsmRunEventJoinTimeout) referenced from ais_fsm.o(i.aisFsmInit)
 <LI><a href="#[33]">aisFsmRunEventScanDone</a> from ais_fsm.o(i.aisFsmRunEventScanDone) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[6e]">aisPostponedEventOfDisconnTimeout</a> from ais_fsm.o(i.aisPostponedEventOfDisconnTimeout) referenced from ais_fsm.o(i.aisFsmInit)
 <LI><a href="#[4e]">arch_nvic_config</a> from setup.o(.mach.init) referenced from setup.o(.mach3.init)
 <LI><a href="#[73]">arp_timer</a> from lwip_timers_140.o(i.arp_timer) referenced from lwip_timers_140.o(i.arp_timer)
 <LI><a href="#[73]">arp_timer</a> from lwip_timers_140.o(i.arp_timer) referenced from lwip_timers_140.o(i.sys_timeouts_init)
 <LI><a href="#[27]">authAddIEChallengeText</a> from auth.o(i.authAddIEChallengeText) referenced 2 times from auth.o(.data)
 <LI><a href="#[f]">authCheckRxAuthFrameTransSeq</a> from auth.o(i.authCheckRxAuthFrameTransSeq) referenced 2 times from nic_rx.o(.data)
 <LI><a href="#[28]">authHandleIEChallengeText</a> from auth.o(i.authHandleIEChallengeText) referenced 2 times from auth.o(.data)
 <LI><a href="#[14]">bssGenerateExtSuppRate_IE</a> from bss.o(i.bssGenerateExtSuppRate_IE) referenced 8 times from p2p_func.o(.data)
 <LI><a href="#[43]">busfault_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[4f]">calibrate_delay</a> from init.o(.mach.init) referenced from init.o(.mach4.init)
 <LI><a href="#[2e]">cnmChMngrAbortPrivilege</a> from cnm.o(i.cnmChMngrAbortPrivilege) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[2d]">cnmChMngrRequestPrivilege</a> from cnm.o(i.cnmChMngrRequestPrivilege) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[76]">cnmStaRecHandleEventPkt</a> from cnm_mem.o(i.cnmStaRecHandleEventPkt) referenced from cnm_mem.o(i.cnmStaSendUpdateCmd)
 <LI><a href="#[77]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[78]">dhcp_timer_coarse</a> from lwip_timers_140.o(i.dhcp_timer_coarse) referenced from lwip_timers_140.o(i.dhcp_timer_coarse)
 <LI><a href="#[78]">dhcp_timer_coarse</a> from lwip_timers_140.o(i.dhcp_timer_coarse) referenced from lwip_timers_140.o(i.sys_timeouts_init)
 <LI><a href="#[79]">dhcp_timer_fine</a> from lwip_timers_140.o(i.dhcp_timer_fine) referenced from lwip_timers_140.o(i.dhcp_timer_fine)
 <LI><a href="#[79]">dhcp_timer_fine</a> from lwip_timers_140.o(i.dhcp_timer_fine) referenced from lwip_timers_140.o(i.sys_timeouts_init)
 <LI><a href="#[7a]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_init)
 <LI><a href="#[d0]">dns_server_recv</a> from dns_server.o(i.dns_server_recv) referenced from dns_server.o(i.start_dns_server)
 <LI><a href="#[7b]">dns_timer</a> from lwip_timers_140.o(i.dns_timer) referenced from lwip_timers_140.o(i.dns_timer)
 <LI><a href="#[7b]">dns_timer</a> from lwip_timers_140.o(i.dns_timer) referenced from lwip_timers_140.o(i.sys_timeouts_init)
 <LI><a href="#[9d]">do_bind</a> from api_msg.o(i.do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[9e]">do_connect</a> from api_msg.o(i.do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[7f]">do_connected</a> from api_msg.o(i.do_connected) referenced from api_msg.o(i.do_connect)
 <LI><a href="#[9f]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[a0]">do_disconnect</a> from api_msg.o(i.do_disconnect) referenced from api_lib.o(i.netconn_disconnect)
 <LI><a href="#[80]">do_dns_found</a> from api_msg.o(i.do_dns_found) referenced from api_msg.o(i.do_gethostbyname)
 <LI><a href="#[58]">do_free</a> from auxinfo.o(i.do_free) referenced from auxinfo.o(.shell1.cmd)
 <LI><a href="#[a1]">do_getaddr</a> from api_msg.o(i.do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[a2]">do_gethostbyname</a> from api_msg.o(i.do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[a3]">do_listen</a> from api_msg.o(i.do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[a4]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[a5]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[a5]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recved)
 <LI><a href="#[a6]">do_send</a> from api_msg.o(i.do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[67]">do_start_wps</a> from hfgpio.o(i.do_start_wps) referenced from hfgpio.o(i.GpioInterruptInit)
 <LI><a href="#[57]">do_top</a> from auxinfo.o(i.do_top) referenced from auxinfo.o(.shell1.cmd)
 <LI><a href="#[a7]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write)
 <LI><a href="#[51]">early_init_task</a> from tasks.o(.mach.init) referenced from tasks.o(.mach5.init)
 <LI><a href="#[7e]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[7e]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[86]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[86]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init_p2p)
 <LI><a href="#[82]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from ethernet.o(i.ethernet_configure_interface)
 <LI><a href="#[83]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from ethernet.o(i.ethernet_configure_interface)
 <LI><a href="#[85]">ethernetif_init_p2p</a> from ethernetif.o(i.ethernetif_init_p2p) referenced from ethernet.o(i.ethernet_configure_interface)
 <LI><a href="#[96]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(i.low_level_init)
 <LI><a href="#[97]">ethernetif_input_p2p</a> from ethernetif.o(i.ethernetif_input_p2p) referenced from ethernetif.o(i.low_level_init_p2p)
 <LI><a href="#[99]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[41]">hardfault_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[ff]">hf_atcmd_chbau</a> from hfat.o(i.hf_atcmd_chbau) referenced from hfat.o(.constdata)
 <LI><a href="#[100]">hf_atcmd_dbgl</a> from hfat.o(i.hf_atcmd_dbgl) referenced from hfat.o(.constdata)
 <LI><a href="#[10c]">hf_atcmd_help</a> from hfat.o(i.hf_atcmd_help) referenced from hfat.o(.constdata)
 <LI><a href="#[f5]">hf_atcmd_lann</a> from uart_cmd_lann.o(i.hf_atcmd_lann) referenced from hfat.o(.constdata)
 <LI><a href="#[10b]">hf_atcmd_md5</a> from hfat.o(i.hf_atcmd_md5) referenced from hfat.o(.constdata)
 <LI><a href="#[104]">hf_atcmd_modechange</a> from hfat.o(i.hf_atcmd_modechange) referenced from hfat.o(.constdata)
 <LI><a href="#[fc]">hf_atcmd_ntpser</a> from hfat.o(i.hf_atcmd_ntpser) referenced from hfat.o(.constdata)
 <LI><a href="#[10a]">hf_atcmd_smtlk_setup</a> from hfat.o(i.hf_atcmd_smtlk_setup) referenced from hfat.o(.constdata)
 <LI><a href="#[105]">hf_atcmd_testpin</a> from hfat.o(i.hf_atcmd_testpin) referenced from hfat.o(.constdata)
 <LI><a href="#[107]">hf_atcmd_testpins</a> from hfat.o(i.hf_atcmd_testpins) referenced from hfat.o(.constdata)
 <LI><a href="#[f7]">hf_atcmd_time</a> from hfat.o(i.hf_atcmd_time) referenced from hfat.o(.constdata)
 <LI><a href="#[f6]">hf_atcmd_uart</a> from uart_cmd_uart.o(i.hf_atcmd_uart) referenced from hfat.o(.constdata)
 <LI><a href="#[fe]">hf_atcmd_uartadjs</a> from hfat.o(i.hf_atcmd_uartadjs) referenced from hfat.o(.constdata)
 <LI><a href="#[108]">hf_atcmd_uartclk</a> from hfat.o(i.hf_atcmd_uartclk) referenced from hfat.o(.constdata)
 <LI><a href="#[fd]">hf_atcmd_udplcpt</a> from hfat.o(i.hf_atcmd_udplcpt) referenced from hfat.o(.constdata)
 <LI><a href="#[f3]">hf_atcmd_upgrade_sw</a> from updatetest.o(i.hf_atcmd_upgrade_sw) referenced from updatetest.o(.constdata)
 <LI><a href="#[103]">hf_atcmd_wadhcpd</a> from hfat.o(i.hf_atcmd_wadhcpd) referenced from hfat.o(.constdata)
 <LI><a href="#[fb]">hf_atcmd_wakey</a> from uart_cmd_wakey.o(i.hf_atcmd_wakey) referenced from hfat.o(.constdata)
 <LI><a href="#[102]">hf_atcmd_walkind</a> from hfat.o(i.hf_atcmd_walkind) referenced from hfat.o(.constdata)
 <LI><a href="#[f4]">hf_atcmd_wann</a> from uart_cmd_wann.o(i.hf_atcmd_wann) referenced from hfat.o(.constdata)
 <LI><a href="#[f9]">hf_atcmd_wap</a> from uart_cmd_misc.o(i.hf_atcmd_wap) referenced from hfat.o(.constdata)
 <LI><a href="#[109]">hf_atcmd_wifi</a> from hfat.o(i.hf_atcmd_wifi) referenced from hfat.o(.constdata)
 <LI><a href="#[101]">hf_atcmd_wpsbtnen</a> from hfat.o(i.hf_atcmd_wpsbtnen) referenced from hfat.o(.constdata)
 <LI><a href="#[fa]">hf_atcmd_wskey</a> from uart_cmd_wskey.o(i.hf_atcmd_wskey) referenced from hfat.o(.constdata)
 <LI><a href="#[f8]">hf_atcmd_wsssid</a> from uart_cmd_misc.o(i.hf_atcmd_wsssid) referenced from hfat.o(.constdata)
 <LI><a href="#[106]">hf_atcmd_wtest</a> from hfat.o(i.hf_atcmd_wtest) referenced from hfat.o(.constdata)
 <LI><a href="#[10d]">hf_wifi_test_nwtstx</a> from uart_cmd_test.o(i.hf_wifi_test_nwtstx) referenced from uart_cmd_test.o(.constdata)
 <LI><a href="#[66]">hfgpio_reload_interrupt_func</a> from hfgpio.o(i.hfgpio_reload_interrupt_func) referenced from hfgpio.o(i.GpioInterruptInit)
 <LI><a href="#[9]">hfsmtlk_default_main_loop</a> from hfsmtlk.o(i.hfsmtlk_default_main_loop) referenced 2 times from hfsmtlk.o(.data)
 <LI><a href="#[a]">hfsmtlk_default_sniffer_data_recv</a> from hfsmtlk.o(i.hfsmtlk_default_sniffer_data_recv) referenced 2 times from hfsmtlk.o(.data)
 <LI><a href="#[8d]">hfsmtlk_scan_callback</a> from hfsmtlk.o(i.hfsmtlk_scan_callback) referenced from hfsmtlk.o(i.hfsmtlk_default_main_loop)
 <LI><a href="#[8f]">igmp_timer</a> from lwip_timers_140.o(i.igmp_timer) referenced from lwip_timers_140.o(i.igmp_timer)
 <LI><a href="#[8f]">igmp_timer</a> from lwip_timers_140.o(i.igmp_timer) referenced from lwip_timers_140.o(i.sys_timeouts_init)
 <LI><a href="#[94]">ip_reass_timer</a> from lwip_timers_140.o(i.ip_reass_timer) referenced from lwip_timers_140.o(i.ip_reass_timer)
 <LI><a href="#[94]">ip_reass_timer</a> from lwip_timers_140.o(i.ip_reass_timer) referenced from lwip_timers_140.o(i.sys_timeouts_init)
 <LI><a href="#[93]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[64]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[e7]">kalTimeoutHandler</a> from gl_kal.o(i.kalTimeoutHandler) referenced from gl_init.o(i.wlanInit)
 <LI><a href="#[22]">linkToP2pCalculateP2P_IELenForAssocReq</a> from bss.o(i.linkToP2pCalculateP2P_IELenForAssocReq) referenced 2 times from assoc.o(.data)
 <LI><a href="#[25]">linkToP2pCalculateP2P_IELenForAssocRsp</a> from bss.o(i.linkToP2pCalculateP2P_IELenForAssocRsp) referenced 2 times from assoc.o(.data)
 <LI><a href="#[29]">linkToP2pCalculateP2P_IELenForBeacon</a> from bss.o(i.linkToP2pCalculateP2P_IELenForBeacon) referenced 2 times from bss.o(.data)
 <LI><a href="#[2b]">linkToP2pCalculateWSC_IELenForBeacon</a> from bss.o(i.linkToP2pCalculateWSC_IELenForBeacon) referenced 2 times from bss.o(.data)
 <LI><a href="#[23]">linkToP2pGenerateP2P_IEForAssocReq</a> from bss.o(i.linkToP2pGenerateP2P_IEForAssocReq) referenced 2 times from assoc.o(.data)
 <LI><a href="#[26]">linkToP2pGenerateP2P_IEForAssocRsp</a> from bss.o(i.linkToP2pGenerateP2P_IEForAssocRsp) referenced 2 times from assoc.o(.data)
 <LI><a href="#[2a]">linkToP2pGenerateP2P_IEForBeacon</a> from bss.o(i.linkToP2pGenerateP2P_IEForBeacon) referenced 2 times from bss.o(.data)
 <LI><a href="#[2c]">linkToP2pGenerateWSC_IEForBeacon</a> from bss.o(i.linkToP2pGenerateWSC_IEForBeacon) referenced 2 times from bss.o(.data)
 <LI><a href="#[24]">linkToRlmRspGenerateObssScanIE</a> from rlm.o(i.linkToRlmRspGenerateObssScanIE) referenced 6 times from assoc.o(.data)
 <LI><a href="#[87]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[88]">low_level_output_p2p</a> from ethernetif.o(i.low_level_output_p2p) referenced from ethernetif.o(i.ethernetif_init_p2p)
 <LI><a href="#[98]">lwip_setsockopt_internal</a> from sockets.o(i.lwip_setsockopt_internal) referenced from sockets.o(i.lwip_setsockopt)
 <LI><a href="#[5b]">main</a> from mv_cm3_main.o(i.main) referenced from startup.o(.text)
 <LI><a href="#[30]">mboxDummy</a> from hem_mbox.o(i.mboxDummy) referenced 48 times from hem_mbox.o(.data)
 <LI><a href="#[30]">mboxDummy</a> from hem_mbox.o(i.mboxDummy) referenced from gl_p2p_init.o(i.p2pUnregisterToWlan)
 <LI><a href="#[42]">memmanage_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[50]">mmm_init</a> from mmm.o(.mach.init) referenced from mmm.o(.mach5.init)
 <LI><a href="#[56]">mmm_print</a> from mmm.o(i.mmm_print) referenced from mmm.o(.shell1.cmd)
 <LI><a href="#[c4]">mp_reduce</a> from crypt_bigint.o(i.mp_reduce) referenced from crypt_bigint.o(i.s_mp_exptmod)
 <LI><a href="#[c5]">mp_reduce_2k_l</a> from crypt_bigint.o(i.mp_reduce_2k_l) referenced from crypt_bigint.o(i.s_mp_exptmod)
 <LI><a href="#[21]">mqmGenerateWmmInfoIE</a> from que_mgt.o(i.mqmGenerateWmmInfoIE) referenced 2 times from assoc.o(.data)
 <LI><a href="#[1c]">mqmGenerateWmmParamIE</a> from que_mgt.o(i.mqmGenerateWmmParamIE) referenced 10 times from p2p_func.o(.data)
 <LI><a href="#[5a]">msgq_debug</a> from msgq.o(i.msgq_debug) referenced from msgq.o(.shell1.cmd)
 <LI><a href="#[52]">msgq_init</a> from msgq.o(.mach.init) referenced from msgq.o(.mach8.init)
 <LI><a href="#[c0]">msgq_tmrchk_cbfun</a> from msgq.o(i.msgq_tmrchk_cbfun) referenced from tasks.o(i.prvIdleTask)
 <LI><a href="#[f0]">nicCmdEventEnterRfTest</a> from nic_cmd_event.o(i.nicCmdEventEnterRfTest) referenced from wlan_oid.o(i.wlanoidRftestSetTestMode)
 <LI><a href="#[ed]">nicCmdEventQueryAddress</a> from nic_cmd_event.o(i.nicCmdEventQueryAddress) referenced from wlan_oid.o(i.wlanoidQueryCurrentAddr)
 <LI><a href="#[ee]">nicCmdEventQueryLinkQuality</a> from nic_cmd_event.o(i.nicCmdEventQueryLinkQuality) referenced from wlan_oid.o(i.wlanoidQueryRssi)
 <LI><a href="#[c2]">nicCmdEventQueryRfTestATInfo</a> from nic_cmd_event.o(i.nicCmdEventQueryRfTestATInfo) referenced from wlan_oid.o(i.rftestQueryATInfo)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from nic.o(i.nicConfigPowerSaveProfile)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from p2p_func.o(i.p2pFuncMgmtFrameRegister)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_oid.o(i.rftestSetATInfo)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_oid.o(i.wlanoidSetAddKey)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_p2p.o(i.wlanoidSetAddP2PKey)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_oid.o(i.wlanoidSetCSUMOffload)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_oid.o(i.wlanoidSetInfrastructureMode)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_oid.o(i.wlanoidSetRemoveKey)
 <LI><a href="#[a9]">nicCmdEventSetCommon</a> from nic_cmd_event.o(i.nicCmdEventSetCommon) referenced from wlan_p2p.o(i.wlanoidSetRemoveP2PKey)
 <LI><a href="#[ef]">nicOidCmdEnterRFTestTimeout</a> from nic_cmd_event.o(i.nicOidCmdEnterRFTestTimeout) referenced from wlan_oid.o(i.wlanoidRftestSetTestMode)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from nic.o(i.nicConfigPowerSaveProfile)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from p2p_func.o(i.p2pFuncMgmtFrameRegister)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.rftestQueryATInfo)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.rftestSetATInfo)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.wlanoidQueryCurrentAddr)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.wlanoidQueryRssi)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.wlanoidSetAddKey)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.wlanoidSetCSUMOffload)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.wlanoidSetInfrastructureMode)
 <LI><a href="#[a8]">nicOidCmdTimeoutCommon</a> from nic_cmd_event.o(i.nicOidCmdTimeoutCommon) referenced from wlan_oid.o(i.wlanoidSetRemoveKey)
 <LI><a href="#[3b]">nicProcessAbnormalInterrupt</a> from nic.o(i.nicProcessAbnormalInterrupt) referenced 2 times from nic.o(.data)
 <LI><a href="#[3e]">nicProcessRxInterrupt</a> from nic_rx.o(i.nicProcessRxInterrupt) referenced 2 times from nic.o(.data)
 <LI><a href="#[3c]">nicProcessSoftwareInterrupt</a> from nic.o(i.nicProcessSoftwareInterrupt) referenced 2 times from nic.o(.data)
 <LI><a href="#[3d]">nicProcessTxInterrupt</a> from nic_tx.o(i.nicProcessTxInterrupt) referenced 2 times from nic.o(.data)
 <LI><a href="#[11]">nicRxProcessActionFrame</a> from nic_rx.o(i.nicRxProcessActionFrame) referenced 2 times from nic_rx.o(.data)
 <LI><a href="#[40]">nmi_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[b6]">p2pFsmRunEventBeaconAbort</a> from p2p_fsm.o(i.p2pFsmRunEventBeaconAbort) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b5]">p2pFsmRunEventBeaconUpdate</a> from p2p_fsm.o(i.p2pFsmRunEventBeaconUpdate) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[ad]">p2pFsmRunEventChGrant</a> from p2p_fsm.o(i.p2pFsmRunEventChGrant) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b8]">p2pFsmRunEventChannelAbort</a> from p2p_fsm.o(i.p2pFsmRunEventChannelAbort) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b7]">p2pFsmRunEventChannelRequest</a> from p2p_fsm.o(i.p2pFsmRunEventChannelRequest) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b3]">p2pFsmRunEventConnectionAbort</a> from p2p_fsm.o(i.p2pFsmRunEventConnectionAbort) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b2]">p2pFsmRunEventConnectionRequest</a> from p2p_fsm.o(i.p2pFsmRunEventConnectionRequest) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[ab]">p2pFsmRunEventDeauthTxDone</a> from p2p_fsm.o(i.p2pFsmRunEventDeauthTxDone) referenced from p2p_func.o(i.p2pFuncDisconnect)
 <LI><a href="#[b9]">p2pFsmRunEventDissolve</a> from p2p_fsm.o(i.p2pFsmRunEventDissolve) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[aa]">p2pFsmRunEventFsmTimeout</a> from p2p_fsm.o(i.p2pFsmRunEventFsmTimeout) referenced from p2p_fsm.o(i.p2pFsmInit)
 <LI><a href="#[af]">p2pFsmRunEventJoinComplete</a> from p2p_fsm.o(i.p2pFsmRunEventJoinComplete) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[ba]">p2pFsmRunEventMgmtFrameRegister</a> from p2p_fsm.o(i.p2pFsmRunEventMgmtFrameRegister) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b4]">p2pFsmRunEventMgmtFrameTx</a> from p2p_fsm.o(i.p2pFsmRunEventMgmtFrameTx) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[ac]">p2pFsmRunEventMgmtFrameTxDone</a> from p2p_fsm.o(i.p2pFsmRunEventMgmtFrameTxDone) referenced from p2p_func.o(i.p2pFuncTxMgmtFrame)
 <LI><a href="#[ae]">p2pFsmRunEventScanDone</a> from p2p_fsm.o(i.p2pFsmRunEventScanDone) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[b1]">p2pFsmRunEventScanRequest</a> from p2p_fsm.o(i.p2pFsmRunEventScanRequest) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[39]">p2pFsmRunEventStartAP</a> from p2p_fsm.o(i.p2pFsmRunEventStartAP) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[b0]">p2pFsmRunEventSwitchOPMode</a> from p2p_fsm.o(i.p2pFsmRunEventSwitchOPMode) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[3a]">p2pFsmRunEventUpdateMgmtFrame</a> from p2p_fsm.o(i.p2pFsmRunEventUpdateMgmtFrame) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[13]">p2pFuncAppendAttriExtListenTiming</a> from p2p_func.o(i.p2pFuncAppendAttriExtListenTiming) referenced 2 times from p2p_func.o(.data)
 <LI><a href="#[12]">p2pFuncAppendAttriStatusForAssocRsp</a> from p2p_func.o(i.p2pFuncAppendAttriStatusForAssocRsp) referenced 2 times from p2p_func.o(.data)
 <LI><a href="#[91]">p2pLaunch</a> from gl_p2p_init.o(i.p2pLaunch) referenced from gl_p2p_init.o(i.initP2P)
 <LI><a href="#[90]">p2pRemove</a> from gl_p2p_init.o(i.p2pRemove) referenced from gl_p2p_init.o(i.initP2P)
 <LI><a href="#[bd]">pbuf_free_ooseq</a> from pbuf.o(i.pbuf_free_ooseq) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[46]">pendsv_interrupt</a> from setup.o(.emb_text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[7d]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[7d]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[d8]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[f2]">prvTimerTask</a> from timerss.o(i.prvTimerTask) referenced from timerss.o(i.xTimerCreateTimerTask)
 <LI><a href="#[be]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[cc]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[bf]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[3f]">reset_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[34]">rlmObssScanDone</a> from rlm_obss.o(i.rlmObssScanDone) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[c3]">rlmObssScanTimeout</a> from rlm_obss.o(i.rlmObssScanTimeout) referenced from rlm_obss.o(i.rlmObssInit)
 <LI><a href="#[20]">rlmReqGenerateExtCapIE</a> from rlm.o(i.rlmReqGenerateExtCapIE) referenced 2 times from assoc.o(.data)
 <LI><a href="#[1d]">rlmReqGenerateHtCapIE</a> from rlm.o(i.rlmReqGenerateHtCapIE) referenced 2 times from assoc.o(.data)
 <LI><a href="#[15]">rlmRspGenerateErpIE</a> from rlm.o(i.rlmRspGenerateErpIE) referenced 8 times from p2p_func.o(.data)
 <LI><a href="#[1a]">rlmRspGenerateExtCapIE</a> from rlm.o(i.rlmRspGenerateExtCapIE) referenced 10 times from p2p_func.o(.data)
 <LI><a href="#[16]">rlmRspGenerateHtCapIE</a> from rlm.o(i.rlmRspGenerateHtCapIE) referenced 10 times from p2p_func.o(.data)
 <LI><a href="#[17]">rlmRspGenerateHtOpIE</a> from rlm.o(i.rlmRspGenerateHtOpIE) referenced 10 times from p2p_func.o(.data)
 <LI><a href="#[19]">rlmRspGenerateObssScanIE</a> from p2p_rlm.o(i.rlmRspGenerateObssScanIE) referenced 4 times from p2p_func.o(.data)
 <LI><a href="#[18]">rsnGenerateRSNIE</a> from rsn.o(i.rsnGenerateRSNIE) referenced 10 times from p2p_func.o(.data)
 <LI><a href="#[1f]">rsnGenerateWPAIE</a> from rsn.o(i.rsnGenerateWPAIE) referenced 4 times from assoc.o(.data)
 <LI><a href="#[1e]">rsnGenerateWSCIE</a> from rsn.o(i.rsnGenerateWSCIE) referenced 2 times from assoc.o(.data)
 <LI><a href="#[1b]">rsnGenerateWpaNoneIE</a> from rsn.o(i.rsnGenerateWpaNoneIE) referenced 8 times from p2p_func.o(.data)
 <LI><a href="#[cb]">rsnIndicatePmkidCand</a> from rsn.o(i.rsnIndicatePmkidCand) referenced from privacy.o(i.secInit)
 <LI><a href="#[37]">saaFsmRunEventAbort</a> from saa_fsm.o(i.saaFsmRunEventAbort) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[37]">saaFsmRunEventAbort</a> from saa_fsm.o(i.saaFsmRunEventAbort) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[c]">saaFsmRunEventRxAssoc</a> from saa_fsm.o(i.saaFsmRunEventRxAssoc) referenced 4 times from nic_rx.o(.data)
 <LI><a href="#[10]">saaFsmRunEventRxDeauth</a> from saa_fsm.o(i.saaFsmRunEventRxDeauth) referenced 2 times from nic_rx.o(.data)
 <LI><a href="#[e]">saaFsmRunEventRxDisassoc</a> from saa_fsm.o(i.saaFsmRunEventRxDisassoc) referenced 2 times from nic_rx.o(.data)
 <LI><a href="#[c6]">saaFsmRunEventRxRespTimeOut</a> from saa_fsm.o(i.saaFsmRunEventRxRespTimeOut) referenced from saa_fsm.o(i.saaFsmRunEventTxDone)
 <LI><a href="#[36]">saaFsmRunEventStart</a> from saa_fsm.o(i.saaFsmRunEventStart) referenced 2 times from hem_mbox.o(.data)
 <LI><a href="#[36]">saaFsmRunEventStart</a> from saa_fsm.o(i.saaFsmRunEventStart) referenced from gl_p2p_init.o(i.p2pRegisterToWlan)
 <LI><a href="#[74]">saaFsmRunEventTxDone</a> from saa_fsm.o(i.saaFsmRunEventTxDone) referenced from assoc.o(i.assocSendReAssocReqFrame)
 <LI><a href="#[74]">saaFsmRunEventTxDone</a> from saa_fsm.o(i.saaFsmRunEventTxDone) referenced from auth.o(i.authSendAuthFrame)
 <LI><a href="#[c7]">saaFsmRunEventTxReqTimeOut</a> from saa_fsm.o(i.saaFsmRunEventTxReqTimeOut) referenced from saa_fsm.o(i.saaFsmSteps)
 <LI><a href="#[d]">scanProcessBeaconAndProbeResp</a> from scan.o(i.scanProcessBeaconAndProbeResp) referenced 4 times from nic_rx.o(.data)
 <LI><a href="#[32]">scnFsmMsgAbort</a> from scan_fsm.o(i.scnFsmMsgAbort) referenced 8 times from hem_mbox.o(.data)
 <LI><a href="#[31]">scnFsmMsgStart</a> from scan_fsm.o(i.scnFsmMsgStart) referenced 16 times from hem_mbox.o(.data)
 <LI><a href="#[e8]">sdio_irq_thread</a> from sdiocard.o(i.sdio_irq_thread) referenced from gl_init.o(i.wlanInit)
 <LI><a href="#[ca]">secFsmEventDeauthTxDone</a> from sec_fsm.o(i.secFsmEventDeauthTxDone) referenced from sec_fsm.o(i.secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH)
 <LI><a href="#[c8]">secFsmEventEapolTxTimeout</a> from sec_fsm.o(i.secFsmEventEapolTxTimeout) referenced from sec_fsm.o(i.secFsmInit)
 <LI><a href="#[c9]">secFsmEventEndOfCounterMeasure</a> from sec_fsm.o(i.secFsmEventEndOfCounterMeasure) referenced from sec_fsm.o(i.secFsmInit)
 <LI><a href="#[7c]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[7c]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[53]">set_wakeup_src</a> from mach.o(.mach.init) referenced from mach.o(.mach8.init)
 <LI><a href="#[ce]">smartlinkv3_decode</a> from smartlinkv3.o(i.smartlinkv3_decode) referenced from smartlinkv3.o(i.smartlinkv3_fix_channel)
 <LI><a href="#[cd]">smartlinkv3_reset</a> from smartlinkv3.o(i.smartlinkv3_reset) referenced from smartlinkv3.o(i.smartlinkv3_fix_channel)
 <LI><a href="#[84]">status_callback</a> from ethernet.o(i.status_callback) referenced from ethernet.o(i.ethernet_configure_interface)
 <LI><a href="#[45]">svcall_interrupt</a> from setup.o(.emb_text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[55]">system_dsleep</a> from setup.o(i.system_dsleep) referenced from setup.o(.shell1.cmd)
 <LI><a href="#[54]">system_reboot</a> from setup.o(i.system_reboot) referenced from setup.o(.shell1.cmd)
 <LI><a href="#[47]">systick_interrupt</a> from setup.o(i.systick_interrupt) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[59]">task_param_set</a> from tasks.o(i.task_param_set) referenced from tasks.o(.shell1.cmd)
 <LI><a href="#[d3]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[d2]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[c1]">tcpip_init_done</a> from ethernet.o(i.tcpip_init_done) referenced from ethernet.o(i.prvlwIPInit)
 <LI><a href="#[d4]">tcpip_tcp_timer</a> from lwip_timers_140.o(i.tcpip_tcp_timer) referenced from lwip_timers_140.o(i.tcp_timer_needed)
 <LI><a href="#[d4]">tcpip_tcp_timer</a> from lwip_timers_140.o(i.tcpip_tcp_timer) referenced from lwip_timers_140.o(i.tcpip_tcp_timer)
 <LI><a href="#[d5]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[9a]">tx_thread</a> from gl_kal.o(i.tx_thread) referenced from mv_cm3_main.o(i.main)
 <LI><a href="#[8]">uart_at_cmds_reply</a> from uart_cmd.o(i.uart_at_cmds_reply) referenced 2 times from uart_cmd.o(.data)
 <LI><a href="#[72]">uart_recv_callback</a> from updatetest.o(i.uart_recv_callback) referenced from updatetest.o(i.app_main)
 <LI><a href="#[8c]">uart_thread</a> from uart_thread.o(i.uart_thread) referenced from hfnet.o(i.hfnet_start_uart)
 <LI><a href="#[d6]">update_timer_callback</a> from updatetest.o(i.update_timer_callback) referenced from updatetest.o(i.test_update_as_http)
 <LI><a href="#[44]">usagefault_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[9c]">user_main</a> from mv_cm3_main.o(i.user_main) referenced from mv_cm3_main.o(i.main)
 <LI><a href="#[d7]">vStartEthernetTask</a> from ethernet.o(i.vStartEthernetTask) referenced from ethernet.o(i.vStartEthernetTaskLauncher)
 <LI><a href="#[8e]">vhttpdServer</a> from httpd.o(i.vhttpdServer) referenced from httpd.o(i.httpd_start)
 <LI><a href="#[e5]">wlanHardStartXmit</a> from gl_init.o(i.wlanHardStartXmit) referenced from ethernetif.o(i.wifi_config_set_wpa)
 <LI><a href="#[e6]">wlanReleasePendingOid</a> from wlan_lib.o(i.wlanReleasePendingOid) referenced from wlan_lib.o(i.wlanAdapterStart)
 <LI><a href="#[eb]">wlanSecurityFrameTxDone</a> from wlan_lib.o(i.wlanSecurityFrameTxDone) referenced from wlan_lib.o(i.wlanProcessSecurityFrame)
 <LI><a href="#[ec]">wlanSecurityFrameTxTimeout</a> from wlan_lib.o(i.wlanSecurityFrameTxTimeout) referenced from wlan_lib.o(i.wlanProcessSecurityFrame)
 <LI><a href="#[95]">wlanoidQueryBssid</a> from wlan_oid.o(i.wlanoidQueryBssid) referenced from gl_kal.o(i.kalIndicateStatusAndComplete)
 <LI><a href="#[95]">wlanoidQueryBssid</a> from wlan_oid.o(i.wlanoidQueryBssid) referenced from wlan_oid.o(i.wext_query_bssid)
 <LI><a href="#[e9]">wlanoidQueryCurrentAddr</a> from wlan_oid.o(i.wlanoidQueryCurrentAddr) referenced from gl_init.o(i.wlanInit)
 <LI><a href="#[d9]">wlanoidQueryInfrastructureMode</a> from wlan_oid.o(i.wlanoidQueryInfrastructureMode) referenced from wlan_oid.o(i.wext_get_mode)
 <LI><a href="#[da]">wlanoidQueryRssi</a> from wlan_oid.o(i.wlanoidQueryRssi) referenced from wlan_oid.o(i.wext_query_rssi)
 <LI><a href="#[8a]">wlanoidRftestQueryAutoTest</a> from wlan_oid.o(i.wlanoidRftestQueryAutoTest) referenced from wlan_oid.o(i.hf_priv_do_ctrl_get)
 <LI><a href="#[89]">wlanoidRftestSetAutoTest</a> from wlan_oid.o(i.wlanoidRftestSetAutoTest) referenced from wlan_oid.o(i.hf_priv_do_ctrl)
 <LI><a href="#[8b]">wlanoidRftestSetTestMode</a> from wlan_oid.o(i.wlanoidRftestSetTestMode) referenced from wlan_oid.o(i.hf_wifi_switch_test_mode)
 <LI><a href="#[e0]">wlanoidSetAddKey</a> from wlan_oid.o(i.wlanoidSetAddKey) referenced from wlan_oid.o(i.wext_set_encode_ext)
 <LI><a href="#[bb]">wlanoidSetAddP2PKey</a> from wlan_p2p.o(i.wlanoidSetAddP2PKey) referenced from gl_p2p_cfg80211.o(i.p2p_cfg80211_add_key)
 <LI><a href="#[bb]">wlanoidSetAddP2PKey</a> from wlan_p2p.o(i.wlanoidSetAddP2PKey) referenced from gl_p2p.o(i.p2p_wext_set_key)
 <LI><a href="#[dd]">wlanoidSetAddWep</a> from wlan_oid.o(i.wlanoidSetAddWep) referenced from wlan_oid.o(i.wext_set_encode_ext)
 <LI><a href="#[de]">wlanoidSetAuthMode</a> from wlan_oid.o(i.wlanoidSetAuthMode) referenced from wlan_oid.o(i.wext_set_encode_ext)
 <LI><a href="#[de]">wlanoidSetAuthMode</a> from wlan_oid.o(i.wlanoidSetAuthMode) referenced from wlan_oid.o(i.wext_set_ssid)
 <LI><a href="#[e4]">wlanoidSetBssid</a> from wlan_oid.o(i.wlanoidSetBssid) referenced from wlan_oid.o(i.wext_set_ssid)
 <LI><a href="#[e2]">wlanoidSetBssidListScan</a> from wlan_oid.o(i.wlanoidSetBssidListScan) referenced from wlan_oid.o(i.wext_set_scan)
 <LI><a href="#[ea]">wlanoidSetCSUMOffload</a> from wlan_oid.o(i.wlanoidSetCSUMOffload) referenced from gl_init.o(i.wlanInit)
 <LI><a href="#[db]">wlanoidSetDisassociate</a> from wlan_oid.o(i.wlanoidSetDisassociate) referenced from wlan_oid.o(i.wext_set_disconnect)
 <LI><a href="#[df]">wlanoidSetEncryptionStatus</a> from wlan_oid.o(i.wlanoidSetEncryptionStatus) referenced from wlan_oid.o(i.wext_set_encode_ext)
 <LI><a href="#[df]">wlanoidSetEncryptionStatus</a> from wlan_oid.o(i.wlanoidSetEncryptionStatus) referenced from wlan_oid.o(i.wext_set_ssid)
 <LI><a href="#[e1]">wlanoidSetInfrastructureMode</a> from wlan_oid.o(i.wlanoidSetInfrastructureMode) referenced from wlan_oid.o(i.wext_set_mode)
 <LI><a href="#[dc]">wlanoidSetRemoveKey</a> from wlan_oid.o(i.wlanoidSetRemoveKey) referenced from wlan_oid.o(i.wext_set_encode_ext)
 <LI><a href="#[bc]">wlanoidSetRemoveP2PKey</a> from wlan_p2p.o(i.wlanoidSetRemoveP2PKey) referenced from gl_p2p.o(i.p2p_wext_set_key)
 <LI><a href="#[e3]">wlanoidSetSsid</a> from wlan_oid.o(i.wlanoidSetSsid) referenced from wlan_oid.o(i.wext_set_ssid)
 <LI><a href="#[f1]">wpaAuthTimerout</a> from wpa.o(i.wpaAuthTimerout) referenced from wpa.o(i.wpaAuthTimerInit)
 <LI><a href="#[92]">wpaTask</a> from wpa.o(i.wpaTask) referenced from wpa.o(i.init_wpaTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[10e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a69]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a6b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a77]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a78]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a79]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a7a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a6c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[23d]"></a>__udelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, common.o(CACHE.4KBMEM))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
</UL>

<P><STRONG><a name="[a73]"></a>GDFlashLock</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, gd_flash_ctrl.o(CACHE.4KBMEM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_gd_flash_ctrl_c_26a53abd____DISABLE_FAULT_IRQ
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_gd_flash_ctrl_c_26a53abd____ENABLE_FAULT_IRQ
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashIsBusy
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashReadStatus
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashResetCRM
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashControllerBusyStatusSet
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashHpmModeSet
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashSendCmd
</UL>

<P><STRONG><a name="[5f3]"></a>GDFlashUnlock</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GDFlashUnlock &rArr; GDSpiCodeFlashIsBusy &rArr; GDSpiCodeFlashReadStatus &rArr; GDSpiCodeFlashResetCRM &rArr; GDSpiCodeFlashSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_gd_flash_ctrl_c_26a53abd____DISABLE_FAULT_IRQ
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_gd_flash_ctrl_c_26a53abd____ENABLE_FAULT_IRQ
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashIsBusy
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashReadStatus
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashResetCRM
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashControllerBusyStatusSet
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashHpmModeSet
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock_ex
</UL>

<P><STRONG><a name="[4e]"></a>arch_nvic_config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, setup.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_nvic_config &rArr; NVIC_interrupt_prio_set &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_interrupt_prio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup.o(.mach3.init)
</UL>
<P><STRONG><a name="[50]"></a>mmm_init</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, mmm.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mmm_init &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmm.o(.mach5.init)
</UL>
<P><STRONG><a name="[4d]"></a>CacheInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cache.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CacheInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToCache
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cache.o(.mach1.init)
</UL>
<P><STRONG><a name="[4f]"></a>calibrate_delay</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, init.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = calibrate_delay &rArr; systick_config &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04__Delay
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04____ENABLE_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.mach4.init)
</UL>
<P><STRONG><a name="[51]"></a>early_init_task</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, tasks.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = early_init_task &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.mach5.init)
</UL>
<P><STRONG><a name="[52]"></a>msgq_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, msgq.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msgq_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgq.o(.mach8.init)
</UL>
<P><STRONG><a name="[53]"></a>set_wakeup_src</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mach.o(.mach.init))
<BR>[Address Reference Count : 1]<UL><LI> mach.o(.mach8.init)
</UL>
<P><STRONG><a name="[10f]"></a>__common_semaphore_stub</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, semaphore.o(.sched.stub), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __common_semaphore_stub &rArr; __down_interruptible &rArr; vTaskSuspend &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[68]"></a>__down_failed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semaphore.o(.sched.stub))
<BR>[Address Reference Count : 9]<UL><LI> sdiocard.o(i.SD_IOReadDirectly)
<LI> sdiocard.o(i.SD_IOReadExtended)
<LI> sdiocard.o(i.SD_IOWriteExtended)
<LI> sdiocard.o(i.sdio_readl)
<LI> sdiocard.o(i.sdio_writel)
<LI> gl_kal.o(i.tx_thread)
<LI> sys_arch.o(i.vPortEnterCritical)
<LI> sys_arch.o(i.sys_arch_sem_wait)
<LI> gl_os.o(i.__wait_for_completion)
</UL>
<P><STRONG><a name="[110]"></a>__down_interruptible_failed</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semaphore.o(.sched.stub), UNUSED, KEPT)

<P><STRONG><a name="[d1]"></a>__down_trylock_failed</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semaphore.o(.sched.stub))
<BR>[Address Reference Count : 2]<UL><LI> gl_os.o(i.wait_for_completion_timeout)
<LI> sys_arch.o(i.sys_arch_sem_wait)
</UL>
<P><STRONG><a name="[69]"></a>__up_wakeup</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semaphore.o(.sched.stub))
<BR>[Address Reference Count : 9]<UL><LI> sdiocard.o(i.SD_IOReadDirectly)
<LI> sdiocard.o(i.SD_IOReadExtended)
<LI> sdiocard.o(i.SD_IOWriteExtended)
<LI> sdiocard.o(i.sdio_readl)
<LI> sdiocard.o(i.sdio_writel)
<LI> sys_arch.o(i.sys_sem_signal)
<LI> sys_arch.o(i.vPortExitCritical)
<LI> gl_os.o(i.__complete)
<LI> wlan_lib.o(i.wlanAdapterStart)
</UL>
<P><STRONG><a name="[112]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[178]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[114]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[116]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[118]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[119]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[11a]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[a7b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[11c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[120]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[122]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[124]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[126]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[127]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[128]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[12a]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[a7c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[12c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[12e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[130]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[132]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[a7d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[13e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a7e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a7f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[134]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[a80]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[136]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[a81]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a82]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[138]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a83]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a84]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[139]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[a85]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[a86]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a87]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[a88]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a89]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a8a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a8b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a8c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a8d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a8e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a8f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[a90]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a91]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a92]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a93]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[a94]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a95]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a96]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[a97]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[a6a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a98]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a99]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[13d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a9a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[13f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; wifi_secu_cal_pmk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a9b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1aa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[141]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a9c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a9d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))

<P><STRONG><a name="[4c]"></a>Timer1Interrupt</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, mv_cm3_main.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Timer1Interrupt &rArr; check_reset_flag &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_add
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_softwatchdog_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reset_flag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[48]"></a>GpioInterrupt</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hfgpio.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GpioInterrupt &rArr; get_chip_pin &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntFlagGet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fenable_interrupt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fdisable_interrupt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[4b]"></a>Timer0Interrupt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hftimer.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Timer0Interrupt &rArr; hftimer_stop &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntClr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[49]"></a>FuartInterruptHf</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, hfuart.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = FuartInterruptHf &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartRecvByte
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[111]"></a>FuartInterrupt</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, fuart.o(.driver.isr), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = FuartInterrupt &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>

<P><STRONG><a name="[4a]"></a>BuartInterrupt</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, buart.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = BuartInterrupt &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[a9e]"></a>__asm___13_mv_cm3_main_c_9f3cb696____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mv_cm3_main.o(.emb_text), UNUSED)

<P><STRONG><a name="[a9f]"></a>__asm___13_mv_cm3_main_c_9f3cb696____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mv_cm3_main.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__asm___13_mv_cm3_main_c_9f3cb696____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mv_cm3_main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEnNew
</UL>

<P><STRONG><a name="[29e]"></a>__asm___13_mv_cm3_main_c_9f3cb696____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mv_cm3_main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEnNew
</UL>

<P><STRONG><a name="[15a]"></a>__asm___13_mv_cm3_main_c_9f3cb696__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mv_cm3_main.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_mv_cm3_main_c_9f3cb696__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_mv_cm3_main_c_9f3cb696__Delay
</UL>

<P><STRONG><a name="[aa0]"></a>__asm___7_setup_c_2183a587____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa1]"></a>__asm___7_setup_c_2183a587____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa2]"></a>__asm___7_setup_c_2183a587____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa3]"></a>__asm___7_setup_c_2183a587____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[15b]"></a>__asm___7_setup_c_2183a587__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_setup_c_2183a587__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_setup_c_2183a587__Delay
</UL>

<P><STRONG><a name="[45]"></a>svcall_interrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[921]"></a>start_first_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_schedule
</UL>

<P><STRONG><a name="[964]"></a>task_stackinfo</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[46]"></a>pendsv_interrupt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[1eb]"></a>__asm___6_gpio_c_0b4f8ea1____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
</UL>

<P><STRONG><a name="[1ea]"></a>__asm___6_gpio_c_0b4f8ea1____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
</UL>

<P><STRONG><a name="[aa4]"></a>__asm___6_gpio_c_0b4f8ea1____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa5]"></a>__asm___6_gpio_c_0b4f8ea1____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text), UNUSED)

<P><STRONG><a name="[15d]"></a>__asm___6_gpio_c_0b4f8ea1__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1__Delay
</UL>

<P><STRONG><a name="[29c]"></a>__asm___10_watchdog_c_c841ebb3____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgSetMode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgSetHaltMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
</UL>

<P><STRONG><a name="[29b]"></a>__asm___10_watchdog_c_c841ebb3____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgSetMode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgSetHaltMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
</UL>

<P><STRONG><a name="[aa6]"></a>__asm___10_watchdog_c_c841ebb3____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa7]"></a>__asm___10_watchdog_c_c841ebb3____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text), UNUSED)

<P><STRONG><a name="[15e]"></a>__asm___10_watchdog_c_c841ebb3__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watchdog.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3__Delay
</UL>

<P><STRONG><a name="[a68]"></a>__asm___6_init_c_2bb6fb04____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
</UL>

<P><STRONG><a name="[aa8]"></a>__asm___6_init_c_2bb6fb04____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa9]"></a>__asm___6_init_c_2bb6fb04____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[aaa]"></a>__asm___6_init_c_2bb6fb04____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[15f]"></a>__asm___6_init_c_2bb6fb04__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04__Delay
</UL>

<P><STRONG><a name="[aab]"></a>__asm___7_tasks_c_current____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[aac]"></a>__asm___7_tasks_c_current____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[aad]"></a>__asm___7_tasks_c_current____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[aae]"></a>__asm___7_tasks_c_current____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[160]"></a>__asm___7_tasks_c_current__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_tasks_c_current__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_tasks_c_current__Delay
</UL>

<P><STRONG><a name="[966]"></a>__asm___7_tasks_c_current__save_reg_bank</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[aaf]"></a>__asm___11_semaphore_c_04347d2c____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab0]"></a>__asm___11_semaphore_c_04347d2c____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab1]"></a>__asm___11_semaphore_c_04347d2c____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab2]"></a>__asm___11_semaphore_c_04347d2c____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[161]"></a>__asm___11_semaphore_c_04347d2c__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_semaphore_c_04347d2c__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_semaphore_c_04347d2c__Delay
</UL>

<P><STRONG><a name="[163]"></a>__down_op</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op_read
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wait_for_completion
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[925]"></a>__down_op_ret</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_completion_timeout
</UL>

<P><STRONG><a name="[274]"></a>__up_op</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[ab3]"></a>__down_op_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab4]"></a>__up_op_write</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[162]"></a>__down_op_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
</UL>

<P><STRONG><a name="[ab5]"></a>__up_op_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab6]"></a>__asm___6_msgq_c_38077172____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab7]"></a>__asm___6_msgq_c_38077172____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab8]"></a>__asm___6_msgq_c_38077172____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab9]"></a>__asm___6_msgq_c_38077172____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[164]"></a>__asm___6_msgq_c_38077172__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgq.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[aba]"></a>__asm___7_locks_c_8b534a9e____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[abb]"></a>__asm___7_locks_c_8b534a9e____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[abc]"></a>__asm___7_locks_c_8b534a9e____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[abd]"></a>__asm___7_locks_c_8b534a9e____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[165]"></a>__asm___7_locks_c_8b534a9e__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_locks_c_8b534a9e__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_locks_c_8b534a9e__Delay
</UL>

<P><STRONG><a name="[abe]"></a>_atomic_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a4]"></a>_atomic_add_return</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, locks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wait_for_completion
</UL>

<P><STRONG><a name="[a50]"></a>_atomic_sub_return</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, locks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[abf]"></a>_atomic_clear_mask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[ac0]"></a>__asm___15_gd_flash_ctrl_c_26a53abd____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_flash_ctrl.o(.emb_text), UNUSED)

<P><STRONG><a name="[ac1]"></a>__asm___15_gd_flash_ctrl_c_26a53abd____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_flash_ctrl.o(.emb_text), UNUSED)

<P><STRONG><a name="[a75]"></a>__asm___15_gd_flash_ctrl_c_26a53abd____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_flash_ctrl.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
</UL>

<P><STRONG><a name="[a74]"></a>__asm___15_gd_flash_ctrl_c_26a53abd____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_flash_ctrl.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
</UL>

<P><STRONG><a name="[166]"></a>__asm___15_gd_flash_ctrl_c_26a53abd__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd_flash_ctrl.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_gd_flash_ctrl_c_26a53abd__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_gd_flash_ctrl_c_26a53abd__Delay
</UL>

<P><STRONG><a name="[8b0]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>

<P><STRONG><a name="[167]"></a>mv_main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, startup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hf_mem_clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3f]"></a>reset_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[40]"></a>nmi_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[41]"></a>hardfault_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hardfault_handler &rArr; hf_trapfault_handler_dumpstack &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[42]"></a>memmanage_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = memmanage_handler &rArr; hf_trapfault_handler_dumpstack &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[43]"></a>busfault_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = busfault_handler &rArr; hf_trapfault_handler_dumpstack &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[44]"></a>usagefault_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = usagefault_handler &rArr; hf_trapfault_handler_dumpstack &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[64]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[16b]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>

<P><STRONG><a name="[16d]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_escape
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wsssid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_lann
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_get_rssi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartclk
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wadhcpd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_udplcpt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpins
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_smtlk_setup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_ntpser
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_modechange
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_md5
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_dbgl
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_query
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsdns
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndb_num
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_query
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_query
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac_query
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_query
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_query
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_query
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_query
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_query
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_query
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_query
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_query
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_query
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_query
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_query
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_parity_str
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_fc
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_send_num
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq_query
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_query
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_query
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_query
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_query
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk_query
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ver_query
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_query
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_query
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_query
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_query
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_query
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time_query
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_query
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_query
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_query
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_query
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_query
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_query
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_query
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lver_query
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz_query
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_query
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_query
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_query
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_query
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_print_rsn
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop_query
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_query
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check_query
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check_equa
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wskey_encry
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wskey_auth
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wann_query
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wakey_encry
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wakey_auth
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netset_protocol
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netset_cs
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_query
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_FileSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_File
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_query
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_query
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_query
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_query
</UL>

<P><STRONG><a name="[16e]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGenerateRunTimeStatsForTasksInList
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__do_top
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
</UL>

<P><STRONG><a name="[170]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[171]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16f]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[11d]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[175]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[123]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[12b]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[115]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[176]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[179]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_print
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_keep_alive_header
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_param_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_top
</UL>

<P><STRONG><a name="[17b]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[17d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httpContent_Length
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_chbau
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wadhcpd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_udplcpt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpins
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_smtlk_setup
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_modechange
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_md5
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_dbgl
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_datatrate_and_pwr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetContentLength
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpurl
</UL>

<P><STRONG><a name="[17f]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_content_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[181]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[135]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[21b]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_config
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtowords
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_decode
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetPath
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
</UL>

<P><STRONG><a name="[4f6]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
</UL>

<P><STRONG><a name="[214]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefetch_header
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_keep_alive_header
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_config
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httprecv_len
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httpContent_Length
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetPath
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetContentLength
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpurl
</UL>

<P><STRONG><a name="[1b3]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_command
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_commmad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_get_index_by_bssid
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_sniffer_data_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_is_wififw_startaddr
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_replay_counter_valid
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalUpdateMACAddress
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_looking_for
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_mac_list
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_val
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_add
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindLeaseByChaddr
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_find_seq
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionAbort
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearBssInScanningResult
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pProcessBeaconAndProbeResp
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessBcn
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_update_score
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_check_score
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_add_score
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByTAAndSsid
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssidAndSsid
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveConnFlagOfBssDescByBssid
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescsByPolicy
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescByBssid
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIsRegisteredScanSSID
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnUpdatePmkidCandidateList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSelectPmkidCandidateList
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchPmkidEntry
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGeneratePmkidIndication
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCandicate
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pSearchDesc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocRsp
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncUpdateBssInfoForJOIN
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRequestScan
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authProcessRxDeauthFrame
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocReq
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxDisassocFrame
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authProcessRxAuth1Frame
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecHandleEventPkt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessScanResult
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmParseEdcaParameters
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDetermineStaRecIndex
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>

<P><STRONG><a name="[207]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_func
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sdio_func
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_callback
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wsssid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wann
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_lann
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wpsbtnen
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_walkind
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_modechange
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wadmn
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upurl
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_upgrade_para
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_to_string
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_key
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssid
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webu_usr
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webu_pwd
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mid_mid
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aswd
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_key
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_ip
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrdup
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetPath
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileName
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpurl
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpua
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpph
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpcn
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[182]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_help
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_upgrade_para
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_datatrate_and_pwr
</UL>

<P><STRONG><a name="[184]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wann
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_ucmd_find
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wpsbtnen
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_walkind
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wadhcpd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_modechange
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webu_usr
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webu_pwd
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uartf_uartf
</UL>

<P><STRONG><a name="[1cf]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_pmk
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_ap_pmk
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_send_request
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_add_header
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_date_to_time
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_command
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_commmad
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_escape
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wsssid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpins
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_help
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrim
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssidcrc8
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssid
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_upgrade_step
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_key
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_equa
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_query
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_looking_for
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_devicecfg
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_conf
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_secumode_sta
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_key
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrdup
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFile
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileName
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change2lowercase
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIsRegisteredScanSSID
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init_local
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_serial_number
</UL>

<P><STRONG><a name="[2bc]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_get_response_hdr_value
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_date_to_time
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zap_chunk_boundary
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_from_string_short
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssid
</UL>

<P><STRONG><a name="[23a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_send_request
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_add_header
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_callback
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_FileSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_File
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nvram
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuart_recv_bytes
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_recv_data
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_rsn
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supp_alloc_eapol
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_devicecfg
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_conf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_p2p
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_key_config
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_gen_mac_addr
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_eapol_send
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_encode_ext
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_key
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_3_of_4
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_security_data
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_info
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_recv
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_wext_set_key
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_set_local_dev_info
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_save_one_seq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_set_beacon
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ht_capabilities
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_wpa
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanRequest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncInitConnectionSettings
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxCmd
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearBssInScanningResult
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateWSCIE
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateRSNIE
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicQmUpdateWmmParms
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PUpdateWSC_IE
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGenWSC_IE
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssGenerateExtSuppRate_IE
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssBuildBeaconProbeRespFrameCommonIEs
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRequestScan
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2p_IEForBeacon
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2P_IE
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncBeaconUpdate
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_uuid_r
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_registrar_nonce
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_hash2
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_hash1
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmScanRequest
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetWSCAssocInfo
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetInfrastructureMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssidListScan
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_ssid
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init_local
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authHandleIEChallengeText
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authAddIEChallengeText
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pBuildReAssocReqFrameCommonIEs
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocRespFrameCommonIEs
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocReqFrameCommonIEs
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEGenerateP2P_IEForAssocReq
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBeaconIETemplate
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReqV2
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReq
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsgV2
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsg
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreeScanResultIE
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_serial_number
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_number
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_name
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_manufacturer
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_dev_name
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_ssid
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[185]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ac2]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
</UL>

<P><STRONG><a name="[187]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[ac3]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_scan_callback
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanRequest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddP2PKey
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearBssInScanningResult
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssidAndSsid
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddScanResult
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncUpdateBssInfoForJOIN
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddWep
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicMediaStateChange
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisUpdateBssInfoForJOIN
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_JOIN
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventStartAP
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReqV2
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsgV2
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsg
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[ac4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ac5]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ac6]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_stack_frame
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfillset
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_key_config
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefetch_header
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_func
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sdio_func
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_page_open
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_init
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sockb_add
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_query
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_equa
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supp_alloc_eapol
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalProcessRxPacket
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_encode_ext
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_FileSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_File
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ht_operation
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveKey
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[18c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[18b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_request
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_date_to_time
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_session_object
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_start
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_page_open
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_reset
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_reset
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_init
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_reset
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterCreate
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_key
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_init_config
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_wext_set_key
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ntp_packet
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ht_capabilities
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxSetupRFB
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxInitialize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveP2PKey
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddP2PKey
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2PAllocInfo
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxInitialize
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAllocateBssDesc
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecAlloc
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secClearPmkid
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemInit
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReqV2
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReq
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[ac7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ac8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18e]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_escape
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[1d2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_page_open
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open_error
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_code_pars
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uplogsw
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sockb_mode
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slpen
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_security
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lptio
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_mode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGeneratePid
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web_data
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ntps
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_encry
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_auth
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wmode_mode
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webswitch
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uartf_uartf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tmode
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpdisb
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpdis
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rlden
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_saving_mode
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mslp
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fuartte_mode
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_echo
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_query
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_query
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_bandwidth
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_datatrate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_encry
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_auth
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_pro
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_cs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httptp
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_check_score
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup_local
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[190]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ctime &rArr; asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[191]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_time_get
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[194]"></a>mktime</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_date_to_time
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
</UL>

<P><STRONG><a name="[16a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[ac9]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[aca]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[172]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[173]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[174]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[113]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[16c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[5e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[12d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[12f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[197]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[125]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[19a]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[121]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[129]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[17c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[17a]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[5f]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[180]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[acb]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[acc]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[189]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[acd]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>asctime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[193]"></a>_localtime_r</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[ace]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[199]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[acf]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a7]"></a>_printf_fp_hex_real</STRONG> (Thumb, 760 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1a8]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[131]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[133]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[19b]"></a>__vfscanf</STRONG> (Thumb, 876 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[198]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[19d]"></a>_asctime_r</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, asctime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[ad0]"></a>_n$asctime_r</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a0]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a1]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ac]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1ab]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1ad]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1ae]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a2]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a3]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1af]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1b8]"></a>AddTailEntrySList</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hflist.o(i.AddTailEntrySList))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = AddTailEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
</UL>

<P><STRONG><a name="[1bb]"></a>AdjustFuartAndBuartSampleClk</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mv_cm3_main.o(i.AdjustFuartAndBuartSampleClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = AdjustFuartAndBuartSampleClk &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC48MHzTrimmedVal
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[1be]"></a>AltMsgAddSet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, msgq.o(i.AltMsgAddSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgaddset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
</UL>

<P><STRONG><a name="[1c3]"></a>AltMsgEmptySet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, msgq.o(i.AltMsgEmptySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AltMsgEmptySet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgemptyset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
</UL>

<P><STRONG><a name="[962]"></a>BCC_CheckSum</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart_cmd.o(i.BCC_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCC_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
</UL>

<P><STRONG><a name="[222]"></a>BuartExFifoInit</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, buart.o(i.BuartExFifoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BuartExFifoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
</UL>

<P><STRONG><a name="[159]"></a>BuartIOctl</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, buart.o(i.BuartIOctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = BuartIOctl &rArr; GetBuartBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInterrupt
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
</UL>

<P><STRONG><a name="[1c6]"></a>BuartInit</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, buart.o(i.BuartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = BuartInit &rArr; GetBuartBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[1c7]"></a>BuartRecv</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, buart.o(i.BuartRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgEmptySet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgAddSet
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv_f
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
</UL>

<P><STRONG><a name="[1ca]"></a>BuartSend</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, buart.o(i.BuartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>

<P><STRONG><a name="[1cb]"></a>CRC_verify</STRONG> (Thumb, 226 bytes, Stack size 88 bytes, uart_cmd_lpb.o(i.CRC_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CRC_verify &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_CRC_512
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
</UL>

<P><STRONG><a name="[1d1]"></a>CRC_web</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, uart_cmd_lpb.o(i.CRC_web))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CRC_web &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_CRC_512
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
</UL>

<P><STRONG><a name="[1d4]"></a>ClkGetCurrentSysClkFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clk.o(i.ClkGetCurrentSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartGetBaudClk
</UL>

<P><STRONG><a name="[784]"></a>ClkModuleEn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clk.o(i.ClkModuleEn))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[786]"></a>ClkModuleGateEn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.ClkModuleGateEn))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d5]"></a>ClkUseOsc32kCheckRc48m</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, clk.o(i.ClkUseOsc32kCheckRc48m))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>

<P><STRONG><a name="[1de]"></a>DHCPD_start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcpd.o(i.DHCPD_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = DHCPD_start &rArr; dhcpd_init_config &rArr; ip_create_by_config &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_init_config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>

<P><STRONG><a name="[1e3]"></a>ENTER_CRITICAL_SECTION</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setup.o(i.ENTER_CRITICAL_SECTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENTER_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[1e5]"></a>EXIT_CRITICAL_SECTION</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setup.o(i.EXIT_CRITICAL_SECTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[49b]"></a>EnableBuartAsFuart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i.EnableBuartAsFuart))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>

<P><STRONG><a name="[153]"></a>FuartIOctl</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, fuart.o(i.FuartIOctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartGetBaudClk
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterruptHf
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_open
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[1e7]"></a>FuartInit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, fuart.o(i.FuartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FuartInit &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartGetBaudClk
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[154]"></a>FuartRecvByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fuart.o(i.FuartRecvByte))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterruptHf
</UL>

<P><STRONG><a name="[6b8]"></a>FuartSend</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, fuart.o(i.FuartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_send
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>

<P><STRONG><a name="[785]"></a>GetLdoTrimValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mv_cm3_main.o(i.GetLdoTrimValue))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>GpioA0SetMode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gpio.o(i.GpioA0SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioA0SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartTxIoConfig
</UL>

<P><STRONG><a name="[5ae]"></a>GpioBuartCtsIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioBuartCtsIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[5af]"></a>GpioBuartRtsIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioBuartRtsIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[220]"></a>GpioBuartRxIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioBuartRxIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
</UL>

<P><STRONG><a name="[21f]"></a>GpioBuartTxIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioBuartTxIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
</UL>

<P><STRONG><a name="[1e9]"></a>GpioClrRegBits</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpio.o(i.GpioClrRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioClrRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1____DISABLE_IRQ
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSdIoConfig
</UL>

<P><STRONG><a name="[1ef]"></a>GpioClrRegOneBit</STRONG> (Thumb, 834 bytes, Stack size 0 bytes, gpio.o(i.GpioClrRegOneBit))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntDis
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_Low
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_DS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioPullUp
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioOutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoPull
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoInputOutput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioInput
</UL>

<P><STRONG><a name="[1fa]"></a>GpioFuartRxIoConfig</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gpio.o(i.GpioFuartRxIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[1ec]"></a>GpioFuartTxIoConfig</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gpio.o(i.GpioFuartTxIoConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GpioFuartTxIoConfig &rArr; GpioA0SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioA0SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[1f2]"></a>GpioGetReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.GpioGetReg))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntFlagGet
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_pin_is_high
</UL>

<P><STRONG><a name="[14e]"></a>GpioIntClr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, gpio.o(i.GpioIntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioIntClr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
</UL>

<P><STRONG><a name="[1ee]"></a>GpioIntDis</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, gpio.o(i.GpioIntDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioIntDis
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fdisable_interrupt
</UL>

<P><STRONG><a name="[1f0]"></a>GpioIntEn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio.o(i.GpioIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioIntEn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fenable_interrupt
</UL>

<P><STRONG><a name="[14d]"></a>GpioIntFlagGet</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gpio.o(i.GpioIntFlagGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GpioIntFlagGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
</UL>

<P><STRONG><a name="[1f6]"></a>GpioSdIoConfig</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, gpio.o(i.GpioSdIoConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GpioSdIoConfig &rArr; GpioSetRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[1f1]"></a>GpioSetReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GpioSetReg))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
</UL>

<P><STRONG><a name="[1f7]"></a>GpioSetRegBits</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpio.o(i.GpioSetRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioSetRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1____DISABLE_IRQ
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSdIoConfig
</UL>

<P><STRONG><a name="[1ed]"></a>GpioSetRegOneBit</STRONG> (Thumb, 946 bytes, Stack size 0 bytes, gpio.o(i.GpioSetRegOneBit))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_High
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_DS
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioPullDown
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioOutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoPull
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioInput
</UL>

<P><STRONG><a name="[621]"></a>GpioSpimIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioSpimIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[1f8]"></a>HFAutoUartAdjust</STRONG> (Thumb, 840 bytes, Stack size 80 bytes, uart_cmd_update.o(i.HFAutoUartAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = HFAutoUartAdjust &rArr; HFUartAdjust_recv &rArr; usart_recv &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_send
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_get_adjust
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartTxIoConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartRxIoConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFUartAdjust_recv
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
</UL>

<P><STRONG><a name="[1bd]"></a>HF_Debug</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, hf_debug.o(i.HF_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_request
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_content
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_prepare_req
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fmap_check
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_upgrade
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_reload_interrupt_func
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_pin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_start_wps
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterruptInit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_state_init
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_init
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_fs_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reset_flag
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFuartAndBuartSampleClk
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_send_request
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_get_response_hdr_value
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr_value
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanitize_resource_name
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefetch_header
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_keep_alive_header
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_session_object
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_standard
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_no_special_len
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_chunked
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version_string
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_method_string
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_content_len
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dns_server
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_custom_upgrade
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open_error
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_command
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_commmad
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_process
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_reset
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_init
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_fix_channel
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_check
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_reset
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_check
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_reset
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_check
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_sort_channel_list
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_reset
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_sniffer_data_recv
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_upgrade_step
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_failed
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_to_cmd_mode
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps_query
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_srst_query
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaAuthTimerout
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_efuse
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_get_efuse
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFile
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_process
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_pickup_opt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_save_one_seq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2PAllocInfo
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_update_score
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_check_score
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_add_score
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescsByPolicy
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_pubkey
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2d
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduInfoList
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmAddRxBaEntry
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[202]"></a>HTTP_DownloadFile</STRONG> (Thumb, 846 bytes, Stack size 72 bytes, httpc.o(i.HTTP_DownloadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_socket
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_connect
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddress
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFile
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Get_IP_PORT
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetPath
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileName
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
</UL>

<P><STRONG><a name="[212]"></a>HTTP_GetFile</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, httpc.o(i.HTTP_GetFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_File
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
</UL>

<P><STRONG><a name="[211]"></a>HTTP_GetFileSize</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, httpc.o(i.HTTP_GetFileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = HTTP_GetFileSize &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Url_Get_FileSize
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Send
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetContentLength
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
</UL>

<P><STRONG><a name="[21e]"></a>InitBuartAsFuartFunc</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mv_cm3_main.o(i.InitBuartAsFuartFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = InitBuartAsFuartFunc &rArr; FuartInit &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsSetDebugFlag
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartTxIoConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartRxIoConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartTxIoConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRxIoConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartExFifoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>InitializeSListTHead</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hflist.o(i.InitializeSListTHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = InitializeSListTHead &rArr; hfthread_mutext_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_new
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_module_init
</UL>

<P><STRONG><a name="[662]"></a>IrGpioSel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir.o(i.IrGpioSel))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
</UL>

<P><STRONG><a name="[663]"></a>IrInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir.o(i.IrInit))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
</UL>

<P><STRONG><a name="[1d9]"></a>IsTimeOut</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timeout.o(i.IsTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
</UL>

<P><STRONG><a name="[226]"></a>LWIP_RAND</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, igmp.o(i.LWIP_RAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LWIP_RAND &rArr; getSystime
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>

<P><STRONG><a name="[228]"></a>LdoCfg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ldo_config.o(i.LdoCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LdoCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>LpWriteDis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lp.o(i.LpWriteDis))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LdoCfg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioA0SetMode
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetSwMode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetHwMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
</UL>

<P><STRONG><a name="[1d6]"></a>LpWriteEn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lp.o(i.LpWriteEn))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LdoCfg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioA0SetMode
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetSwMode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetHwMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
</UL>

<P><STRONG><a name="[229]"></a>MD5Final</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, crypt.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MD5Final &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteReverse
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_md5
</UL>

<P><STRONG><a name="[539]"></a>MD5Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, crypt.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_md5
</UL>

<P><STRONG><a name="[22c]"></a>MD5Update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, crypt.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteReverse
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_md5
</UL>

<P><STRONG><a name="[1b0]"></a>Memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_cmd.o(i.Memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_rcvb_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_time_get
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_txpwr
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_equa
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd_query
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr_query
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_pickup_opt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_add_option
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
</UL>

<P><STRONG><a name="[22d]"></a>MsgAddSet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, msgq.o(i.MsgAddSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = MsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgaddset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_open
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[22e]"></a>MsgDelSet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, msgq.o(i.MsgDelSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = MsgDelSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgdelset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_open
</UL>

<P><STRONG><a name="[230]"></a>NTP_update_time</STRONG> (Thumb, 276 bytes, Stack size 120 bytes, ntpclient.o(i.NTP_update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = NTP_update_time &rArr; recv_ntp_packet &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_socket
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ntp_packet
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ntp_packet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
</UL>

<P><STRONG><a name="[237]"></a>NVIC_interrupt_prio_set</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, mach.o(i.NVIC_interrupt_prio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_interrupt_prio_set &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_nvic_config
</UL>

<P><STRONG><a name="[678]"></a>NvmRead</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, nvm.o(i.NvmRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NvmRead
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_data
</UL>

<P><STRONG><a name="[239]"></a>NvmWrite</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nvm.o(i.NvmWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
</UL>

<P><STRONG><a name="[223]"></a>OsSetDebugFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i.OsSetDebugFlag))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>

<P><STRONG><a name="[23b]"></a>PowerkeyClrMcuOffSeq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeyClrMcuOffSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeyClrMcuOffSeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[23c]"></a>PowerkeyClrRst8s</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeyClrRst8s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeyClrRst8s
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[23e]"></a>PowerkeyClrWakeCore</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeyClrWakeCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeyClrWakeCore
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[250]"></a>PowerkeyGetOnkeyReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerkey.o(i.PowerkeyGetOnkeyReg))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
</UL>

<P><STRONG><a name="[291]"></a>PowerkeyGetRst8s</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerkey.o(i.PowerkeyGetRst8s))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[290]"></a>PowerkeyGetSOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerkey.o(i.PowerkeyGetSOnOff))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
</UL>

<P><STRONG><a name="[23f]"></a>PowerkeySetBypassMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeySetBypassMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeySetBypassMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
</UL>

<P><STRONG><a name="[240]"></a>PowerkeySetHwMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeySetHwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeySetHwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[241]"></a>PowerkeySetMcuOffSeq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeySetMcuOffSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeySetMcuOffSeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
</UL>

<P><STRONG><a name="[242]"></a>PowerkeySetOnkeyCnt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, powerkey.o(i.PowerkeySetOnkeyCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerkeySetOnkeyCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[243]"></a>PowerkeySetSwMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, powerkey.o(i.PowerkeySetSwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeySetSwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[245]"></a>PwmConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, pwm.o(i.PwmConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PwmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfigure
</UL>

<P><STRONG><a name="[244]"></a>PwmConfigure</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hfgpio.o(i.PwmConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PwmConfigure &rArr; PwmEnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>

<P><STRONG><a name="[89f]"></a>PwmDisableChannel</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, pwm.o(i.PwmDisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[246]"></a>PwmEnableChannel</STRONG> (Thumb, 294 bytes, Stack size 12 bytes, pwm.o(i.PwmEnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PwmEnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfigure
</UL>

<P><STRONG><a name="[1bc]"></a>RC48MHzTrimmedVal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mv_cm3_main.o(i.RC48MHzTrimmedVal))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFuartAndBuartSampleClk
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartclk
</UL>

<P><STRONG><a name="[247]"></a>Real_time_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_cmd_time.o(i.Real_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Real_time_get &rArr; Memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_query
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
</UL>

<P><STRONG><a name="[249]"></a>RemoveEntrySList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hflist.o(i.RemoveEntrySList))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = RemoveEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_destroy
</UL>

<P><STRONG><a name="[9b]"></a>SDIO_Init</STRONG> (Thumb, 2064 bytes, Stack size 32 bytes, sdiocard.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = SDIO_Init &rArr; wifi_start &rArr; ethernet_reconfigure_interface &rArr; ethernet_configure_interface &rArr; wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_is_adjust
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetOnkeyReg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_start
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_func
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sdio_func
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_wifi_rec_flg_bit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_inc_wifi_rec_flg_bit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_wifi_rec_flg_bit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rtc_valid
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_get_walk
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_size
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mv_cm3_main.o(i.main)
</UL>
<P><STRONG><a name="[269]"></a>SD_ClaimInterrupt</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sdiocard.o(i.SD_ClaimInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_ClaimInterrupt &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[26b]"></a>SD_EnableFunc</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sdiocard.o(i.SD_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_EnableFunc &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[26e]"></a>SD_IORWHelper</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, sdiocard.o(i.SD_IORWHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_IORWHelper &rArr; SD_IOWriteExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writesb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
</UL>

<P><STRONG><a name="[26a]"></a>SD_IOReadDirectly</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sdiocard.o(i.SD_IOReadDirectly))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioGetCmdResp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndCmd
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableFunc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ClaimInterrupt
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCommonCis
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWide4
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableHighSpeed
</UL>

<P><STRONG><a name="[270]"></a>SD_IOReadExtended</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, sdiocard.o(i.SD_IOReadExtended))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_IOReadExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartReciveData
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioIsDatTransDone
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioGetCmdResp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndDatTrans
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioDisableClk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IORWHelper
</UL>

<P><STRONG><a name="[26f]"></a>SD_IOWriteExtended</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, sdiocard.o(i.SD_IOWriteExtended))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_IOWriteExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartSendData
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioIsDatTransDone
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioGetCmdResp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndDatTrans
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IORWHelper
</UL>

<P><STRONG><a name="[27c]"></a>SHA1Final</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, crypt.o(i.SHA1Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[912]"></a>SHA1Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, crypt.o(i.SHA1Init))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[27e]"></a>SHA1Transform</STRONG> (Thumb, 4320 bytes, Stack size 104 bytes, crypt.o(i.SHA1Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
</UL>

<P><STRONG><a name="[27d]"></a>SHA1Update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, crypt.o(i.SHA1Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
</UL>

<P><STRONG><a name="[27f]"></a>SdControllerInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_card.o(i.SdControllerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SdControllerInit &rArr; SdioControllerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioControllerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[280]"></a>SdioControllerInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, sdio.o(i.SdioControllerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SdioControllerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSetClk
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndCmd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioDisableClk
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioModeEn
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdControllerInit
</UL>

<P><STRONG><a name="[278]"></a>SdioDisableClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio.o(i.SdioDisableClk))
<BR><BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioControllerInit
</UL>

<P><STRONG><a name="[283]"></a>SdioEnableClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio.o(i.SdioEnableClk))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartSendData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartReciveData
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
</UL>

<P><STRONG><a name="[273]"></a>SdioEndCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdio.o(i.SdioEndCmd))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioControllerInit
</UL>

<P><STRONG><a name="[277]"></a>SdioEndDatTrans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdio.o(i.SdioEndDatTrans))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
</UL>

<P><STRONG><a name="[272]"></a>SdioGetCmdResp</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, sdio.o(i.SdioGetCmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SdioGetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[285]"></a>SdioIsCmdDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdio.o(i.SdioIsCmdDone))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
</UL>

<P><STRONG><a name="[276]"></a>SdioIsDatTransDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdio.o(i.SdioIsDatTransDone))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
</UL>

<P><STRONG><a name="[281]"></a>SdioModeEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdio.o(i.SdioModeEn))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioControllerInit
</UL>

<P><STRONG><a name="[271]"></a>SdioSendCommand</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sdio.o(i.SdioSendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndCmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartCmd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioIsCmdDone
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEnableClk
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[282]"></a>SdioSetClk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio.o(i.SdioSetClk))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioControllerInit
</UL>

<P><STRONG><a name="[284]"></a>SdioStartCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdio.o(i.SdioStartCmd))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
</UL>

<P><STRONG><a name="[275]"></a>SdioStartReciveData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sdio.o(i.SdioStartReciveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdioStartReciveData
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEnableClk
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadExtended
</UL>

<P><STRONG><a name="[279]"></a>SdioStartSendData</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdio.o(i.SdioStartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdioStartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEnableClk
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOWriteExtended
</UL>

<P><STRONG><a name="[286]"></a>SetGpioInput</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.SetGpioInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetGpioInput
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[287]"></a>SetGpioNoInputOutput</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.SetGpioNoInputOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetGpioNoInputOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
</UL>

<P><STRONG><a name="[288]"></a>SetGpioNoPull</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.SetGpioNoPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetGpioNoPull
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[289]"></a>SetGpioOutput</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.SetGpioOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetGpioOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[28a]"></a>SetGpioPullDown</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.SetGpioPullDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetGpioPullDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
</UL>

<P><STRONG><a name="[28b]"></a>SetGpioPullUp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.SetGpioPullUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetGpioPullUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
</UL>

<P><STRONG><a name="[28c]"></a>Set_Gpio_DS</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hfgpio.o(i.Set_Gpio_DS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Gpio_DS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
</UL>

<P><STRONG><a name="[28d]"></a>Set_Gpio_High</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hfgpio.o(i.Set_Gpio_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Gpio_High
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[28e]"></a>Set_Gpio_Low</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hfgpio.o(i.Set_Gpio_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Gpio_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[28f]"></a>SysGetWakeUpFlag</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, wakeup.o(i.SysGetWakeUpFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SysGetWakeUpFlag &rArr; Timer0Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0GetTime
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetSOnOff
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetRst8s
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>SysGotoPowerDown</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wakeup.o(i.SysGotoPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysGotoPowerDown &rArr; PowerkeySetMcuOffSeq
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetOnkeyReg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetSOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[294]"></a>SysPowerKeyInit</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, wakeup.o(i.SysPowerKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SysPowerKeyInit &rArr; Timer0Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0GetTime
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetOnkeyReg
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetSwMode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetHwMode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetSOnOff
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[295]"></a>SysSetWakeUpSrcInPowerDown</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wakeup.o(i.SysSetWakeUpSrcInPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SysSetWakeUpSrcInPowerDown &rArr; Timer0Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>TimeOutSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timeout.o(i.TimeOutSet))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
</UL>

<P><STRONG><a name="[6b7]"></a>Timer0Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer0Close))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_stop
</UL>

<P><STRONG><a name="[293]"></a>Timer0GetTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.Timer0GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[6b6]"></a>Timer0HaltModeSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.Timer0HaltModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
</UL>

<P><STRONG><a name="[151]"></a>Timer0IntClr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Timer0IntClr))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Interrupt
</UL>

<P><STRONG><a name="[292]"></a>Timer0Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timer.o(i.Timer0Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Timer0Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[6a4]"></a>Timer1Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.Timer1Close))
<BR><BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[6a5]"></a>Timer1HaltModeSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.Timer1HaltModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[143]"></a>Timer1IntClr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Timer1IntClr))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[296]"></a>Timer1Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timer.o(i.Timer1Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Timer1Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[1cd]"></a>Uart_Feedwdg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart_thread.o(i.Uart_Feedwdg))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_get_rssi
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt_query
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web_data
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>

<P><STRONG><a name="[29a]"></a>WdgDis</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(i.WdgDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgDis
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____DISABLE_IRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>WdgEnNew</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mv_cm3_main.o(i.WdgEnNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgEnNew
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_mv_cm3_main_c_9f3cb696____DISABLE_FAULT_IRQ
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_mv_cm3_main_c_9f3cb696____ENABLE_FAULT_IRQ
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>WdgFeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(i.WdgFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____DISABLE_IRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[29f]"></a>WdgGetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WdgGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEnNew
</UL>

<P><STRONG><a name="[2a1]"></a>WdgSetHaltMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, watchdog.o(i.WdgSetHaltMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgSetHaltMode
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____DISABLE_IRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a2]"></a>WdgSetMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, watchdog.o(i.WdgSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____DISABLE_IRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_c841ebb3____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2a3]"></a>__complete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gl_os.o(i.__complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __complete &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidClearance
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
</UL>

<P><STRONG><a name="[2a8]"></a>__down</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, semaphore.o(i.__down), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __down &rArr; vTaskSuspend &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[2b2]"></a>__down_interruptible</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, semaphore.o(i.__down_interruptible), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __down_interruptible &rArr; vTaskSuspend &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[2b3]"></a>__down_trylock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, semaphore.o(i.__down_trylock), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __down_trylock &rArr; vTaskResume &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[168]"></a>__hf_mem_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, startup.o(i.__hf_mem_clear), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_main
</UL>

<P><STRONG><a name="[74a]"></a>__linkAdd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link.o(i.__linkAdd))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
</UL>

<P><STRONG><a name="[74b]"></a>__linkDel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link.o(i.__linkDel))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>

<P><STRONG><a name="[2b4]"></a>__up</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, semaphore.o(i.__up), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __up &rArr; vTaskResume &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[2b5]"></a>__wait_for_completion</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gl_os.o(i.__wait_for_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __wait_for_completion
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan
</UL>

<P><STRONG><a name="[2b6]"></a>_cmd_reply</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, uart_cmd.o(i._cmd_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_at_cmds_reply
</UL>

<P><STRONG><a name="[2b8]"></a>_gettimeofday</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hftime.o(i._gettimeofday))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>

<P><STRONG><a name="[96a]"></a>_hex2ascii</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ethernetif.o(i._hex2ascii))
<BR><BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wep_ascii2hex
</UL>

<P><STRONG><a name="[177]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2c6]"></a>_pars_uart_cmd</STRONG> (Thumb, 2198 bytes, Stack size 48 bytes, uart_cmd.o(i._pars_uart_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_unlock
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_z
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtmid
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstch
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ver
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplkb
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplk
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_stas
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_srst
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndbck
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndb
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sendck
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ping
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lver
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fclr
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pars_uart_cmd
</UL>

<P><STRONG><a name="[66e]"></a>_read_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locks.o(i._read_lock))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
</UL>

<P><STRONG><a name="[324]"></a>_read_lock_irq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locks.o(i._read_lock_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _read_lock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_ioctl
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_print
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
</UL>

<P><STRONG><a name="[66f]"></a>_read_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locks.o(i._read_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
</UL>

<P><STRONG><a name="[326]"></a>_read_unlock_irq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locks.o(i._read_unlock_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _read_unlock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_ioctl
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_print
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
</UL>

<P><STRONG><a name="[2ac]"></a>_spin_lock_irq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locks.o(i._spin_lock_irq), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _spin_lock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[2a9]"></a>_spin_lock_irqsave</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, locks.o(i._spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFlushPendingTxPackets
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidCmdClearance
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFramesByNetType
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFrames
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFramesByNetType
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFrames
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPendingTxMsduInfo
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPendingCmdInfo
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReceiveRFBs
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxInitialize
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFlush
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxCmd
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAdjustTcq
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAcquireResource
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxRcvAllMsg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingOid
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingCMDbyNetwork
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxResetResource
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSetup
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitialize
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReleaseResource
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxRelease
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreePendingTxMsduInfoByNetwork
</UL>

<P><STRONG><a name="[2ae]"></a>_spin_unlock_irq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locks.o(i._spin_unlock_irq), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _spin_unlock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[2ab]"></a>_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, locks.o(i._spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFlushPendingTxPackets
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidCmdClearance
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFramesByNetType
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFrames
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFramesByNetType
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFrames
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPendingTxMsduInfo
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPendingCmdInfo
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReceiveRFBs
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxInitialize
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFlush
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxCmd
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAdjustTcq
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAcquireResource
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxRcvAllMsg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingOid
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingCMDbyNetwork
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxResetResource
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSetup
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitialize
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReleaseResource
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxRelease
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreePendingTxMsduInfoByNetwork
</UL>

<P><STRONG><a name="[66b]"></a>_write_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locks.o(i._write_lock))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_unregister
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_recv
</UL>

<P><STRONG><a name="[32c]"></a>_write_lock_irq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locks.o(i._write_lock_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _write_lock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[1bf]"></a>_write_lock_irqsave</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, locks.o(i._write_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _write_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDelSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgEmptySet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgAddSet
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
</UL>

<P><STRONG><a name="[66c]"></a>_write_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locks.o(i._write_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_unregister
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_recv
</UL>

<P><STRONG><a name="[32d]"></a>_write_unlock_irq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locks.o(i._write_unlock_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _write_unlock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[1c2]"></a>_write_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, locks.o(i._write_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _write_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDelSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgEmptySet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgAddSet
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
</UL>

<P><STRONG><a name="[b]"></a>aaaFsmRunEventRxAssoc</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, aaa_fsm.o(i.aaaFsmRunEventRxAssoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = aaaFsmRunEventRxAssoc &rArr; p2pRunEventAAAComplete &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAssocReq
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocReq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAAComplete
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocRespFrame
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[336]"></a>aaaFsmRunEventRxAuth</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, aaa_fsm.o(i.aaaFsmRunEventRxAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = aaaFsmRunEventRxAuth &rArr; p2pFuncValidateAuth &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendAuthFrame
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authProcessRxAuth1Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckRxAuthFrameTransSeq
</UL>

<P><STRONG><a name="[75]"></a>aaaFsmRunEventTxDone</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, aaa_fsm.o(i.aaaFsmRunEventTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = aaaFsmRunEventTxDone &rArr; p2pRunEventAAATxFail &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAATxFail
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAASuccess
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckTxAuthFrame
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocCheckTxReAssocRespFrame
</UL>
<BR>[Address Reference Count : 2]<UL><LI> auth.o(i.authSendAuthFrame)
<LI> assoc.o(i.assocSendReAssocRespFrame)
</UL>
<P><STRONG><a name="[34c]"></a>aes_128_cbc_decrypt</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, crypt.o(i.aes_128_cbc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = aes_128_cbc_decrypt &rArr; aes_decrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>

<P><STRONG><a name="[350]"></a>aes_128_cbc_encrypt</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, crypt.o(i.aes_128_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = aes_128_cbc_encrypt &rArr; aes_encrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
</UL>

<P><STRONG><a name="[34e]"></a>aes_decrypt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crypt.o(i.aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_decrypt &rArr; rijndaelDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
</UL>

<P><STRONG><a name="[34f]"></a>aes_decrypt_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, crypt.o(i.aes_decrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = aes_decrypt_deinit &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
</UL>

<P><STRONG><a name="[34d]"></a>aes_decrypt_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, crypt.o(i.aes_decrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = aes_decrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupDec
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
</UL>

<P><STRONG><a name="[352]"></a>aes_encrypt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crypt.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_encrypt &rArr; rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[353]"></a>aes_encrypt_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, crypt.o(i.aes_encrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = aes_encrypt_deinit &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[351]"></a>aes_encrypt_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, crypt.o(i.aes_encrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = aes_encrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[358]"></a>aes_unwrap</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, crypt.o(i.aes_unwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = aes_unwrap &rArr; aes_decrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
</UL>

<P><STRONG><a name="[359]"></a>aes_wrap</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, crypt.o(i.aes_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = aes_wrap &rArr; aes_encrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>

<P><STRONG><a name="[35a]"></a>airkiss_check</STRONG> (Thumb, 546 bytes, Stack size 72 bytes, airkiss.o(i.airkiss_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = airkiss_check &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_get_item
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_match_code
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[36b]"></a>airkiss_crc8</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, airkiss.o(i.airkiss_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = airkiss_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_save_one_seq
</UL>

<P><STRONG><a name="[6b]"></a>airkiss_decode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, airkiss.o(i.airkiss_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = airkiss_decode &rArr; airkiss_push_seq_data &rArr; airkiss_finish &rArr; hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_prefix_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> airkiss.o(i.airkiss_fix_channel)
</UL>
<P><STRONG><a name="[35f]"></a>airkiss_find_seq</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, airkiss.o(i.airkiss_find_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = airkiss_find_seq &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_save_one_seq
</UL>

<P><STRONG><a name="[360]"></a>airkiss_finish</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, airkiss.o(i.airkiss_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = airkiss_finish &rArr; hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssidcrc8
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_finished_ok
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_crc8
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_get_ssid_crc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
</UL>

<P><STRONG><a name="[681]"></a>airkiss_fix_channel</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, airkiss.o(i.airkiss_fix_channel))
<BR><BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[367]"></a>airkiss_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, airkiss.o(i.airkiss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = airkiss_init &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[35d]"></a>airkiss_push_prefix_code</STRONG> (Thumb, 1276 bytes, Stack size 32 bytes, airkiss.o(i.airkiss_push_prefix_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = airkiss_push_prefix_code
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_decode
</UL>

<P><STRONG><a name="[35e]"></a>airkiss_push_seq_data</STRONG> (Thumb, 536 bytes, Stack size 112 bytes, airkiss.o(i.airkiss_push_seq_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = airkiss_push_seq_data &rArr; airkiss_finish &rArr; hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_save_one_seq
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_get_seq
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_get_password_length
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_decode
</UL>

<P><STRONG><a name="[6a]"></a>airkiss_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, airkiss.o(i.airkiss_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = airkiss_reset &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> airkiss.o(i.airkiss_fix_channel)
</UL>
<P><STRONG><a name="[368]"></a>airkiss_save_one_seq</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, airkiss.o(i.airkiss_save_one_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = airkiss_save_one_seq &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_find_seq
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_crc8
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
</UL>

<P><STRONG><a name="[36c]"></a>aisBssBeaconTimeout</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ais_fsm.o(i.aisBssBeaconTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = aisBssBeaconTimeout &rArr; aisFsmStateAbort &rArr; aisFsmDisconnect &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[71]"></a>aisDeauthXmitComplete</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ais_fsm.o(i.aisDeauthXmitComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = aisDeauthXmitComplete &rArr; aisFsmStateAbort &rArr; aisFsmDisconnect &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_fsm.o(i.aisFsmSteps)
</UL>
<P><STRONG><a name="[36e]"></a>aisFsmDisconnect</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = aisFsmDisconnect &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearBssInScanningResult
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveConnFlagOfBssDescByBssid
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescByBssid
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssAborted
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssAbort
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
</UL>

<P><STRONG><a name="[379]"></a>aisFsmFlushRequest</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmFlushRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aisFsmFlushRequest &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmGetNextRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmUninit
</UL>

<P><STRONG><a name="[37b]"></a>aisFsmGetNextRequest</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmGetNextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aisFsmGetNextRequest &rArr; linkDel
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmFlushRequest
</UL>

<P><STRONG><a name="[37d]"></a>aisFsmInit</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aisFsmInit &rArr; cnmTimerInitTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
</UL>

<P><STRONG><a name="[374]"></a>aisFsmInsertRequest</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmInsertRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aisFsmInsertRequest &rArr; cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmScanRequest
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventIntermittentScanTimeOut
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventAbort
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[373]"></a>aisFsmIsRequestPending</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ais_fsm.o(i.aisFsmIsRequestPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aisFsmIsRequestPending &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisPostponedEventOfDisconnTimeout
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventAbort
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[381]"></a>aisFsmReleaseCh</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmReleaseCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = aisFsmReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_NORMAL_TR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinTimeout
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventIbssAloneTimeOut
</UL>

<P><STRONG><a name="[35]"></a>aisFsmRunEventAbort</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ais_fsm.o(i.aisFsmRunEventAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventAbort &rArr; aisFsmStateAbort &rArr; aisFsmDisconnect &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>aisFsmRunEventBGSleepTimeOut</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmRunEventBGSleepTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventBGSleepTimeOut &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_fsm.o(i.aisFsmInit)
</UL>
<P><STRONG><a name="[2f]"></a>aisFsmRunEventChGrant</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ais_fsm.o(i.aisFsmRunEventChGrant))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventChGrant &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>aisFsmRunEventIbssAloneTimeOut</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmRunEventIbssAloneTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventIbssAloneTimeOut &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_fsm.o(i.aisFsmInit)
</UL>
<P><STRONG><a name="[70]"></a>aisFsmRunEventIntermittentScanTimeOut</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmRunEventIntermittentScanTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventIntermittentScanTimeOut &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_fsm.o(i.aisFsmInit)
</UL>
<P><STRONG><a name="[38]"></a>aisFsmRunEventJoinComplete</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, ais_fsm.o(i.aisFsmRunEventJoinComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventJoinComplete &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssid
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateRSSI
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisUpdateBssInfoForJOIN
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_RetryJOIN
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>aisFsmRunEventJoinTimeout</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmRunEventJoinTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventJoinTimeout &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_fsm.o(i.aisFsmInit)
</UL>
<P><STRONG><a name="[33]"></a>aisFsmRunEventScanDone</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ais_fsm.o(i.aisFsmRunEventScanDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = aisFsmRunEventScanDone &rArr; kalScanDone &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalScanDone
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[38e]"></a>aisFsmScanRequest</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmScanRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = aisFsmScanRequest &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssidListScan
</UL>

<P><STRONG><a name="[970]"></a>aisFsmSetScanParam</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ais_fsm.o(i.aisFsmSetScanParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aisFsmSetScanParam
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan_param
</UL>

<P><STRONG><a name="[36d]"></a>aisFsmStateAbort</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, ais_fsm.o(i.aisFsmStateAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = aisFsmStateAbort &rArr; aisFsmDisconnect &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_SCAN
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_NORMAL_TR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisBssBeaconTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventAbort
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisDeauthXmitComplete
</UL>

<P><STRONG><a name="[38b]"></a>aisFsmStateAbort_JOIN</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmStateAbort_JOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = aisFsmStateAbort_JOIN &rArr; aisFsmReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveConnFlagOfBssDescByBssid
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinTimeout
</UL>

<P><STRONG><a name="[390]"></a>aisFsmStateAbort_NORMAL_TR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmStateAbort_NORMAL_TR))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = aisFsmStateAbort_NORMAL_TR &rArr; aisFsmReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
</UL>

<P><STRONG><a name="[38f]"></a>aisFsmStateAbort_SCAN</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmStateAbort_SCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = aisFsmStateAbort_SCAN &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
</UL>

<P><STRONG><a name="[391]"></a>aisFsmStateInit_JOIN</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, ais_fsm.o(i.aisFsmStateInit_JOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = aisFsmStateInit_JOIN &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssCreateStaRecFromBssDesc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>

<P><STRONG><a name="[386]"></a>aisFsmStateInit_RetryJOIN</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ais_fsm.o(i.aisFsmStateInit_RetryJOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = aisFsmStateInit_RetryJOIN &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
</UL>

<P><STRONG><a name="[378]"></a>aisFsmSteps</STRONG> (Thumb, 1530 bytes, Stack size 80 bytes, ais_fsm.o(i.aisFsmSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicActivateNetwork
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmAisInfraChannelFixed
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_JOIN
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmGetNextRequest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmScanRequest
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventScanDone
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinTimeout
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventIntermittentScanTimeOut
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventIbssAloneTimeOut
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventChGrant
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventBGSleepTimeOut
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[398]"></a>aisFsmUninit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ais_fsm.o(i.aisFsmUninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = aisFsmUninit &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmFlushRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUninitMGMT
</UL>

<P><STRONG><a name="[377]"></a>aisIndicationOfMediaStateToHost</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, ais_fsm.o(i.aisIndicationOfMediaStateToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicChannelNum2Freq
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secClearPmkid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicMediaStateChange
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssClearClientList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisPostponedEventOfDisconnTimeout
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[39e]"></a>aisInitializeConnectionSettings</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ais_fsm.o(i.aisInitializeConnectionSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = aisInitializeConnectionSettings &rArr; secInit &rArr; secClearPmkid &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreq2ChannelNum
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
</UL>

<P><STRONG><a name="[6e]"></a>aisPostponedEventOfDisconnTimeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ais_fsm.o(i.aisPostponedEventOfDisconnTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = aisPostponedEventOfDisconnTimeout &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_fsm.o(i.aisFsmInit)
</UL>
<P><STRONG><a name="[384]"></a>aisUpdateBssInfoForJOIN</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, ais_fsm.o(i.aisUpdateBssInfoForJOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = aisUpdateBssInfoForJOIN &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssid
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocRsp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocRsp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
</UL>

<P><STRONG><a name="[8b3]"></a>all_hex_num</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart_cmd_wskey.o(i.all_hex_num))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_key
</UL>

<P><STRONG><a name="[3a7]"></a>ap_free_sta</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wpa.o(i.ap_free_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ap_free_sta &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_disassoc
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
</UL>

<P><STRONG><a name="[3a8]"></a>ap_get_sta</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa.o(i.ap_get_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ap_get_sta &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_disassoc
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[3a9]"></a>ap_sta_add</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wpa.o(i.ap_sta_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ap_sta_add &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
</UL>

<P><STRONG><a name="[9a0]"></a>ap_sta_del_all</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wpa.o(i.ap_sta_del_all))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
</UL>

<P><STRONG><a name="[3ba]"></a>apd_eid_ext_capab</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, beacon.o(i.apd_eid_ext_capab))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b9]"></a>apd_eid_ext_supp_rates</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, beacon.o(i.apd_eid_ext_supp_rates))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = apd_eid_ext_supp_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b1]"></a>apd_eid_ht_capabilities</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, beacon.o(i.apd_eid_ht_capabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apd_eid_ht_capabilities &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b2]"></a>apd_eid_ht_operation</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, beacon.o(i.apd_eid_ht_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apd_eid_ht_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b7]"></a>apd_eid_supp_rates</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, beacon.o(i.apd_eid_supp_rates))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = apd_eid_supp_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3bb]"></a>apd_eid_wmm</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, beacon.o(i.apd_eid_wmm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apd_eid_wmm
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b5]"></a>apd_ieee802_11_set_beacon</STRONG> (Thumb, 332 bytes, Stack size 824 bytes, beacon.o(i.apd_ieee802_11_set_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_set_beacon
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_set_bss_params
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_own_capab_info
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_wmm
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_supp_rates
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ht_operation
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ht_capabilities
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ext_supp_rates
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ext_capab
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_erp_info
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_wpa
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_erp_info
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_ds_params
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_country
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[3b6]"></a>apd_own_capab_info</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, beacon.o(i.apd_own_capab_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apd_own_capab_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3bd]"></a>apd_set_bss_params</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, beacon.o(i.apd_set_bss_params))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3be]"></a>apd_setup_wep_key</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crypt.o(i.apd_setup_wep_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apd_setup_wep_key &rArr; hexstr2bin &rArr; hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep
</UL>

<P><STRONG><a name="[3c0]"></a>app_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mv_cm3_main.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = app_init &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c1]"></a>app_main</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, updatetest.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = app_main &rArr; user_upgrade &rArr; hfupdate_auto_upgrade &rArr; do_custom_upgrade &rArr; custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_sdk_version
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_wifi_is_active
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_uart
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_httpd
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_assis
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fmap_check
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_upgrade
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[3d6]"></a>assocBuildCapabilityInfo</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, assoc.o(i.assocBuildCapabilityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = assocBuildCapabilityInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocComposeReAssocReqFrameHeaderAndFF
</UL>

<P><STRONG><a name="[3cf]"></a>assocBuildReAssocReqFrameCommonIEs</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, assoc.o(i.assocBuildReAssocReqFrameCommonIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = assocBuildReAssocReqFrameCommonIEs &rArr; p2pBuildReAssocReqFrameCommonIEs
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetDataRatesFromRateSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pBuildReAssocReqFrameCommonIEs
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
</UL>

<P><STRONG><a name="[3d2]"></a>assocBuildReAssocRespFrameCommonIEs</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, assoc.o(i.assocBuildReAssocRespFrameCommonIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assocBuildReAssocRespFrameCommonIEs
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocRespFrame
</UL>

<P><STRONG><a name="[3d3]"></a>assocCheckRxReAssocRspFrameStatus</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, assoc.o(i.assocCheckRxReAssocRspFrameStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = assocCheckRxReAssocRspFrameStatus &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAssoc
</UL>

<P><STRONG><a name="[3d4]"></a>assocCheckTxReAssocReqFrame</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, assoc.o(i.assocCheckTxReAssocReqFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assocCheckTxReAssocReqFrame &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
</UL>

<P><STRONG><a name="[33c]"></a>assocCheckTxReAssocRespFrame</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, assoc.o(i.assocCheckTxReAssocRespFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assocCheckTxReAssocRespFrame &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventTxDone
</UL>

<P><STRONG><a name="[3d5]"></a>assocComposeReAssocReqFrameHeaderAndFF</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, assoc.o(i.assocComposeReAssocReqFrameHeaderAndFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = assocComposeReAssocReqFrameHeaderAndFF &rArr; assocBuildCapabilityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildCapabilityInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
</UL>

<P><STRONG><a name="[3e3]"></a>assocComposeReAssocRespFrameHeaderAndFF</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, assoc.o(i.assocComposeReAssocRespFrameHeaderAndFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = assocComposeReAssocRespFrameHeaderAndFF
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocRespFrame
</UL>

<P><STRONG><a name="[32f]"></a>assocProcessRxAssocReqFrame</STRONG> (Thumb, 936 bytes, Stack size 96 bytes, assoc.o(i.assocProcessRxAssocReqFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = assocProcessRxAssocReqFrame &rArr; rsnParserCheckForRSNCCMPPSK &rArr; rsnParseRsnIE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetRateSetFromIEs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParserCheckForRSNCCMPPSK
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetCipher
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseCheckForP2PInfoElem
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocReq
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PUpdateAssocInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
</UL>

<P><STRONG><a name="[3dd]"></a>assocProcessRxDisassocFrame</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, assoc.o(i.assocProcessRxDisassocFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = assocProcessRxDisassocFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDisassoc
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
</UL>

<P><STRONG><a name="[3de]"></a>assocSendReAssocReqFrame</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, assoc.o(i.assocSendReAssocReqFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = assocSendReAssocReqFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalUpdateReAssocReqInfo
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PUpdateAssocInfo
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocComposeReAssocReqFrameHeaderAndFF
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocReqFrameCommonIEs
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>

<P><STRONG><a name="[335]"></a>assocSendReAssocRespFrame</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, assoc.o(i.assocSendReAssocRespFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = assocSendReAssocRespFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocComposeReAssocRespFrameHeaderAndFF
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocRespFrameCommonIEs
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
</UL>

<P><STRONG><a name="[27]"></a>authAddIEChallengeText</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, auth.o(i.authAddIEChallengeText))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = authAddIEChallengeText &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auth.o(.data)
</UL>
<P><STRONG><a name="[3e4]"></a>authCheckRxAuthFrameStatus</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, auth.o(i.authCheckRxAuthFrameStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = authCheckRxAuthFrameStatus &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
</UL>

<P><STRONG><a name="[f]"></a>authCheckRxAuthFrameTransSeq</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, auth.o(i.authCheckRxAuthFrameTransSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = authCheckRxAuthFrameTransSeq &rArr; aaaFsmRunEventRxAuth &rArr; p2pFuncValidateAuth &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAuth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[33a]"></a>authCheckTxAuthFrame</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, auth.o(i.authCheckTxAuthFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = authCheckTxAuthFrame &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventTxDone
</UL>

<P><STRONG><a name="[3e7]"></a>authComposeAuthFrameHeaderAndFF</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, auth.o(i.authComposeAuthFrameHeaderAndFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = authComposeAuthFrameHeaderAndFF
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendAuthFrame
</UL>

<P><STRONG><a name="[3e8]"></a>authComposeDeauthFrameHeaderAndFF</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, auth.o(i.authComposeDeauthFrameHeaderAndFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = authComposeDeauthFrameHeaderAndFF
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
</UL>

<P><STRONG><a name="[28]"></a>authHandleIEChallengeText</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, auth.o(i.authHandleIEChallengeText))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = authHandleIEChallengeText &rArr; cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auth.o(.data)
</UL>
<P><STRONG><a name="[337]"></a>authProcessRxAuth1Frame</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, auth.o(i.authProcessRxAuth1Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = authProcessRxAuth1Frame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAuth
</UL>

<P><STRONG><a name="[8dc]"></a>authProcessRxAuth2_Auth4Frame</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, auth.o(i.authProcessRxAuth2_Auth4Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = authProcessRxAuth2_Auth4Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
</UL>

<P><STRONG><a name="[3e6]"></a>authProcessRxDeauthFrame</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, auth.o(i.authProcessRxDeauthFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = authProcessRxDeauthFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDeauth
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>

<P><STRONG><a name="[339]"></a>authSendAuthFrame</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, auth.o(i.authSendAuthFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = authSendAuthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authComposeAuthFrameHeaderAndFF
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAuth
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>

<P><STRONG><a name="[397]"></a>authSendDeauthFrame</STRONG> (Thumb, 574 bytes, Stack size 96 bytes, auth.o(i.authSendDeauthFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = authSendDeauthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authComposeDeauthFrameHeaderAndFF
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCheckClassError
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH
</UL>

<P><STRONG><a name="[3e9]"></a>auth_check</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, web_login.o(i.auth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = auth_check &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_decode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>

<P><STRONG><a name="[1c8]"></a>auxtmr_count_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auxinfo.o(i.auxtmr_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[3eb]"></a>bignum_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, crypt_bigint.o(i.bignum_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bignum_deinit &rArr; mp_clear &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[3ed]"></a>bignum_exptmod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, crypt_bigint.o(i.bignum_exptmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[3ef]"></a>bignum_get_unsigned_bin</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, crypt_bigint.o(i.bignum_get_unsigned_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bignum_get_unsigned_bin &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[3f3]"></a>bignum_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, crypt_bigint.o(i.bignum_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bignum_init &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[3f5]"></a>bignum_set_unsigned_bin</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, crypt_bigint.o(i.bignum_set_unsigned_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bignum_set_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[59a]"></a>boot_config_crc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, httpd.o(i.boot_config_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = boot_config_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_wifi_fw
</UL>

<P><STRONG><a name="[3fc]"></a>bssAddStaRecToClientList</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bss.o(i.bssAddStaRecToClientList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bssAddStaRecToClientList &rArr; linkAddTail
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAAComplete
</UL>

<P><STRONG><a name="[3fd]"></a>bssBuildBeaconProbeRespFrameCommonIEs</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, bss.o(i.bssBuildBeaconProbeRespFrameCommonIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bssBuildBeaconProbeRespFrameCommonIEs
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
</UL>

<P><STRONG><a name="[39b]"></a>bssClearClientList</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bss.o(i.bssClearClientList))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
</UL>

<P><STRONG><a name="[405]"></a>bssComposeBeaconProbeRespFrameHeaderAndFF</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bss.o(i.bssComposeBeaconProbeRespFrameHeaderAndFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bssComposeBeaconProbeRespFrameHeaderAndFF
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
</UL>

<P><STRONG><a name="[392]"></a>bssCreateStaRecFromBssDesc</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, bss.o(i.bssCreateStaRecFromBssDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bssCreateStaRecFromBssDesc &rArr; mqmProcessScanResult &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecAlloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessScanResult
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_JOIN
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
</UL>

<P><STRONG><a name="[14]"></a>bssGenerateExtSuppRate_IE</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bss.o(i.bssGenerateExtSuppRate_IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bssGenerateExtSuppRate_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 3]<UL><LI> p2p_func.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[401]"></a>bssInitForAP</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, bss.o(i.bssInitForAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bssInitForAP &rArr; rateGetDataRatesFromRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetDataRatesFromRateSet
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetLowestRateIndexFromRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
</UL>

<P><STRONG><a name="[403]"></a>bssRemoveStaRecFromClientList</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bss.o(i.bssRemoveStaRecFromClientList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bssRemoveStaRecFromClientList &rArr; linkDel
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAATxFail
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAAComplete
</UL>

<P><STRONG><a name="[404]"></a>bssUpdateBeaconContent</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bss.o(i.bssUpdateBeaconContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = bssUpdateBeaconContent &rArr; nicUpdateBeaconIETemplate &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssComposeBeaconProbeRespFrameHeaderAndFF
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssBuildBeaconProbeRespFrameCommonIEs
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBeaconIETemplate
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessPublicAction
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconUpdate
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateParamsForAP
</UL>

<P><STRONG><a name="[265]"></a>check_arp_valid</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, ethernet.o(i.check_arp_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = check_arp_valid &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[40b]"></a>check_boot_conifg</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, lpb100_boot.o(i.check_boot_conifg))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = check_boot_conifg &rArr; hfupdate_complete &rArr; success_update_flag &rArr; hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_is_wififw_startaddr
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_is_transtion
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_config
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfflash_copy
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_wififw_page
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[413]"></a>check_config_valid</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, uart_cmd.o(i.check_config_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = check_config_valid &rArr; hfsys_reload &rArr; do_reload &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[415]"></a>check_custom_upgrade</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart_cmd_update.o(i.check_custom_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = check_custom_upgrade &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_upgrade_para
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upgrade_step
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_start_parameter
</UL>

<P><STRONG><a name="[418]"></a>check_nvram</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gl_init.o(i.check_nvram))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_nvram &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>check_reset_flag</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, uart_thread.o(i.check_reset_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = check_reset_flag &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[25f]"></a>check_router_isOK</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, sdiocard.o(i.check_router_isOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = check_router_isOK &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_stop
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[981]"></a>check_secu_match</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, ethernetif.o(i.check_secu_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_secu_match
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_looking_for
</UL>

<P><STRONG><a name="[723]"></a>check_wifi_is_restart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdiocard.o(i.check_wifi_is_restart))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortWrite
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
</UL>

<P><STRONG><a name="[419]"></a>check_wifi_is_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdiocard.o(i.check_wifi_is_stop))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>

<P><STRONG><a name="[98e]"></a>clear_wifi_stop_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdiocard.o(i.clear_wifi_stop_flag))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[8f8]"></a>clear_wifi_worker_thread_exit_flags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdiocard.o(i.clear_wifi_worker_thread_exit_flags))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[41c]"></a>cmdBufAllocateCmdInfo</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, cmd_buf.o(i.cmdBufAllocateCmdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmdBufAllocateCmdInfo &rArr; cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSetMcuOscStableTime
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryPermanentAddress
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryNicCapability
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferFilter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveKey
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestSetATInfo
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestQueryATInfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBeaconIETemplate
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
</UL>

<P><STRONG><a name="[41d]"></a>cmdBufFreeCmdInfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cmd_buf.o(i.cmdBufFreeCmdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cmdBufFreeCmdInfo &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidCmdClearance
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFramesByNetType
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFrames
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFramesByNetType
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFrames
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSetMcuOscStableTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingOid
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingCMDbyNetwork
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryPermanentAddress
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryNicCapability
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferFilter
</UL>

<P><STRONG><a name="[7ea]"></a>cmdBufInitialize</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, cmd_buf.o(i.cmdBufInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmdBufInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitSystemService
</UL>

<P><STRONG><a name="[6c9]"></a>cmd_c2h</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart_cmd.o(i.cmd_c2h))
<BR><BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_transform_char
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_val
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_add
</UL>

<P><STRONG><a name="[41e]"></a>cmd_code_pars</STRONG> (Thumb, 3408 bytes, Stack size 16 bytes, uart_cmd.o(i.cmd_code_pars))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_code_pars
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd
</UL>

<P><STRONG><a name="[2d6]"></a>cmd_deal_aswd</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_aswd))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_aswd &rArr; cmd_deal_aswd_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_query
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[420]"></a>cmd_deal_aswd_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_aswd_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_aswd_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aswd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd
</UL>

<P><STRONG><a name="[41f]"></a>cmd_deal_aswd_query</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_aswd_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_aswd_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd
</UL>

<P><STRONG><a name="[2ca]"></a>cmd_deal_atrm</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_atrm.o(i.cmd_deal_atrm))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = cmd_deal_atrm &rArr; cmd_deal_atrm_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_query
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[425]"></a>cmd_deal_atrm_equa</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, uart_cmd_atrm.o(i.cmd_deal_atrm_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = cmd_deal_atrm_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_pro
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_port
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_ip
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm
</UL>

<P><STRONG><a name="[424]"></a>cmd_deal_atrm_query</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, uart_cmd_atrm.o(i.cmd_deal_atrm_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_atrm_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netset_protocol
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netset_port
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netset_cs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm
</UL>

<P><STRONG><a name="[2f7]"></a>cmd_deal_cfgfr</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_cfgfr))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgfr &rArr; cmd_deal_cfgfr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[42d]"></a>cmd_deal_cfgfr_query</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, uart_cmd_misc.o(i.cmd_deal_cfgfr_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgfr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr
</UL>

<P><STRONG><a name="[2f5]"></a>cmd_deal_cfgrd</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_cfgrd))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgrd &rArr; cmd_deal_cfgrd_query &rArr; m2m_assis_writen &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[42f]"></a>cmd_deal_cfgrd_query</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_cfgrd_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgrd_query &rArr; m2m_assis_writen &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd
</UL>

<P><STRONG><a name="[2f6]"></a>cmd_deal_cfgtf</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_cfgtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgtf &rArr; cmd_deal_cfgtf_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[430]"></a>cmd_deal_cfgtf_query</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_cfgtf_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgtf_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf
</UL>

<P><STRONG><a name="[2f4]"></a>cmd_deal_cfgwr</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_cfgwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgwr &rArr; cmd_deal_cfgwr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[431]"></a>cmd_deal_cfgwr_query</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_cfgwr_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_cfgwr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr
</UL>

<P><STRONG><a name="[2f8]"></a>cmd_deal_check</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, uart_cmd_test.o(i.cmd_deal_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_check &rArr; cmd_deal_check_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check_query
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[309]"></a>cmd_deal_crst</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_crst))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_crst &rArr; cmd_deal_crst_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_query
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[435]"></a>cmd_deal_crst_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_crst_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_crst_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_crst
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst
</UL>

<P><STRONG><a name="[434]"></a>cmd_deal_crst_query</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_crst_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_crst_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst
</UL>

<P><STRONG><a name="[31d]"></a>cmd_deal_disps</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_disps))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_disps &rArr; cmd_deal_disps_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_query
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[438]"></a>cmd_deal_disps_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_disps_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_disps_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_saving_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps
</UL>

<P><STRONG><a name="[437]"></a>cmd_deal_disps_query</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_disps_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_disps_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps
</UL>

<P><STRONG><a name="[2c9]"></a>cmd_deal_echo</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_echo &rArr; cmd_deal_echo_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo_query
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[43b]"></a>cmd_deal_echo_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_echo_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_echo_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo
</UL>

<P><STRONG><a name="[43a]"></a>cmd_deal_echo_query</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_echo_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_echo_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo
</UL>

<P><STRONG><a name="[30b]"></a>cmd_deal_errn</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_errn))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_errn &rArr; cmd_deal_errn_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[43e]"></a>cmd_deal_errn_equa</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_errn_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_errn_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn
</UL>

<P><STRONG><a name="[43d]"></a>cmd_deal_errn_query</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, uart_cmd_misc.o(i.cmd_deal_errn_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_errn_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn
</UL>

<P><STRONG><a name="[2de]"></a>cmd_deal_fclr</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_fclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fclr &rArr; cmd_deal_fclr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fclr_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[43f]"></a>cmd_deal_fclr_query</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_fclr_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fclr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fclr
</UL>

<P><STRONG><a name="[2e3]"></a>cmd_deal_flang</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_flang))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_flang &rArr; cmd_deal_flang_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_query
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[441]"></a>cmd_deal_flang_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_flang_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_flang_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flang_flang
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang
</UL>

<P><STRONG><a name="[440]"></a>cmd_deal_flang_query</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_flang_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_flang_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang
</UL>

<P><STRONG><a name="[31c]"></a>cmd_deal_fuartte</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_fuartte))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fuartte &rArr; cmd_deal_fuartte_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_query
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[444]"></a>cmd_deal_fuartte_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_fuartte_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fuartte_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fuartte_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte
</UL>

<P><STRONG><a name="[443]"></a>cmd_deal_fuartte_query</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_fuartte_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fuartte_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte
</UL>

<P><STRONG><a name="[321]"></a>cmd_deal_fwsz</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_fwsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fwsz &rArr; cmd_deal_fwsz_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[446]"></a>cmd_deal_fwsz_query</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_fwsz_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_fwsz_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_size
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_ver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz
</UL>

<P><STRONG><a name="[30a]"></a>cmd_deal_hfopen</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_hfopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_hfopen &rArr; cmd_deal_hfopen_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_query
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[449]"></a>cmd_deal_hfopen_equa</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_hfopen_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_hfopen_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_port
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_mode
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_add
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen
</UL>

<P><STRONG><a name="[448]"></a>cmd_deal_hfopen_query</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_hfopen_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_hfopen_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen
</UL>

<P><STRONG><a name="[314]"></a>cmd_deal_httpcn</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpcn &rArr; cmd_deal_httpcn_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_query
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[44e]"></a>cmd_deal_httpcn_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpcn_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpcn_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpcn
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn
</UL>

<P><STRONG><a name="[44d]"></a>cmd_deal_httpcn_query</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uart_cmd_http.o(i.cmd_deal_httpcn_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpcn_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn
</UL>

<P><STRONG><a name="[316]"></a>cmd_deal_httpdt</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpdt &rArr; cmd_deal_httpdt_equa &rArr; read_httpdt &rArr; http_cmd_open_session &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt_query
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[451]"></a>cmd_deal_httpdt_equa</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpdt_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpdt_equa &rArr; read_httpdt &rArr; http_cmd_open_session &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpdt
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt
</UL>

<P><STRONG><a name="[450]"></a>cmd_deal_httpdt_query</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, uart_cmd_http.o(i.cmd_deal_httpdt_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpdt_query &rArr; http_cmd_open_session &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt
</UL>

<P><STRONG><a name="[313]"></a>cmd_deal_httpph</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpph))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpph &rArr; cmd_deal_httpph_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_query
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[455]"></a>cmd_deal_httpph_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpph_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpph_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpph
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph
</UL>

<P><STRONG><a name="[454]"></a>cmd_deal_httpph_query</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uart_cmd_http.o(i.cmd_deal_httpph_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpph_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph
</UL>

<P><STRONG><a name="[312]"></a>cmd_deal_httptp</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httptp))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httptp &rArr; cmd_deal_httptp_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_query
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[458]"></a>cmd_deal_httptp_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httptp_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httptp_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httptp
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp
</UL>

<P><STRONG><a name="[457]"></a>cmd_deal_httptp_query</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uart_cmd_http.o(i.cmd_deal_httptp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httptp_query &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp
</UL>

<P><STRONG><a name="[315]"></a>cmd_deal_httpua</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpua))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpua &rArr; cmd_deal_httpua_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_query
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[45b]"></a>cmd_deal_httpua_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpua_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpua_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpua
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua
</UL>

<P><STRONG><a name="[45a]"></a>cmd_deal_httpua_query</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uart_cmd_http.o(i.cmd_deal_httpua_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpua_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua
</UL>

<P><STRONG><a name="[311]"></a>cmd_deal_httpurl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_http.o(i.cmd_deal_httpurl))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpurl &rArr; cmd_deal_httpurl_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_query
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[45e]"></a>cmd_deal_httpurl_equa</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, uart_cmd_http.o(i.cmd_deal_httpurl_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpurl_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpurl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpport
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl
</UL>

<P><STRONG><a name="[45d]"></a>cmd_deal_httpurl_query</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart_cmd_http.o(i.cmd_deal_httpurl_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_httpurl_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl
</UL>

<P><STRONG><a name="[31a]"></a>cmd_deal_lptio</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_lptio))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_lptio &rArr; cmd_deal_lptio_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_query
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[462]"></a>cmd_deal_lptio_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_lptio_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_lptio_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lptio
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio
</UL>

<P><STRONG><a name="[461]"></a>cmd_deal_lptio_query</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_lptio_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = cmd_deal_lptio_query &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio
</UL>

<P><STRONG><a name="[2da]"></a>cmd_deal_lver</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_lver))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_lver &rArr; cmd_deal_lver_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lver_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[464]"></a>cmd_deal_lver_query</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_lver_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_lver_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lver
</UL>

<P><STRONG><a name="[2df]"></a>cmd_deal_maxsk</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_maxsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_maxsk &rArr; cmd_deal_maxsk_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_query
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[466]"></a>cmd_deal_maxsk_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_maxsk_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_maxsk_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_maxsk
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk
</UL>

<P><STRONG><a name="[465]"></a>cmd_deal_maxsk_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_maxsk_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_maxsk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk
</UL>

<P><STRONG><a name="[2cf]"></a>cmd_deal_mid</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_mid &rArr; cmd_deal_mid_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[469]"></a>cmd_deal_mid_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_mid_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_mid_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mid_mid
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtmid
</UL>

<P><STRONG><a name="[468]"></a>cmd_deal_mid_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_mid_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_mid_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid
</UL>

<P><STRONG><a name="[2d1]"></a>cmd_deal_mslp</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_mslp))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_mslp &rArr; cmd_deal_mslp_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_query
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[46c]"></a>cmd_deal_mslp_equa</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_mslp_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_mslp_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mslp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp
</UL>

<P><STRONG><a name="[46b]"></a>cmd_deal_mslp_query</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_mslp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_mslp_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp
</UL>

<P><STRONG><a name="[317]"></a>cmd_deal_ntpp</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_time.o(i.cmd_deal_ntpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntpp &rArr; cmd_deal_ntpp_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_query
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[46f]"></a>cmd_deal_ntpp_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_time.o(i.cmd_deal_ntpp_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntpp_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ntpp
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp
</UL>

<P><STRONG><a name="[46e]"></a>cmd_deal_ntpp_query</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart_cmd_time.o(i.cmd_deal_ntpp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntpp_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp
</UL>

<P><STRONG><a name="[318]"></a>cmd_deal_ntps</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_time.o(i.cmd_deal_ntps))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntps &rArr; cmd_deal_ntps_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_query
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[472]"></a>cmd_deal_ntps_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_time.o(i.cmd_deal_ntps_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntps_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ntps
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps
</UL>

<P><STRONG><a name="[471]"></a>cmd_deal_ntps_query</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uart_cmd_time.o(i.cmd_deal_ntps_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntps_query &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps
</UL>

<P><STRONG><a name="[319]"></a>cmd_deal_ntptm</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_time.o(i.cmd_deal_ntptm))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntptm &rArr; cmd_deal_ntptm_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_query
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[475]"></a>cmd_deal_ntptm_equa</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, uart_cmd_time.o(i.cmd_deal_ntptm_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntptm_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_time_get
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_to_string
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm
</UL>

<P><STRONG><a name="[474]"></a>cmd_deal_ntptm_query</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, uart_cmd_time.o(i.cmd_deal_ntptm_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ntptm_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rtc_valid
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_time_get
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_to_string
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm
</UL>

<P><STRONG><a name="[2e7]"></a>cmd_deal_ping</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ping &rArr; cmd_deal_ping_equa &rArr; read_ping &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ping_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[477]"></a>cmd_deal_ping_equa</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_ping_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ping_equa &rArr; read_ping &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ping
</UL>

<P><STRONG><a name="[308]"></a>cmd_deal_prst</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_prst))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_prst &rArr; cmd_deal_prst_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_query
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[47a]"></a>cmd_deal_prst_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_prst_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_prst_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_prst
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst
</UL>

<P><STRONG><a name="[479]"></a>cmd_deal_prst_query</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_prst_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_prst_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst
</UL>

<P><STRONG><a name="[302]"></a>cmd_deal_rcvb</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_rcvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rcvb &rArr; cmd_deal_rcvb_equa &rArr; read_rcvb_data &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketb_is_started
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[47d]"></a>cmd_deal_rcvb_equa</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_rcvb_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rcvb_equa &rArr; read_rcvb_data &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb
</UL>

<P><STRONG><a name="[2eb]"></a>cmd_deal_recv</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = cmd_deal_recv &rArr; cmd_deal_recv_equa &rArr; read_recv_delay &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketa_is_started
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[480]"></a>cmd_deal_recv_equa</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, uart_cmd_misc.o(i.cmd_deal_recv_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_recv_equa &rArr; read_recv_delay &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv
</UL>

<P><STRONG><a name="[2d9]"></a>cmd_deal_reld</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_reld))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_reld &rArr; cmd_deal_reld_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[483]"></a>cmd_deal_reld_query</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_reld_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_reld_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld
</UL>

<P><STRONG><a name="[2e8]"></a>cmd_deal_reset</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_reset &rArr; cmd_deal_reset_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_query
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[485]"></a>cmd_deal_reset_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_reset_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_reset_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset
</UL>

<P><STRONG><a name="[484]"></a>cmd_deal_reset_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_reset_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_reset_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset
</UL>

<P><STRONG><a name="[2e6]"></a>cmd_deal_rlden</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_rlden))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rlden &rArr; cmd_deal_rlden_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_query
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[488]"></a>cmd_deal_rlden_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_rlden_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rlden_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rlden
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden
</UL>

<P><STRONG><a name="[487]"></a>cmd_deal_rlden_query</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_rlden_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rlden_query &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden
</UL>

<P><STRONG><a name="[2f0]"></a>cmd_deal_rxtest</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_test.o(i.cmd_deal_rxtest))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rxtest &rArr; cmd_deal_rxtest_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_query
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[48b]"></a>cmd_deal_rxtest_equa</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, uart_cmd_test.o(i.cmd_deal_rxtest_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rxtest_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_disable_all_soft_watchdogs
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_enable_ap_idle_auto_reset
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_channel
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_bandwidth
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_datatrate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest
</UL>

<P><STRONG><a name="[48a]"></a>cmd_deal_rxtest_query</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uart_cmd_test.o(i.cmd_deal_rxtest_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_rxtest_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest
</UL>

<P><STRONG><a name="[2ec]"></a>cmd_deal_send</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_send &rArr; cmd_deal_send_equa &rArr; read_send_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_send_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[493]"></a>cmd_deal_send_equa</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_send_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_send_equa &rArr; read_send_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_send_num
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_send
</UL>

<P><STRONG><a name="[30e]"></a>cmd_deal_sendck</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_sendck))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sendck &rArr; cmd_deal_sendck_equa &rArr; read_sendck_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sendck_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[495]"></a>cmd_deal_sendck_equa</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_sendck_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sendck_equa &rArr; read_sendck_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sendck
</UL>

<P><STRONG><a name="[305]"></a>cmd_deal_slpen</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_slpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_slpen &rArr; cmd_deal_slpen_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen_query
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[498]"></a>cmd_deal_slpen_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_slpen_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_slpen_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slpen
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen
</UL>

<P><STRONG><a name="[497]"></a>cmd_deal_slpen_query</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_slpen_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_slpen_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen
</UL>

<P><STRONG><a name="[310]"></a>cmd_deal_smem</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_smem))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_smem &rArr; cmd_deal_smem_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[49a]"></a>cmd_deal_smem_query</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_smem_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_smem_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsSetDebugFlag
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_ioctl
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_print
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_top
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBuartAsFuart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem
</UL>

<P><STRONG><a name="[31f]"></a>cmd_deal_smtlk</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_smtlk))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_smtlk &rArr; cmd_deal_smtlk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[49e]"></a>cmd_deal_smtlk_query</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_smtlk_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_smtlk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_size
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk
</UL>

<P><STRONG><a name="[303]"></a>cmd_deal_sndb</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_sndb))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sndb &rArr; cmd_deal_sndb_equa &rArr; read_sndb_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndb_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[49f]"></a>cmd_deal_sndb_equa</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_sndb_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sndb_equa &rArr; read_sndb_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndb_num
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndb
</UL>

<P><STRONG><a name="[30f]"></a>cmd_deal_sndbck</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_sndbck))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sndbck &rArr; cmd_deal_sndbck_equa &rArr; read_sndbck_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndbck_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4a1]"></a>cmd_deal_sndbck_equa</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_sndbck_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sndbck_equa &rArr; read_sndbck_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndbck
</UL>

<P><STRONG><a name="[2fe]"></a>cmd_deal_sockb</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_sockb))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sockb &rArr; cmd_deal_sockb_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_query
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4a4]"></a>cmd_deal_sockb_equa</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_sockb_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sockb_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sockb_port
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sockb_mode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sockb_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb
</UL>

<P><STRONG><a name="[4a3]"></a>cmd_deal_sockb_query</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_sockb_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_sockb_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb
</UL>

<P><STRONG><a name="[2d5]"></a>cmd_deal_srst</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_srst))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_srst &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_srst_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4a8]"></a>cmd_deal_srst_query</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_srst_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = cmd_deal_srst_query &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_srst
</UL>

<P><STRONG><a name="[30d]"></a>cmd_deal_stas</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_stas))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_stas &rArr; cmd_deal_stas_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_stas_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4a9]"></a>cmd_deal_stas_query</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_stas_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_stas_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_stas
</UL>

<P><STRONG><a name="[2e4]"></a>cmd_deal_tcpdis</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcpdis))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpdis &rArr; cmd_deal_tcpdis_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_query
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ab]"></a>cmd_deal_tcpdis_equa</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcpdis_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpdis_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpdis
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis
</UL>

<P><STRONG><a name="[4aa]"></a>cmd_deal_tcpdis_query</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_tcpdis_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpdis_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis
</UL>

<P><STRONG><a name="[2e5]"></a>cmd_deal_tcpdisb</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcpdisb))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpdisb &rArr; cmd_deal_tcpdisb_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_query
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ae]"></a>cmd_deal_tcpdisb_equa</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcpdisb_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpdisb_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpdisb
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb
</UL>

<P><STRONG><a name="[4ad]"></a>cmd_deal_tcpdisb_query</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_tcpdisb_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpdisb_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb
</UL>

<P><STRONG><a name="[2d7]"></a>cmd_deal_tcplk</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcplk))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcplk &rArr; cmd_deal_tcplk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplk_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4b0]"></a>cmd_deal_tcplk_query</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_tcplk_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcplk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplk
</UL>

<P><STRONG><a name="[304]"></a>cmd_deal_tcplkb</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcplkb))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcplkb &rArr; cmd_deal_tcplkb_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplkb_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4b1]"></a>cmd_deal_tcplkb_query</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_tcplkb_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcplkb_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplkb
</UL>

<P><STRONG><a name="[2db]"></a>cmd_deal_tcpto</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcpto))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpto &rArr; cmd_deal_tcpto_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_query
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4b3]"></a>cmd_deal_tcpto_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcpto_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpto_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpbt_to
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto
</UL>

<P><STRONG><a name="[4b2]"></a>cmd_deal_tcpto_query</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_tcpto_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcpto_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto
</UL>

<P><STRONG><a name="[2dc]"></a>cmd_deal_tcptob</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcptob))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcptob &rArr; cmd_deal_tcptob_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_query
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4b6]"></a>cmd_deal_tcptob_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tcptob_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcptob_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpbtb_to
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob
</UL>

<P><STRONG><a name="[4b5]"></a>cmd_deal_tcptob_query</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_tcptob_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tcptob_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob
</UL>

<P><STRONG><a name="[2e9]"></a>cmd_deal_time</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = cmd_deal_time &rArr; cmd_deal_time_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4b8]"></a>cmd_deal_time_query</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, uart_cmd_misc.o(i.cmd_deal_time_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = cmd_deal_time_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time
</UL>

<P><STRONG><a name="[2dd]"></a>cmd_deal_tmode</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tmode &rArr; cmd_deal_tmode_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_query
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ba]"></a>cmd_deal_tmode_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_tmode_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tmode_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tmode
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode
</UL>

<P><STRONG><a name="[4b9]"></a>cmd_deal_tmode_query</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_tmode_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_tmode_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode
</UL>

<P><STRONG><a name="[2ea]"></a>cmd_deal_txpwr</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_txpwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txpwr &rArr; cmd_deal_txpwr_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_query
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4bd]"></a>cmd_deal_txpwr_equa</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_txpwr_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txpwr_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_txpwr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr
</UL>

<P><STRONG><a name="[4bc]"></a>cmd_deal_txpwr_query</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_txpwr_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txpwr_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr
</UL>

<P><STRONG><a name="[2ed]"></a>cmd_deal_txtest</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_test.o(i.cmd_deal_txtest))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txtest &rArr; cmd_deal_txtest_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4bf]"></a>cmd_deal_txtest_equa</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, uart_cmd_test.o(i.cmd_deal_txtest_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txtest_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_pmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_channel
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest
</UL>

<P><STRONG><a name="[2ef]"></a>cmd_deal_txtestn</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_test.o(i.cmd_deal_txtestn))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txtestn &rArr; cmd_deal_txtestn_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4c2]"></a>cmd_deal_txtestn_equa</STRONG> (Thumb, 430 bytes, Stack size 72 bytes, uart_cmd_test.o(i.cmd_deal_txtestn_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_txtestn_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_disable_all_soft_watchdogs
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_enable_ap_idle_auto_reset
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_pmr_n
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_mg
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_mcs
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_ls
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_cw_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_channel
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn
</UL>

<P><STRONG><a name="[2e0]"></a>cmd_deal_uartf</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_uartf))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartf &rArr; cmd_deal_uartf_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_query
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ca]"></a>cmd_deal_uartf_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_uartf_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartf_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uartf_uartf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf
</UL>

<P><STRONG><a name="[4c9]"></a>cmd_deal_uartf_query</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_uartf_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartf_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf
</UL>

<P><STRONG><a name="[2e2]"></a>cmd_deal_uartfl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_uartfl))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartfl &rArr; cmd_deal_uartfl_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_query
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4cd]"></a>cmd_deal_uartfl_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_uartfl_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartfl_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uartfl_fl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl
</UL>

<P><STRONG><a name="[4cc]"></a>cmd_deal_uartfl_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_uartfl_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartfl_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl
</UL>

<P><STRONG><a name="[2e1]"></a>cmd_deal_uartft</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_uartft))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartft &rArr; cmd_deal_uartft_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_query
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4d0]"></a>cmd_deal_uartft_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_uartft_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartft_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uartft_ft
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft
</UL>

<P><STRONG><a name="[4cf]"></a>cmd_deal_uartft_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_uartft_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uartft_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft
</UL>

<P><STRONG><a name="[2fd]"></a>cmd_deal_upfile</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_upfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upfile &rArr; cmd_deal_upfile_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_query
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4d3]"></a>cmd_deal_upfile_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_upfile_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upfile_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile
</UL>

<P><STRONG><a name="[4d2]"></a>cmd_deal_upfile_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_upfile_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upfile_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile
</UL>

<P><STRONG><a name="[307]"></a>cmd_deal_uplogport</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_uplogport))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplogport &rArr; cmd_deal_uplogport_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_query
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4d6]"></a>cmd_deal_uplogport_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_uplogport_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplogport_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uplogport
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport
</UL>

<P><STRONG><a name="[4d5]"></a>cmd_deal_uplogport_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_uplogport_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplogport_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport
</UL>

<P><STRONG><a name="[306]"></a>cmd_deal_uplogsw</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_uplogsw))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplogsw &rArr; cmd_deal_uplogsw_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_query
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4d9]"></a>cmd_deal_uplogsw_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_uplogsw_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplogsw_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uplogsw
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw
</UL>

<P><STRONG><a name="[4d8]"></a>cmd_deal_uplogsw_query</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_uplogsw_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplogsw_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw
</UL>

<P><STRONG><a name="[30c]"></a>cmd_deal_uplt</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_uplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplt &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4db]"></a>cmd_deal_uplt_query</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, uart_cmd_lpb.o(i.cmd_deal_uplt_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uplt_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt
</UL>

<P><STRONG><a name="[31b]"></a>cmd_deal_uppin</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_update.o(i.cmd_deal_uppin))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uppin &rArr; cmd_deal_uppin_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_query
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4de]"></a>cmd_deal_uppin_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_update.o(i.cmd_deal_uppin_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uppin_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uppin
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin
</UL>

<P><STRONG><a name="[4dd]"></a>cmd_deal_uppin_query</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_cmd_update.o(i.cmd_deal_uppin_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_uppin_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin
</UL>

<P><STRONG><a name="[2ff]"></a>cmd_deal_upst</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_upst))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upst &rArr; cmd_deal_upst_query &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4e0]"></a>cmd_deal_upst_query</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, uart_cmd_lpb.o(i.cmd_deal_upst_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upst_query &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst
</UL>

<P><STRONG><a name="[2fc]"></a>cmd_deal_upurl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_upurl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_query
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4e5]"></a>cmd_deal_upurl_equa</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_upurl_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upurl
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl
</UL>

<P><STRONG><a name="[4e4]"></a>cmd_deal_upurl_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_upurl_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_upurl_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl
</UL>

<P><STRONG><a name="[2d8]"></a>cmd_deal_ver</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ver &rArr; cmd_deal_ver_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ver_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4e8]"></a>cmd_deal_ver_query</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_ver_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_ver_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ver
</UL>

<P><STRONG><a name="[2fb]"></a>cmd_deal_wadmn</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wadmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wadmn &rArr; cmd_deal_wadmn_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_query
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ea]"></a>cmd_deal_wadmn_equa</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wadmn_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wadmn_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wadmn
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn
</UL>

<P><STRONG><a name="[4e9]"></a>cmd_deal_wadmn_query</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.cmd_deal_wadmn_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wadmn_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn
</UL>

<P><STRONG><a name="[320]"></a>cmd_deal_walk</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_walk &rArr; cmd_deal_walk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ec]"></a>cmd_deal_walk_query</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, uart_cmd_misc.o(i.cmd_deal_walk_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_walk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_get_walk
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk
</UL>

<P><STRONG><a name="[2f3]"></a>cmd_deal_wamac</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wamac))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wamac &rArr; cmd_deal_wamac_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ed]"></a>cmd_deal_wamac_query</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wamac_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wamac_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac
</UL>

<P><STRONG><a name="[2ce]"></a>cmd_deal_webswitch</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_webswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webswitch &rArr; cmd_deal_webswitch_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_query
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ef]"></a>cmd_deal_webswitch_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_webswitch_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webswitch_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webswitch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch
</UL>

<P><STRONG><a name="[4ee]"></a>cmd_deal_webswitch_query</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_webswitch_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webswitch_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch
</UL>

<P><STRONG><a name="[2cb]"></a>cmd_deal_webu</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_webu))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webu &rArr; cmd_deal_webu_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_query
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4f2]"></a>cmd_deal_webu_equa</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_webu_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webu_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webu_usr
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webu_pwd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu
</UL>

<P><STRONG><a name="[4f1]"></a>cmd_deal_webu_query</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_webu_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webu_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu
</UL>

<P><STRONG><a name="[301]"></a>cmd_deal_webver</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_webver))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webver &rArr; cmd_deal_webver_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4f5]"></a>cmd_deal_webver_query</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, uart_cmd_lpb.o(i.cmd_deal_webver_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_webver_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver
</UL>

<P><STRONG><a name="[2cd]"></a>cmd_deal_wmode</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wmode &rArr; cmd_deal_wmode_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_query
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4f8]"></a>cmd_deal_wmode_equa</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wmode_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wmode_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wmode_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode
</UL>

<P><STRONG><a name="[4f7]"></a>cmd_deal_wmode_query</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_wmode_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wmode_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode
</UL>

<P><STRONG><a name="[31e]"></a>cmd_deal_wps</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wps))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wps &rArr; cmd_deal_wps_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4fa]"></a>cmd_deal_wps_query</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wps_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wps_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps
</UL>

<P><STRONG><a name="[2cc]"></a>cmd_deal_wscan</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, uart_cmd_wscan.o(i.cmd_deal_wscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wscan &rArr; cmd_deal_wscan_queryspecified &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_queryspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4fb]"></a>cmd_deal_wscan_query</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, uart_cmd_wscan.o(i.cmd_deal_wscan_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wscan_query &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan
</UL>

<P><STRONG><a name="[4fc]"></a>cmd_deal_wscan_queryspecified</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, uart_cmd_wscan.o(i.cmd_deal_wscan_queryspecified))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wscan_queryspecified &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan
</UL>

<P><STRONG><a name="[2fa]"></a>cmd_deal_wsdns</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wsdns))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wsdns &rArr; cmd_deal_wsdns_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_query
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[4ff]"></a>cmd_deal_wsdns_equa</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.cmd_deal_wsdns_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wsdns_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsdns
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns
</UL>

<P><STRONG><a name="[4fe]"></a>cmd_deal_wsdns_query</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wsdns_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wsdns_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns
</UL>

<P><STRONG><a name="[2d2]"></a>cmd_deal_wslk</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wslk))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wslk &rArr; cmd_deal_wslk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_query
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[502]"></a>cmd_deal_wslk_equa</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wslk_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wslk_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk
</UL>

<P><STRONG><a name="[501]"></a>cmd_deal_wslk_query</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, uart_cmd_misc.o(i.cmd_deal_wslk_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wslk_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_bssid
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk
</UL>

<P><STRONG><a name="[2d3]"></a>cmd_deal_wslq</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wslq))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wslq &rArr; cmd_deal_wslq_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[504]"></a>cmd_deal_wslq_query</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_wslq_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wslq_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq
</UL>

<P><STRONG><a name="[2f2]"></a>cmd_deal_wsmac</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wsmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wsmac &rArr; cmd_deal_wsmac_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_query
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[507]"></a>cmd_deal_wsmac_equa</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wsmac_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wsmac_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_security
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac
</UL>

<P><STRONG><a name="[506]"></a>cmd_deal_wsmac_query</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.cmd_deal_wsmac_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wsmac_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac
</UL>

<P><STRONG><a name="[300]"></a>cmd_deal_wstch</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wstch))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wstch &rArr; cmd_deal_wstch_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstch_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[50a]"></a>cmd_deal_wstch_query</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_wstch_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wstch_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstch
</UL>

<P><STRONG><a name="[2f9]"></a>cmd_deal_wstry</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wstry))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wstry &rArr; cmd_deal_wstry_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_query
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[50c]"></a>cmd_deal_wstry_equa</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.cmd_deal_wstry_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wstry_equa &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_pmk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_key
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_encry
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_auth
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry
</UL>

<P><STRONG><a name="[50b]"></a>cmd_deal_wstry_query</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_wstry_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wstry_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry
</UL>

<P><STRONG><a name="[2d0]"></a>cmd_deal_wtmid</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_wtmid))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wtmid &rArr; cmd_deal_mid_equa &rArr; cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[2f1]"></a>cmd_deal_wtrwe</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_test.o(i.cmd_deal_wtrwe))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wtrwe &rArr; cmd_deal_wtrwe_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[512]"></a>cmd_deal_wtrwe_equa</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, uart_cmd_test.o(i.cmd_deal_wtrwe_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wtrwe_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_efuse
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_get_efuse
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_val
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wtrwe_add
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe
</UL>

<P><STRONG><a name="[2ee]"></a>cmd_deal_wtstop</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uart_cmd_test.o(i.cmd_deal_wtstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wtstop &rArr; cmd_deal_wtstop_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[517]"></a>cmd_deal_wtstop_query</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_cmd_test.o(i.cmd_deal_wtstop_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = cmd_deal_wtstop_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop
</UL>

<P><STRONG><a name="[2d4]"></a>cmd_deal_z</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.cmd_deal_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = cmd_deal_z &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_z_query
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[519]"></a>cmd_deal_z_query</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.cmd_deal_z_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = cmd_deal_z_query &rArr; hfsys_reset &rArr; do_sysreset &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_z
</UL>

<P><STRONG><a name="[51a]"></a>cmd_err_deal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart_cmd_wskey.o(i.cmd_err_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_err_deal &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
</UL>

<P><STRONG><a name="[423]"></a>cmd_para_end</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_cmd.o(i.cmd_para_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = cmd_para_end &rArr; cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_equa
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_equa
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_equa
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen_equa
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_equa
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_equa
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_equa
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_equa
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_equa
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_equa
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_equa
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_equa
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_equa
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_equa
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_equa
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_equa
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_equa
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_equa
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_equa
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_equa
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_equa
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo_equa
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_equa
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_equa
</UL>

<P><STRONG><a name="[422]"></a>cmd_para_fail</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart_cmd.o(i.cmd_para_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_para_fail &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_equa
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_equa
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_equa
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_equa
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_equa
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_equa
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_equa
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndb_equa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen_equa
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb_equa
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_equa
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_query
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_equa
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_equa
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_query
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_equa
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_equa
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_equa
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_equa
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_equa
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_equa
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_equa
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_equa
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_equa
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_equa
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_equa
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_equa
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_equa
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_equa
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_send_equa
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_query
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_equa
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_equa
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv_equa
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ping_equa
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_equa
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_equa
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_equa
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_equa
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_equa
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo_equa
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_equa
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_equa
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_queryspecified
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_equa
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_equa
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_query
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_equa
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_equa
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt_equa
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_equa
</UL>

<P><STRONG><a name="[258]"></a>cmd_reply</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart_cmd.o(i.cmd_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_z
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtmid
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstch
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ver
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplkb
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplk
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_stas
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_srst
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndbck
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndb
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sendck
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ping
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lver
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fclr
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_query
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndb_num
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_query
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_equa
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_query
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_equa
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac_query
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_query
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_equa
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_query
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_equa
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt_query
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_query
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_query
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_query
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_equa
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_stas_query
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_query
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndbck_equa
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen_query
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_query
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_query
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_query
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_query
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_query
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_query
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_equa
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_query
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_equa
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_to_cmd_mode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_send_num
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_query
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstch_query
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq_query
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_query
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_equa
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps_query
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_query
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_query
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_query
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk_query
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ver_query
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_query
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_query
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_query
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_query
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_equa
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_query
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time_query
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_query
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_query
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplkb_query
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcplk_query
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_query
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_equa
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_query
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_equa
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sendck_equa
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_query
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_query
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld_query
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_query
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_equa
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_query
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_query
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lver_query
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz_query
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_query
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_query
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_equa
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fclr_query
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_equa
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo_query
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_query
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr_query
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_query
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop_query
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest_equa
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_query
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check_query
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check_equa
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_query
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_query
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_equa
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_query
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_equa
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_query
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_equa
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_query
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_equa
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_query
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_equa
</UL>

<P><STRONG><a name="[396]"></a>cnmAisInfraChannelFixed</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cnm.o(i.cnmAisInfraChannelFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cnmAisInfraChannelFixed
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncIsAPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>

<P><STRONG><a name="[8b8]"></a>cnmBss40mBwPermitted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cnm.o(i.cnmBss40mBwPermitted))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAP
</UL>

<P><STRONG><a name="[2e]"></a>cnmChMngrAbortPrivilege</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, cnm.o(i.cnmChMngrAbortPrivilege))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cnmChMngrAbortPrivilege &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[523]"></a>cnmChMngrHandleChEvent</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cnm.o(i.cnmChMngrHandleChEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = cnmChMngrHandleChEvent &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[2d]"></a>cnmChMngrRequestPrivilege</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, cnm.o(i.cnmChMngrRequestPrivilege))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cnmChMngrRequestPrivilege &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[3fe]"></a>cnmGetStaRecByAddress</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmGetStaRecByAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cnmGetStaRecByAddress &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncTxMgmtFrame
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssCreateStaRecFromBssDesc
</UL>

<P><STRONG><a name="[32e]"></a>cnmGetStaRecByIndex</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cnm_mem.o(i.cnmGetStaRecByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDisassoc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDeauth
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAssoc
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessPublicAction
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessHtAction
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaUpdateFreeQuota
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaChangePsMode
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventRxDelBa
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventRxAddBa
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmEnqueueTxPackets
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSecurityFrameTxDone
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateRSNIE
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateObssScanIE
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateHtOpIE
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateHtCapIE
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateExtCapIE
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateErpIE
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocRsp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventDeauthTxDone
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocRsp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmGenerateWmmParamIE
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAssocReq
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2p_IEForAssocRsp
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmGetFrameAction
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authHandleIEChallengeText
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckRxAuthFrameStatus
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authAddIEChallengeText
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmReqGenerateHtCapIE
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmReqGenerateExtCapIE
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocReq
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmGenerateWmmInfoIE
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocCheckTxReAssocReqFrame
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocCheckRxReAssocRspFrameStatus
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocReqFrameCommonIEs
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocReq
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckTxAuthFrame
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocCheckTxReAssocRespFrame
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventTxDone
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecHandleEventPkt
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmParseEdcaParameters
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventDeauthTxDone
</UL>

<P><STRONG><a name="[7e5]"></a>cnmInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cnm.o(i.cnmInit))
<BR><BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
</UL>

<P><STRONG><a name="[37f]"></a>cnmMemAlloc</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, cnm_mem.o(i.cnmMemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_set_beacon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDisassoc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDeauth
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrHandleChEvent
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRetryJOIN
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRequestScan
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCancelScan
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncAcquireCh
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetDisassociate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authHandleIEChallengeText
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_RetryJOIN
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_JOIN
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_SCAN
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendUpdateCmd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrRequestPrivilege
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrAbortPrivilege
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmGenerateScanDoneMsg
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSendEventJoinComplete
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_GC_JOIN
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssTriggerScan
</UL>

<P><STRONG><a name="[37a]"></a>cnmMemFree</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, cnm_mem.o(i.cnmMemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrHandleChEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventAbort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventSwitchOPMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanRequest
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanDone
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventMgmtFrameTx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventMgmtFrameRegister
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventDissolve
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionAbort
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChannelRequest
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChannelAbort
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChGrant
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconUpdate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconAbort
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxDummy
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxRcvAllMsg
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authHandleIEChallengeText
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventScanDone
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventChGrant
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventAbort
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmFlushRequest
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgStart
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgAbort
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanDone
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventUpdateMgmtFrame
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventStartAP
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendUpdateCmd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrRequestPrivilege
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrAbortPrivilege
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmRemovePendingMsg
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
</UL>

<P><STRONG><a name="[524]"></a>cnmMemInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cnm_mem.o(i.cnmMemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cnmMemInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitSystemService
</UL>

<P><STRONG><a name="[3df]"></a>cnmMgtPktAlloc</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmMgtPktAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cnmMgtPktAlloc &rArr; cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmInit
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendAuthFrame
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocRespFrame
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanDone
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanExemptionRsp
</UL>

<P><STRONG><a name="[399]"></a>cnmMgtPktFree</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmMgtPktFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cnmMgtPktFree &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmUninit
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxRelease
</UL>

<P><STRONG><a name="[83a]"></a>cnmPreferredChannel</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cnm.o(i.cnmPreferredChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cnmPreferredChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconUpdate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventStartAP
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAP
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_AP_CHANNEL_DETECT
</UL>

<P><STRONG><a name="[525]"></a>cnmStaFreeAllStaByNetType</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmStaFreeAllStaByNetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
</UL>

<P><STRONG><a name="[3ff]"></a>cnmStaRecAlloc</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmStaRecAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cnmStaRecAlloc &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssCreateStaRecFromBssDesc
</UL>

<P><STRONG><a name="[333]"></a>cnmStaRecChangeState</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmStaRecChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStart
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateParamsForAP
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDeactivateStaRec
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendUpdateCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDeauth
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessHtAction
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventDeauthTxDone
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssClearClientList
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_JOIN
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAAComplete
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventTxDone
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAuth
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
</UL>

<P><STRONG><a name="[389]"></a>cnmStaRecFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cnm_mem.o(i.cnmStaRecFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDeactivateStaRec
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventAbort
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventDeauthTxDone
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaFreeAllStaByNetType
</UL>

<P><STRONG><a name="[7e9]"></a>cnmStaRecInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cnm_mem.o(i.cnmStaRecInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cnmStaRecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitSystemService
</UL>

<P><STRONG><a name="[52d]"></a>cnmTimerDoTimeOutCheck</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, cnm_timer.o(i.cnmTimerDoTimeOutCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = cnmTimerDoTimeOutCheck &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerSetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTimerTimeoutCheck
</UL>

<P><STRONG><a name="[37e]"></a>cnmTimerInitTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cnm_timer.o(i.cnmTimerInitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cnmTimerInitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secInit
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInit
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmInit
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssInit
</UL>

<P><STRONG><a name="[530]"></a>cnmTimerInitialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cnm_timer.o(i.cnmTimerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cnmTimerInitialize &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitSystemService
</UL>

<P><STRONG><a name="[383]"></a>cnmTimerStartTimer</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, cnm_timer.o(i.cnmTimerStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerPendingTimer
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerSetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidTimeoutCheck
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scantime
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCache
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventChGrant
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanDone
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRecIeInfoForClient
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateBwByChListForAP
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_IDLE
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_CHNL_ON_HAND
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_SEND_DEAUTH_to_COUNTERMEASURE
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssTriggerScan
</UL>

<P><STRONG><a name="[387]"></a>cnmTimerStopTimer</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cnm_timer.o(i.cnmTimerStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidClearTimeoutCheck
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAssoc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventAbort
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCache
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmUninit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_NORMAL_TR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssReset
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_IDLE
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_GC_JOIN
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_CHNL_ON_HAND
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
</UL>

<P><STRONG><a name="[82e]"></a>cnmUninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cnm.o(i.cnmUninit))
<BR><BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUninitMGMT
</UL>

<P><STRONG><a name="[535]"></a>config_start_parameter</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ethernet.o(i.config_start_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = config_start_parameter &rArr; check_custom_upgrade &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_custom_upgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[536]"></a>copy_para</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uart_cmd.o(i.copy_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uplogsw
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sockb_mode
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slpen
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_security
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lptio
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_mode
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ntps
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wmode_mode
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_webswitch
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uartf_uartf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tmode
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpdisb
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcpdis
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rlden
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_saving_mode
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mslp
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fuartte_mode
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_echo
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_bandwidth
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_datatrate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_pro
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atrm_cs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httptp
</UL>

<P><STRONG><a name="[88f]"></a>cpu_idle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setup.o(i.cpu_idle))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[53a]"></a>crypto_mod_exp</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, crypt_bigint.o(i.crypto_mod_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 3208<LI>Call Chain = crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_exptmod
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>

<P><STRONG><a name="[542]"></a>dh5_derive_shared</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crypt.o(i.dh5_derive_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_groups_get
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[a0f]"></a>dh5_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crypt.o(i.dh5_free))
<BR><BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[545]"></a>dh5_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crypt.o(i.dh5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_groups_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[544]"></a>dh_derive_shared</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, crypt.o(i.dh_derive_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_mhead
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
</UL>

<P><STRONG><a name="[543]"></a>dh_groups_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crypt.o(i.dh_groups_get))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
</UL>

<P><STRONG><a name="[546]"></a>dh_init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, crypt.o(i.dh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_mhead
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
</UL>

<P><STRONG><a name="[54d]"></a>dhcp_arp_reply</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[558]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[564]"></a>dhcp_fine_tmr</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[56c]"></a>dhcp_network_changed</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>

<P><STRONG><a name="[571]"></a>dhcp_release</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[572]"></a>dhcp_renew</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[573]"></a>dhcp_start</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>

<P><STRONG><a name="[577]"></a>dhcp_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[582]"></a>dns_gethostbyname</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dns.o(i.dns_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
</UL>

<P><STRONG><a name="[602]"></a>dns_getserver</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dns.o(i.dns_getserver))
<BR><BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
</UL>

<P><STRONG><a name="[584]"></a>dns_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dns.o(i.dns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dns_init &rArr; ipaddr_addr &rArr; ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init_local
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[567]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsdns
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[58d]"></a>dns_tmr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[9d]"></a>do_bind</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, api_msg.o(i.do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[9e]"></a>do_connect</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, api_msg.o(i.do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[597]"></a>do_custom_upgrade</STRONG> (Thumb, 2012 bytes, Stack size 40 bytes, uart_cmd_update.o(i.do_custom_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = do_custom_upgrade &rArr; custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_config_crc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_upgrade_step
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_upgrade_para
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_failed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade
</UL>

<P><STRONG><a name="[9f]"></a>do_delconn</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[a0]"></a>do_disconnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, api_msg.o(i.do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_disconnect &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[58]"></a>do_free</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, auxinfo.o(i.do_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = do_free &rArr; vTaskList &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxinfo.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[a1]"></a>do_getaddr</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, api_msg.o(i.do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_getaddr &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[a2]"></a>do_gethostbyname</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_msg.o(i.do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = do_gethostbyname &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[a3]"></a>do_listen</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, api_msg.o(i.do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[a4]"></a>do_newconn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[a5]"></a>do_recv</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_lib.o(i.netconn_recv_data)
<LI> api_lib.o(i.netconn_recved)
</UL>
<P><STRONG><a name="[5a5]"></a>do_reload</STRONG> (Thumb, 1400 bytes, Stack size 24 bytes, hfsys.o(i.do_reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = do_reload &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_f_setting_ok
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
</UL>

<P><STRONG><a name="[a6]"></a>do_send</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, api_msg.o(i.do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[5aa]"></a>do_smartlink</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethernetif.o(i.do_smartlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = do_smartlink &rArr; hfsmtlk_main_loop &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_main_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[5ac]"></a>do_softreset</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, hfsys.o(i.do_softreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_disabel_all_interrupt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartTxIoConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRxIoConfig
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRtsIoConfig
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartCtsIoConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
</UL>

<P><STRONG><a name="[5b1]"></a>do_sysreset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hfsys.o(i.do_sysreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = do_sysreset &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
</UL>

<P><STRONG><a name="[57]"></a>do_top</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, auxinfo.o(i.do_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = do_top &rArr; __do_top &rArr; vTaskGetRunTimeStats &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__do_top
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxinfo.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[a7]"></a>do_write</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write)
</UL>
<P><STRONG><a name="[5b6]"></a>eap_get_id</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wps.o(i.eap_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eap_get_id
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[5b9]"></a>eap_hdr_validate</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, wps.o(i.eap_hdr_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eap_hdr_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[5ba]"></a>eap_msg_alloc</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, wps.o(i.eap_msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = eap_msg_alloc &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_frag_ack
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>

<P><STRONG><a name="[5bc]"></a>eap_sm_buildIdentity</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, wps.o(i.eap_sm_buildIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = eap_sm_buildIdentity &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[5bf]"></a>eap_wsc_build_frag_ack</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wps.o(i.eap_wsc_build_frag_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = eap_wsc_build_frag_ack &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
</UL>

<P><STRONG><a name="[5c2]"></a>eap_wsc_init</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, wps.o(i.eap_wsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = eap_wsc_init &rArr; uuid_gen_mac_addr &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_gen_mac_addr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
</UL>

<P><STRONG><a name="[5cf]"></a>etharp_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, etharp.o(i.etharp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = etharp_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[86]"></a>etharp_output</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.ethernetif_init)
<LI> ethernetif.o(i.ethernetif_init_p2p)
</UL>
<P><STRONG><a name="[557]"></a>etharp_query</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[40a]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3c9]"></a>etharp_tmr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[82]"></a>ethernet_input</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.ethernet_configure_interface)
</UL>
<P><STRONG><a name="[5df]"></a>ethernet_reconfigure_interface</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ethernet.o(i.ethernet_reconfigure_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = ethernet_reconfigure_interface &rArr; ethernet_configure_interface &rArr; wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
</UL>

<P><STRONG><a name="[83]"></a>ethernetif_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.ethernet_configure_interface)
</UL>
<P><STRONG><a name="[85]"></a>ethernetif_init_p2p</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ethernetif_init_p2p &rArr; low_level_init_p2p &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init_p2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.ethernet_configure_interface)
</UL>
<P><STRONG><a name="[96]"></a>ethernetif_input</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.low_level_init)
</UL>
<P><STRONG><a name="[97]"></a>ethernetif_input_p2p</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ethernetif_input_p2p &rArr; low_level_input_p2p &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input_p2p
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.low_level_init_p2p)
</UL>
<P><STRONG><a name="[4e1]"></a>find_url</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.find_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_url &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
</UL>

<P><STRONG><a name="[1fe]"></a>flash_erase_page</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, hfflash.o(i.flash_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_start
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nvram
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_wifi_fw
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_deal_wscan_query
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_config
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_upgrade_step
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_failed
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_txpwr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fclr_query
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_equa
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
</UL>

<P><STRONG><a name="[40f]"></a>flash_erase_wififw_page</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hfflash.o(i.flash_erase_wififw_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_erase_wififw_page
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
</UL>

<P><STRONG><a name="[5f1]"></a>flash_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hfflash.o(i.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_wififw_page
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy
</UL>

<P><STRONG><a name="[1cc]"></a>flash_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hfflash.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_get_adjust
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nvram
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_wifi_fw
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_page_open
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_ver
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_fail
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_is_wififw_startaddr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfflash_copy
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webver_query
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upgrade_step
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_url_flag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web_data
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_data_chksum
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy_no_lock
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_err_deal
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_query
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
</UL>

<P><STRONG><a name="[5f0]"></a>flash_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hfflash.o(i.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_wififw_page
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy
</UL>

<P><STRONG><a name="[5f2]"></a>flash_unlock_ex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hfflash.o(i.flash_unlock_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_unlock_ex &rArr; GDFlashUnlock &rArr; GDSpiCodeFlashIsBusy &rArr; GDSpiCodeFlashReadStatus &rArr; GDSpiCodeFlashResetCRM &rArr; GDSpiCodeFlashSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>flash_write</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hfflash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_write_file
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nvram
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_wifi_fw
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_config
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfflash_copy
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_upgrade_step
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_txpwr
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
</UL>

<P><STRONG><a name="[65c]"></a>flash_write_no_lock</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hfflash.o(i.flash_write_no_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_write_no_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy_no_lock
</UL>

<P><STRONG><a name="[1ce]"></a>generate_CRC_512</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.generate_CRC_512))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = generate_CRC_512
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_web_data
</UL>

<P><STRONG><a name="[227]"></a>getSystime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart_cmd.o(i.getSystime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSystime
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reset_flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_init
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_down
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWIP_RAND
</UL>

<P><STRONG><a name="[2c8]"></a>get_cmd</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, uart_cmd.o(i.get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_cmd &rArr; cmd_code_pars
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_code_pars
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[257]"></a>get_firmware_size</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart_cmd.o(i.get_firmware_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_firmware_size &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz_query
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFirmwareSize
</UL>

<P><STRONG><a name="[447]"></a>get_firmware_ver</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, uart_cmd.o(i.get_firmware_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_firmware_ver &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_start_sniffer_mode
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fwsz_query
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
</UL>

<P><STRONG><a name="[42b]"></a>get_netset_cs</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart_cmd_atrm.o(i.get_netset_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_netset_cs &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_query
</UL>

<P><STRONG><a name="[42c]"></a>get_netset_port</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_cmd_atrm.o(i.get_netset_port))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_query
</UL>

<P><STRONG><a name="[42a]"></a>get_netset_protocol</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart_cmd_atrm.o(i.get_netset_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_netset_protocol &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_query
</UL>

<P><STRONG><a name="[51d]"></a>get_uart_bits</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.get_uart_bits))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
</UL>

<P><STRONG><a name="[782]"></a>get_uart_parity</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.get_uart_parity))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
</UL>

<P><STRONG><a name="[51e]"></a>get_uart_stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.get_uart_stop))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
</UL>

<P><STRONG><a name="[606]"></a>get_wakey_auth</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart_cmd_wakey.o(i.get_wakey_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_wakey_auth &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
</UL>

<P><STRONG><a name="[607]"></a>get_wakey_encry</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart_cmd_wakey.o(i.get_wakey_encry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_wakey_encry &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
</UL>

<P><STRONG><a name="[705]"></a>get_wifi_worker_thread_exit_flags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdiocard.o(i.get_wifi_worker_thread_exit_flags))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
</UL>

<P><STRONG><a name="[608]"></a>get_wskey_auth</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart_cmd_wskey.o(i.get_wskey_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_wskey_auth &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
</UL>

<P><STRONG><a name="[609]"></a>get_wskey_encry</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, uart_cmd_wskey.o(i.get_wskey_encry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_wskey_encry &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
</UL>

<P><STRONG><a name="[60a]"></a>gettimeofday</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hftime.o(i.gettimeofday))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gettimeofday &rArr; _gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
</UL>

<P><STRONG><a name="[60d]"></a>glRegisterP2P</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gl_p2p.o(i.glRegisterP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = glRegisterP2P &rArr; nicActivateNetwork &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncInitConnectionSettings
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmInit
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicActivateNetwork
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2PAllocInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pLaunch
</UL>

<P><STRONG><a name="[611]"></a>glUnregisterP2P</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gl_p2p.o(i.glUnregisterP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = glUnregisterP2P &rArr; p2pFsmUninit &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2PFreeInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRemove
</UL>

<P><STRONG><a name="[614]"></a>handle_assoc_info</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wpa.o(i.handle_assoc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = handle_assoc_info &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGOStationUpdate
</UL>

<P><STRONG><a name="[616]"></a>handle_disassoc_info</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, wpa.o(i.handle_disassoc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = handle_disassoc_info &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGOStationUpdate
</UL>

<P><STRONG><a name="[617]"></a>handle_link_status_change</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, wpa.o(i.handle_link_status_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = handle_link_status_change &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaAuthTimerout
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_down
</UL>

<P><STRONG><a name="[618]"></a>handle_rx_security_data</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, wpa.o(i.handle_rx_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = handle_rx_security_data &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
</UL>

<P><STRONG><a name="[1b5]"></a>handle_upgrade_package</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, uart_cmd_update.o(i.handle_upgrade_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = handle_upgrade_package &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfat_get_words
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
</UL>

<P><STRONG><a name="[61a]"></a>handle_wpa_exit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wpa.o(i.handle_wpa_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = handle_wpa_exit &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
</UL>

<P><STRONG><a name="[61b]"></a>hex2byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, crypt.o(i.hex2byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2num
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>

<P><STRONG><a name="[3bf]"></a>hexstr2bin</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, crypt.o(i.hexstr2bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hexstr2bin &rArr; hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_setup_wep_key
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[ff]"></a>hf_atcmd_chbau</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, hfat.o(i.hf_atcmd_chbau))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_chbau &rArr; set_baurate &rArr; FuartInit &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>hf_atcmd_lann</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart_cmd_lann.o(i.hf_atcmd_lann))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_lann &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>hf_atcmd_uart</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, uart_cmd_uart.o(i.hf_atcmd_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_uart &rArr; cmd_uart_query &rArr; get_uart_parity_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setstopbits
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setparity
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setdatabits
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbaudrate
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>hf_atcmd_uartclk</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, hfat.o(i.hf_atcmd_uartclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_uartclk &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC48MHzTrimmedVal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>hf_atcmd_wakey</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, uart_cmd_wakey.o(i.hf_atcmd_wakey))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wakey &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_err_deal
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_key
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_encry
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wakey_auth
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wakey_encry
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wakey_auth
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>hf_atcmd_wann</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, uart_cmd_wann.o(i.hf_atcmd_wann))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wann &rArr; hf_atcmd_wann_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wann_query
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>hf_atcmd_wap</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.hf_atcmd_wap))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wap &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_err_deal
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>hf_atcmd_wifi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hfat.o(i.hf_atcmd_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wifi &rArr; wifi_start &rArr; ethernet_reconfigure_interface &rArr; ethernet_configure_interface &rArr; wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_stop
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_disconnect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>hf_atcmd_wskey</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, uart_cmd_wskey.o(i.hf_atcmd_wskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wskey &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_key
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_encry
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wskey_auth
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_err_deal
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wskey_encry
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wskey_auth
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>hf_atcmd_wsssid</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.hf_atcmd_wsssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wsssid &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>hf_atcmd_wtest</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, hfat.o(i.hf_atcmd_wtest))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wtest &rArr; hf_wtest_get_rssi &rArr; wext_query_rssi &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_get_rssi
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[252]"></a>hf_get_walk</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wlan_oid.o(i.hf_get_walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hf_get_walk
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_walk_query
</UL>

<P><STRONG><a name="[636]"></a>hf_lwip_accept</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sockets.o(i.hf_lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = hf_lwip_accept &rArr; lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>

<P><STRONG><a name="[210]"></a>hf_lwip_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sockets.o(i.hf_lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = hf_lwip_close &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_session
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>

<P><STRONG><a name="[20f]"></a>hf_lwip_connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sockets.o(i.hf_lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = hf_lwip_connect &rArr; lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>

<P><STRONG><a name="[63a]"></a>hf_lwip_listen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sockets.o(i.hf_lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = hf_lwip_listen &rArr; lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>

<P><STRONG><a name="[21a]"></a>hf_lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(i.hf_lwip_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_raw_recv
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
</UL>

<P><STRONG><a name="[63c]"></a>hf_lwip_recvfrom</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, sockets.o(i.hf_lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recv
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_ntp_packet
</UL>

<P><STRONG><a name="[20e]"></a>hf_lwip_socket</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sockets.o(i.hf_lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = hf_lwip_socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>

<P><STRONG><a name="[63f]"></a>hf_priv_do_ctrl</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, wlan_oid.o(i.hf_priv_do_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_stop
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setmac
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setdaterate_11n
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setdaterate
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_start
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_cw_mode_start
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_cw_mode
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_channel
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_BandWidth
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_efuse_write
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxPayloadLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxGain
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxBurstInterval
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxBurstFrames
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_SetPreamble
</UL>

<P><STRONG><a name="[641]"></a>hf_priv_do_ctrl_get</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, wlan_oid.o(i.hf_priv_do_ctrl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hf_priv_do_ctrl_get &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_efuse_read
</UL>

<P><STRONG><a name="[642]"></a>hf_start_sniffer_mode</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, wlan_oid.o(i.hf_start_sniffer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = hf_start_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_ver
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_fix_channel_by_bssid
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[645]"></a>hf_stop_sniffer_mode</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, wlan_oid.o(i.hf_stop_sniffer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
</UL>

<P><STRONG><a name="[1fb]"></a>hf_thread_delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hfthread.o(i.hf_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_upgrade
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade_default
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sysreset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_func
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_get_rssi
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_main_loop
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_add
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_rcvb_data
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt_query
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFUartAdjust_recv
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_recv_data
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq_query
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_query
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps_query
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_key_config
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[169]"></a>hf_trapfault_handler_dumpstack</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hfsys.o(i.hf_trapfault_handler_dumpstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hf_trapfault_handler_dumpstack &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usagefault_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busfault_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmanage_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_handler
</UL>

<P><STRONG><a name="[646]"></a>hf_wifi_switch_test_mode</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, wlan_oid.o(i.hf_wifi_switch_test_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = hf_wifi_switch_test_mode &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_efuse
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_get_efuse
</UL>

<P><STRONG><a name="[647]"></a>hf_wifi_test_SetPreamble</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_SetPreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_SetPreamble &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[648]"></a>hf_wifi_test_TxBurstFrames</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_TxBurstFrames))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_TxBurstFrames &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[649]"></a>hf_wifi_test_TxBurstInterval</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_TxBurstInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_TxBurstInterval &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[64a]"></a>hf_wifi_test_TxGain</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_TxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_TxGain &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[64b]"></a>hf_wifi_test_TxPayloadLength</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_TxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_TxPayloadLength &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[64c]"></a>hf_wifi_test_efuse_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_efuse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = hf_wifi_test_efuse_read &rArr; hf_priv_do_ctrl_get &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_get_efuse
</UL>

<P><STRONG><a name="[64d]"></a>hf_wifi_test_efuse_write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_efuse_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_efuse_write &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_efuse
</UL>

<P><STRONG><a name="[514]"></a>hf_wifi_test_get_efuse</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_get_efuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_get_efuse &rArr; hf_wifi_test_efuse_read &rArr; hf_priv_do_ctrl_get &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_efuse_read
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_switch_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
</UL>

<P><STRONG><a name="[490]"></a>hf_wifi_test_rx</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, wlan_oid.o(i.hf_wifi_test_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_rx &rArr; hf_wifi_test_setdaterate_11n &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setmac
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setdaterate_11n
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setdaterate
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_channel
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_BandWidth
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_switch_test_mode
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
</UL>

<P><STRONG><a name="[492]"></a>hf_wifi_test_rx_query</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, wlan_oid.o(i.hf_wifi_test_rx_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_rx_query &rArr; hf_priv_do_ctrl_get &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_query
</UL>

<P><STRONG><a name="[651]"></a>hf_wifi_test_set_BandWidth</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_set_BandWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_set_BandWidth &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
</UL>

<P><STRONG><a name="[650]"></a>hf_wifi_test_set_channel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_set_channel &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
</UL>

<P><STRONG><a name="[654]"></a>hf_wifi_test_set_cw_mode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_set_cw_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_set_cw_mode &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[655]"></a>hf_wifi_test_set_cw_mode_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wlan_oid.o(i.hf_wifi_test_set_cw_mode_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = hf_wifi_test_set_cw_mode_start &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[516]"></a>hf_wifi_test_set_efuse</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_set_efuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_set_efuse &rArr; hf_wifi_test_efuse_write &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_efuse_write
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_switch_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
</UL>

<P><STRONG><a name="[656]"></a>hf_wifi_test_set_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wlan_oid.o(i.hf_wifi_test_set_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = hf_wifi_test_set_start &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
</UL>

<P><STRONG><a name="[518]"></a>hf_wifi_test_set_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wlan_oid.o(i.hf_wifi_test_set_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = hf_wifi_test_set_stop &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtstop_query
</UL>

<P><STRONG><a name="[652]"></a>hf_wifi_test_setdaterate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_setdaterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_setdaterate &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
</UL>

<P><STRONG><a name="[653]"></a>hf_wifi_test_setdaterate_11n</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, wlan_oid.o(i.hf_wifi_test_setdaterate_11n))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = hf_wifi_test_setdaterate_11n &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
</UL>

<P><STRONG><a name="[64f]"></a>hf_wifi_test_setmac</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wlan_oid.o(i.hf_wifi_test_setmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hf_wifi_test_setmac &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
</UL>

<P><STRONG><a name="[64e]"></a>hf_wifi_test_tx</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, wlan_oid.o(i.hf_wifi_test_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_tx &rArr; hf_wifi_test_setmac &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setmac
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setdaterate
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_start
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_cw_mode_start
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_cw_mode
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_channel
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_BandWidth
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxPayloadLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxGain
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxBurstInterval
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxBurstFrames
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_SetPreamble
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_switch_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
</UL>

<P><STRONG><a name="[4c8]"></a>hf_wifi_test_tx11n</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, wlan_oid.o(i.hf_wifi_test_tx11n))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_tx11n &rArr; hf_wifi_test_setdaterate_11n &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setmac
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_setdaterate_11n
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_start
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_cw_mode_start
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_cw_mode
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_channel
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_BandWidth
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxPayloadLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxGain
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxBurstInterval
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_TxBurstFrames
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_switch_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>

<P><STRONG><a name="[635]"></a>hf_wtest_get_rssi</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, hfat.o(i.hf_wtest_get_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = hf_wtest_get_rssi &rArr; wext_query_rssi &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
</UL>

<P><STRONG><a name="[634]"></a>hf_wtest_testpin</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, hfat.o(i.hf_wtest_testpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = hf_wtest_testpin &rArr; hfthread_resume_all &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_pin_is_high
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_get_pid
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_disabel_all_interrupt
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_suspend_all
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_resume_all
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSpimIoConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
</UL>

<P><STRONG><a name="[619]"></a>hfat_get_words</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hfat.o(i.hfat_get_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hfat_get_words &rArr; strtowords
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtowords
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
</UL>

<P><STRONG><a name="[658]"></a>hfat_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hfat.o(i.hfat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = hfat_init &rArr; hfthread_mutext_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_new
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[659]"></a>hfdbg_check</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hf_debug.o(i.hfdbg_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hfdbg_check
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[538]"></a>hfdbg_get_level</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hf_debug.o(i.hfdbg_get_level))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_dbgl
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_upgrade_para
</UL>

<P><STRONG><a name="[61e]"></a>hfdbg_set_level</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hf_debug.o(i.hfdbg_set_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hfdbg_set_level &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_dbgl
</UL>

<P><STRONG><a name="[65e]"></a>hffile_fs_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hffile.o(i.hffile_fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = hffile_fs_init &rArr; hffile_open &rArr; hfthread_mutext_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65f]"></a>hffile_open</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, hffile.o(i.hffile_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hffile_open &rArr; hfthread_mutext_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_new
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_data_chksum
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_fs_init
</UL>

<P><STRONG><a name="[40d]"></a>hfflash_copy</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, hfflash.o(i.hfflash_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hfflash_copy &rArr; flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
</UL>

<P><STRONG><a name="[24a]"></a>hfgpio_configure_fpin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hfgpio.o(i.hfgpio_configure_fpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hfgpio_configure_fpin &rArr; hfgpio_configure_pin &rArr; Set_Gpio_DS
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fid_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_upgrade
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timer_callback
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_success_pin
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_down
</UL>

<P><STRONG><a name="[1f4]"></a>hfgpio_configure_fpin_interrupt</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, hfgpio.o(i.hfgpio_configure_fpin_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = hfgpio_configure_fpin_interrupt &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fenable_interrupt
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_get_interrupt_vector
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fid_valid
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterruptInit
</UL>

<P><STRONG><a name="[4dc]"></a>hfgpio_configure_pin</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, hfgpio.o(i.hfgpio_configure_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hfgpio_configure_pin &rArr; Set_Gpio_DS
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_Low
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_High
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_DS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioPullUp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioPullDown
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioOutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoPull
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoInputOutput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioInput
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_success_pin
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplt_query
</UL>

<P><STRONG><a name="[5b0]"></a>hfgpio_disabel_all_interrupt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hfgpio.o(i.hfgpio_disabel_all_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hfgpio_disabel_all_interrupt &rArr; hfgpio_fdisable_interrupt &rArr; GpioIntDis
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fdisable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[14f]"></a>hfgpio_fdisable_interrupt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, hfgpio.o(i.hfgpio_fdisable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hfgpio_fdisable_interrupt &rArr; GpioIntDis
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntDis
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fid_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_disabel_all_interrupt
</UL>

<P><STRONG><a name="[150]"></a>hfgpio_fenable_interrupt</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, hfgpio.o(i.hfgpio_fenable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hfgpio_fenable_interrupt &rArr; hfgpio_fpin_is_high &rArr; hfgpio_pin_is_high
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_get_interrupt_vector
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fid_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
</UL>

<P><STRONG><a name="[3c3]"></a>hfgpio_fmap_check</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, hfgpio.o(i.hfgpio_fmap_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hfgpio_fmap_check &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[144]"></a>hfgpio_fpin_is_high</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hfgpio.o(i.hfgpio_fpin_is_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hfgpio_fpin_is_high &rArr; hfgpio_pin_is_high
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_pin_is_high
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fid_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_upgrade
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timer_callback
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fenable_interrupt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_start_wps
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_custom_upgrade
</UL>

<P><STRONG><a name="[622]"></a>hfgpio_get_pid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hfgpio.o(i.hfgpio_get_pid))
<BR><BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_success_pin
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpins
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[661]"></a>hfgpio_init_gpio_pin</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, hfgpio.o(i.hfgpio_init_gpio_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = hfgpio_init_gpio_pin &rArr; GpioInterruptInit &rArr; hfgpio_configure_fpin_interrupt &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrInit
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrGpioSel
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_Low
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioOutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoPull
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterruptInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartTxIoConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartRxIoConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartTxIoConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRxIoConfig
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRtsIoConfig
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartCtsIoConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[623]"></a>hfgpio_pin_is_high</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, hfgpio.o(i.hfgpio_pin_is_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hfgpio_pin_is_high
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[205]"></a>hfmem_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hfsys.o(i.hfmem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_destroy
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_session_object
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_session_object
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
</UL>

<P><STRONG><a name="[203]"></a>hfmem_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hfsys.o(i.hfmem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_session_object
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_open
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_init
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrdup
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2PAllocInfo
</UL>

<P><STRONG><a name="[664]"></a>hfmsgq_create</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hfmsgq.o(i.hfmsgq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = hfmsgq_create &rArr; hfmsgq_destroy &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_new
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[665]"></a>hfmsgq_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hfmsgq.o(i.hfmsgq_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = hfmsgq_destroy &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_signal
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
</UL>

<P><STRONG><a name="[669]"></a>hfmsgq_recv</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, hfmsgq.o(i.hfmsgq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_wait
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
</UL>

<P><STRONG><a name="[66d]"></a>hfmsgq_send</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, hfmsgq.o(i.hfmsgq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_signal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_unlock
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_lock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[601]"></a>hfnet_httpd_get_nvram</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hfnet.o(i.hfnet_httpd_get_nvram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfnet_httpd_get_nvram
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
</UL>

<P><STRONG><a name="[909]"></a>hfnet_httpd_set_nvram</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hfnet.o(i.hfnet_httpd_set_nvram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfnet_httpd_set_nvram
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
</UL>

<P><STRONG><a name="[670]"></a>hfnet_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hfnet.o(i.hfnet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = hfnet_init &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>hfnet_send_assis_event</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hfnet.o(i.hfnet_send_assis_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfnet_send_assis_event
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
</UL>

<P><STRONG><a name="[961]"></a>hfnet_send_uart_event</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hfnet.o(i.hfnet_send_uart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfnet_send_uart_event
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_free
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
</UL>

<P><STRONG><a name="[3c6]"></a>hfnet_start_assis</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hfnet.o(i.hfnet_start_assis))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hfnet_start_assis &rArr; start_assis_thread &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_check_active
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[3c7]"></a>hfnet_start_httpd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hfnet.o(i.hfnet_start_httpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = hfnet_start_httpd &rArr; httpd_start &rArr; hfthread_create &rArr; AddTailEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_check_active
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[3c8]"></a>hfnet_start_uart</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hfnet.o(i.hfnet_start_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = hfnet_start_uart &rArr; hfthread_create &rArr; AddTailEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_set_recv_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[3c4]"></a>hfnet_wifi_is_active</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hfnet.o(i.hfnet_wifi_is_active))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[677]"></a>hfnvm_read_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hfsys.o(i.hfnvm_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hfnvm_read_data &rArr; NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_int
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
</UL>

<P><STRONG><a name="[679]"></a>hfnvm_read_int</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hfsys.o(i.hfnvm_read_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hfnvm_read_int &rArr; hfnvm_read_data &rArr; NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_state_init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
</UL>

<P><STRONG><a name="[365]"></a>hfnvm_write_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hfsys.o(i.hfnvm_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hfnvm_write_data &rArr; NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_zero
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
</UL>

<P><STRONG><a name="[147]"></a>hfnvm_write_int</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hfsys.o(i.hfnvm_write_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hfnvm_write_int &rArr; hfnvm_write_data &rArr; NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_state_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
</UL>

<P><STRONG><a name="[67a]"></a>hfnvm_zero</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hfsys.o(i.hfnvm_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hfnvm_zero &rArr; hfnvm_write_data &rArr; NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[682]"></a>hfsmtlk_check_is_retry_packet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hfsmtlk.o(i.hfsmtlk_check_is_retry_packet))
<BR><BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[363]"></a>hfsmtlk_crc8</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hfsmtlk.o(i.hfsmtlk_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfsmtlk_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssidcrc8
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
</UL>

<P><STRONG><a name="[67b]"></a>hfsmtlk_decode</STRONG> (Thumb, 1224 bytes, Stack size 88 bytes, hfsmtlk.o(i.hfsmtlk_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_decode &rArr; airkiss_check &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_fix_channel
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_check
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_fix_channel
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_check
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_get_index_by_bssid
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_get_encry_by_bssid
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_get_base_length
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_check_is_retry_packet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_sniffer_data_recv
</UL>

<P><STRONG><a name="[683]"></a>hfsmtlk_decode_mc</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, hfsmtlk.o(i.hfsmtlk_decode_mc))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_decode_mc &rArr; smartlinkv7_check &rArr; smartlinkv7_partial_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_get_fix_channel
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_fix_channel
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_sniffer_data_recv
</UL>

<P><STRONG><a name="[366]"></a>hfsmtlk_finished_ok</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hfsmtlk.o(i.hfsmtlk_finished_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
</UL>

<P><STRONG><a name="[68e]"></a>hfsmtlk_fix_channel_by_bssid</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hfsmtlk.o(i.hfsmtlk_fix_channel_by_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_fix_channel_by_bssid &rArr; hf_start_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_start_sniffer_mode
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_fix_channel
</UL>

<P><STRONG><a name="[67e]"></a>hfsmtlk_get_base_length</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hfsmtlk.o(i.hfsmtlk_get_base_length))
<BR><BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[362]"></a>hfsmtlk_list_find_ap_by_bssid</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hfsmtlk.o(i.hfsmtlk_list_find_ap_by_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfsmtlk_list_find_ap_by_bssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_scan_callback
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_get_encry_by_bssid
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_fix_channel_by_bssid
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
</UL>

<P><STRONG><a name="[68f]"></a>hfsmtlk_list_find_ap_by_ssid</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hfsmtlk.o(i.hfsmtlk_list_find_ap_by_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hfsmtlk_list_find_ap_by_ssid &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
</UL>

<P><STRONG><a name="[364]"></a>hfsmtlk_list_find_ap_by_ssidcrc8</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hfsmtlk.o(i.hfsmtlk_list_find_ap_by_ssidcrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hfsmtlk_list_find_ap_by_ssidcrc8 &rArr; hfsmtlk_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_crc8
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
</UL>

<P><STRONG><a name="[67d]"></a>hfsmtlk_list_get_encry_by_bssid</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hfsmtlk.o(i.hfsmtlk_list_get_encry_by_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hfsmtlk_list_get_encry_by_bssid &rArr; hfsmtlk_list_find_ap_by_bssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[67c]"></a>hfsmtlk_list_get_index_by_bssid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hfsmtlk.o(i.hfsmtlk_list_get_index_by_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfsmtlk_list_get_index_by_bssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[35b]"></a>hfsmtlk_list_get_item</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hfsmtlk.o(i.hfsmtlk_list_get_item))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_check
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_check
</UL>

<P><STRONG><a name="[5ab]"></a>hfsmtlk_main_loop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hfsmtlk.o(i.hfsmtlk_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_main_loop &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_smartlink
</UL>

<P><STRONG><a name="[68c]"></a>hfsmtlk_parse_beacon_probe_rsp_packet</STRONG> (Thumb, 370 bytes, Stack size 264 bytes, hfsmtlk.o(i.hfsmtlk_parse_beacon_probe_rsp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_parse_beacon_probe_rsp_packet &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseWpaIE
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseRsnIE
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseCheckForWFAInfoElem
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_scan_callback
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_get_wpa
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_sniffer_data_recv
</UL>

<P><STRONG><a name="[689]"></a>hfsmtlk_reset</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, hfsmtlk.o(i.hfsmtlk_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_reset &rArr; smartlinkv7_reset &rArr; smartlinkv7_init &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_reset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_reset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[8d]"></a>hfsmtlk_scan_callback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hfsmtlk.o(i.hfsmtlk_scan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hfsmtlk_scan_callback &rArr; hfsmtlk_list_find_ap_by_bssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfsmtlk.o(i.hfsmtlk_default_main_loop)
</UL>
<P><STRONG><a name="[7fb]"></a>hfsmtlk_sniffer_data_recv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hfsmtlk.o(i.hfsmtlk_sniffer_data_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfsmtlk_sniffer_data_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxHandlingSnifferedPacket
</UL>

<P><STRONG><a name="[68b]"></a>hfsmtlk_sort_channel_list</STRONG> (Thumb, 446 bytes, Stack size 120 bytes, hfsmtlk.o(i.hfsmtlk_sort_channel_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_sort_channel_list &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[695]"></a>hfsmtlk_state_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hfsmtlk.o(i.hfsmtlk_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_state_init &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_disable_all_soft_watchdogs
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[491]"></a>hfsys_disable_all_soft_watchdogs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hfsys.o(i.hfsys_disable_all_soft_watchdogs))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_state_init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
</UL>

<P><STRONG><a name="[952]"></a>hfsys_enable_all_soft_watchdogs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hfsys.o(i.hfsys_enable_all_soft_watchdogs))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[3c2]"></a>hfsys_get_sdk_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hfsys.o(i.hfsys_get_sdk_version))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1f5]"></a>hfsys_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hfsys.o(i.hfsys_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_pin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_start_wps
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterruptInit
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settimeofday
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gettimeofday
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_process
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_fix_channel
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_check
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_check
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_check
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_time_query
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
</UL>

<P><STRONG><a name="[255]"></a>hfsys_reload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hfsys.o(i.hfsys_reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hfsys_reload &rArr; do_reload &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_failed
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld_query
</UL>

<P><STRONG><a name="[256]"></a>hfsys_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hfsys.o(i.hfsys_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = hfsys_reset &rArr; do_sysreset &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sysreset
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_z_query
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reld_query
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_equa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[555]"></a>hfsys_send_event</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hfsys.o(i.hfsys_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfsys_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_down
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[148]"></a>hfsys_softreset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hfsys.o(i.hfsys_softreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_trapfault_handler_dumpstack
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_softwatchdog_check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reset_flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_srst_query
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smtlk_query
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
</UL>

<P><STRONG><a name="[676]"></a>hfthread_create</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, hfthread.o(i.hfthread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = hfthread_create &rArr; AddTailEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTailEntrySList
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_uart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[697]"></a>hfthread_destroy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hfthread_destroy &rArr; RemoveEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntrySList
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_get_current_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[69b]"></a>hfthread_module_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hfthread.o(i.hfthread_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hfthread_module_init &rArr; InitializeSListTHead &rArr; hfthread_mutext_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeSListTHead
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>hfthread_mutext_new</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_mutext_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hfthread_mutext_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfat_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeSListTHead
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
</UL>

<P><STRONG><a name="[1ba]"></a>hfthread_mutext_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hfthread.o(i.hfthread_mutext_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfthread_mutext_unlock &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntrySList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTailEntrySList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[1b9]"></a>hfthread_mutext_wait</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_mutext_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntrySList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTailEntrySList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[624]"></a>hfthread_resume_all</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hfthread.o(i.hfthread_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = hfthread_resume_all &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[668]"></a>hfthread_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hfthread.o(i.hfthread_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hfthread_sem_free &rArr; sys_sem_free &rArr; sem_destroy &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
</UL>

<P><STRONG><a name="[666]"></a>hfthread_sem_new</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hfthread_sem_new &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
</UL>

<P><STRONG><a name="[667]"></a>hfthread_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hfthread.o(i.hfthread_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfthread_sem_signal &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
</UL>

<P><STRONG><a name="[66a]"></a>hfthread_sem_wait</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_recv
</UL>

<P><STRONG><a name="[14a]"></a>hfthread_softwatchdog_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_softwatchdog_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hfthread_softwatchdog_check &rArr; hfsys_softreset &rArr; do_softreset &rArr; FuartIOctl &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[620]"></a>hfthread_suspend_all</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hfthread.o(i.hfthread_suspend_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfthread_suspend_all &rArr; vTaskSuspendAll
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_testpin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[6a8]"></a>hftimer_adjust_external_rtc</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, hftimer.o(i.hftimer_adjust_external_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = hftimer_adjust_external_rtc &rArr; hftimer_adjust &rArr; Timer1Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
</UL>

<P><STRONG><a name="[24f]"></a>hftimer_auto_adjust</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hftimer.o(i.hftimer_auto_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = hftimer_auto_adjust &rArr; hftimer_adjust &rArr; Timer1Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_check_active
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[6ad]"></a>hftimer_create</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, hftimer.o(i.hftimer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hftimer_create &rArr; xTimerCreate &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_factor
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[6b1]"></a>hftimer_delete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hftimer.o(i.hftimer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hftimer_delete &rArr; hftimer_stop &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[625]"></a>hftimer_get_timer_adjust_factor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hftimer.o(i.hftimer_get_timer_adjust_factor))
<BR><BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
</UL>

<P><STRONG><a name="[6ab]"></a>hftimer_get_timer_adjust_reference</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hftimer.o(i.hftimer_get_timer_adjust_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = hftimer_get_timer_adjust_reference &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC48MHzTrimmedVal
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
</UL>

<P><STRONG><a name="[6b3]"></a>hftimer_init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, hftimer.o(i.hftimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hftimer_init &rArr; hftimer_get_timer_adjust_reference &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[266]"></a>hftimer_is_adjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hftimer.o(i.hftimer_is_adjust))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[6b5]"></a>hftimer_start</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hftimer.o(i.hftimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hftimer_start &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0HaltModeSet
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[152]"></a>hftimer_stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hftimer.o(i.hftimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hftimer_stop &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Close
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_delete
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Interrupt
</UL>

<P><STRONG><a name="[6aa]"></a>hftimer_update_timer_adjust_factor</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hftimer.o(i.hftimer_update_timer_adjust_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hftimer_update_timer_adjust_factor &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
</UL>

<P><STRONG><a name="[1f9]"></a>hfuart_get_adjust</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hfat.o(i.hfuart_get_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hfuart_get_adjust &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
</UL>

<P><STRONG><a name="[1fc]"></a>hfuart_open</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, hfuart.o(i.hfuart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = hfuart_open &rArr; MsgDelSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDelSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
</UL>

<P><STRONG><a name="[201]"></a>hfuart_recv</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hfuart.o(i.hfuart_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = hfuart_recv &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgEmptySet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgAddSet
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuart_recv_bytes
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFUartAdjust_recv
</UL>

<P><STRONG><a name="[1d0]"></a>hfuart_send</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hfuart.o(i.hfuart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hfuart_send &rArr; usart_send &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartSend
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_errn_query
</UL>

<P><STRONG><a name="[6b9]"></a>hfupdate_auto_upgrade</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hfupdate.o(i.hfupdate_auto_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = hfupdate_auto_upgrade &rArr; do_custom_upgrade &rArr; custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_upgrade
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade_default
</UL>

<P><STRONG><a name="[6ba]"></a>hfupdate_auto_upgrade_default</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hfupdate.o(i.hfupdate_auto_upgrade_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = hfupdate_auto_upgrade_default &rArr; hfupdate_auto_upgrade &rArr; do_custom_upgrade &rArr; custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_success_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[410]"></a>hfupdate_complete</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hfupdate.o(i.hfupdate_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = hfupdate_complete &rArr; success_update_flag &rArr; hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_wifi_fw
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
</UL>

<P><STRONG><a name="[6bd]"></a>hfupdate_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hfupdate.o(i.hfupdate_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = hfupdate_start &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[6be]"></a>hfupdate_write_file</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hfupdate.o(i.hfupdate_write_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hfupdate_write_file &rArr; flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[48f]"></a>hfwifi_enable_ap_idle_auto_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hfwifi.o(i.hfwifi_enable_ap_idle_auto_reset))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tx_datatrate
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
</UL>

<P><STRONG><a name="[68a]"></a>hfwifi_scan</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hfwifi.o(i.hfwifi_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = hfwifi_scan &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[983]"></a>hfwifi_scan_result_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hfwifi.o(i.hfwifi_scan_result_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hfwifi_scan_result_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
</UL>

<P><STRONG><a name="[6bf]"></a>hmac_md5</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, crypt.o(i.hmac_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
</UL>

<P><STRONG><a name="[6c0]"></a>hmac_md5_vector</STRONG> (Thumb, 204 bytes, Stack size 184 bytes, crypt.o(i.hmac_md5_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = hmac_md5_vector &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[6c2]"></a>hmac_sha1</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, crypt.o(i.hmac_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
</UL>

<P><STRONG><a name="[6c3]"></a>hmac_sha1_vector</STRONG> (Thumb, 204 bytes, Stack size 192 bytes, crypt.o(i.hmac_sha1_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
</UL>

<P><STRONG><a name="[6c5]"></a>hmac_sha256</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, crypt.o(i.hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_psk
</UL>

<P><STRONG><a name="[6c6]"></a>hmac_sha256_vector</STRONG> (Thumb, 194 bytes, Stack size 200 bytes, crypt.o(i.hmac_sha256_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[6ca]"></a>http_add_header</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, httpclient.o(i.http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = http_add_header &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[6cb]"></a>http_close_session</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, httpclient.o(i.http_close_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = http_close_session &rArr; hf_lwip_close &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_session_object
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[453]"></a>http_cmd_open_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart_cmd_http.o(i.http_cmd_open_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = http_cmd_open_session &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_httpdt
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt_query
</UL>

<P><STRONG><a name="[6cf]"></a>http_date_to_time</STRONG> (Thumb, 1832 bytes, Stack size 80 bytes, httpclient.o(i.http_date_to_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = http_date_to_time &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_from_string_short
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
</UL>

<P><STRONG><a name="[6d1]"></a>http_get_response_hdr</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, httpclient.o(i.http_get_response_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = http_get_response_hdr &rArr; prefetch_header &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefetch_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_content
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr_value
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[6d3]"></a>http_get_response_hdr_value</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, httpclient.o(i.http_get_response_hdr_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = http_get_response_hdr_value &rArr; http_get_response_hdr &rArr; prefetch_header &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_get_response_hdr_value
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[6d4]"></a>http_judge_url</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, httpc.o(i.http_judge_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = http_judge_url &rArr; http_get_response_hdr_value &rArr; http_get_response_hdr &rArr; prefetch_header &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_request
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_prepare_req
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_session
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr_value
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrdup
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
</UL>

<P><STRONG><a name="[6d6]"></a>http_open_session</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, httpclient.o(i.http_open_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = http_open_session &rArr; tcp_connect &rArr; tcp_socket &rArr; hf_lwip_socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_session_object
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_session_object
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[6d5]"></a>http_parse_URL</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, httpclient.o(i.http_parse_URL))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = http_parse_URL &rArr; _http_parse_URL &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_parse_URL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanitize_resource_name
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[6d7]"></a>http_prepare_req</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, httpclient.o(i.http_prepare_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = http_prepare_req &rArr; _http_prepare_req &rArr; sanitize_resource_name &rArr; http_parse_URL &rArr; _http_parse_URL &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[6de]"></a>http_read_content</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, httpclient.o(i.http_read_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = http_read_content &rArr; http_read_chunked &rArr; get_content_len &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_standard
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_no_special_len
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_chunked
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>

<P><STRONG><a name="[6d8]"></a>http_send_request</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, httpclient.o(i.http_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = http_send_request &rArr; _http_send_request &rArr; _http_raw_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_send_request
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[674]"></a>httpd_start</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, httpd.o(i.httpd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = httpd_start &rArr; hfthread_create &rArr; AddTailEntrySList &rArr; hfthread_mutext_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_httpd
</UL>

<P><STRONG><a name="[6e6]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[6e8]"></a>icmp_input</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6ed]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[6ee]"></a>ieee802_11_parse_elems</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, wpa.o(i.ieee802_11_parse_elems))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee802_11_parse_elems &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
</UL>

<P><STRONG><a name="[76f]"></a>igmp_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, igmp.o(i.igmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6f1]"></a>igmp_input</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6f5]"></a>igmp_joingroup</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
</UL>

<P><STRONG><a name="[6f8]"></a>igmp_leavegroup</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, igmp.o(i.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
</UL>

<P><STRONG><a name="[6f2]"></a>igmp_lookfor_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6fb]"></a>igmp_report_groups</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; LWIP_RAND &rArr; getSystime
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[6fc]"></a>igmp_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[6fe]"></a>igmp_tmr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, igmp.o(i.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
</UL>

<P><STRONG><a name="[9ad]"></a>inc_byte_array</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wpa.o(i.inc_byte_array))
<BR><BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
</UL>

<P><STRONG><a name="[6ea]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[6e9]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[701]"></a>inet_chksum_pseudo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[32a]"></a>initP2P</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gl_p2p_init.o(i.initP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = initP2P &rArr; wlanSubModRegisterInitExit
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModRegisterInitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[6cc]"></a>init_http_socket</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, uart_cmd_http.o(i.init_http_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = init_http_socket &rArr; hf_lwip_connect &rArr; lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_socket
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_connect
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddress
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>

<P><STRONG><a name="[704]"></a>init_wpaTask</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, wpa.o(i.init_wpaTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = init_wpaTask &rArr; eap_wsc_init &rArr; uuid_gen_mac_addr &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_worker_thread_exit_flags
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaAuthTimerInit
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[5d1]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[707]"></a>ip_frag</STRONG> (Thumb, 430 bytes, Stack size 96 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[5de]"></a>ip_input</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[6ec]"></a>ip_output</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[6eb]"></a>ip_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6f4]"></a>ip_output_if_opt</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ip.o(i.ip_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[70c]"></a>ip_reass</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[717]"></a>ip_reass_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[710]"></a>ip_route</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[20c]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_ntpser
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[233]"></a>ipaddr_aton</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, ip_addr.o(i.ipaddr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsdns
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_add
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>

<P><STRONG><a name="[209]"></a>ipaddr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip_addr.o(i.ipaddr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sdio_func
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_callback
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_ntpser
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_query
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_query
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
</UL>

<P><STRONG><a name="[718]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip_addr.o(i.ipaddr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[5a6]"></a>is_f_setting_ok</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, uart_cmd.o(i.is_f_setting_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_f_setting_ok &rArr; verify_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
</UL>

<P><STRONG><a name="[206]"></a>is_ipaddress</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, socket_thread.o(i.is_ipaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_ipaddress
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_ntpser
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_add
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>

<P><STRONG><a name="[267]"></a>is_rtc_valid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_cmd_time.o(i.is_rtc_valid))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_query
</UL>

<P><STRONG><a name="[533]"></a>kalCancelTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gl_kal.o(i.kalCancelTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
</UL>

<P><STRONG><a name="[60c]"></a>kalCfgDataRead16</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gl_init.o(i.kalCfgDataRead16))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = kalCfgDataRead16 &rArr; nvram_read
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRetrieveNetworkAddress
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetConfigurationVersion
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glLoadRegInfo
</UL>

<P><STRONG><a name="[71b]"></a>kalClearMgmtFrames</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, gl_kal.o(i.kalClearMgmtFrames))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = kalClearMgmtFrames &rArr; wlanReleaseCommand &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicOidCmdEnterRFTestTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[71d]"></a>kalClearMgmtFramesByNetType</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, gl_kal.o(i.kalClearMgmtFramesByNetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = kalClearMgmtFramesByNetType &rArr; wlanReleaseCommand &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
</UL>

<P><STRONG><a name="[71e]"></a>kalClearSecurityFrames</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, gl_kal.o(i.kalClearSecurityFrames))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = kalClearSecurityFrames &rArr; cmdBufFreeCmdInfo &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicOidCmdEnterRFTestTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[71f]"></a>kalClearSecurityFramesByNetType</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, gl_kal.o(i.kalClearSecurityFramesByNetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = kalClearSecurityFramesByNetType &rArr; cmdBufFreeCmdInfo &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
</UL>

<P><STRONG><a name="[720]"></a>kalDevPortRead</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gl_kal.o(i.kalDevPortRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = kalDevPortRead &rArr; sdio_readsb &rArr; SD_IORWHelper &rArr; SD_IOWriteExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxWaitResponse
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[722]"></a>kalDevPortWrite</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, gl_kal.o(i.kalDevPortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = kalDevPortWrite &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writesb
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_restart
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxCmd
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanImageSectionDownload
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
</UL>

<P><STRONG><a name="[725]"></a>kalDevRegRead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gl_kal.o(i.kalDevRegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readl
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxWaitResponse
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxPostInitialize
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessIST
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetFWOwn
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetMailbox
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanImageSectionDownload
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicVerifyChipID
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessAbnormalInterrupt
</UL>

<P><STRONG><a name="[727]"></a>kalDevRegWrite</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gl_kal.o(i.kalDevRegWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = kalDevRegWrite &rArr; sdio_writel &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxPostInitialize
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetFWOwn
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitializeAdapter
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicEnableInterrupt
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[729]"></a>kalDevWriteWithSdioCmd52</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gl_kal.o(i.kalDevWriteWithSdioCmd52))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = kalDevWriteWithSdioCmd52 &rArr; sdio_writeb &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicEnableInterrupt
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDisableInterrupt
</UL>

<P><STRONG><a name="[72b]"></a>kalEnqueueCommand</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gl_kal.o(i.kalEnqueueCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kalEnqueueCommand &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveKey
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestSetATInfo
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestQueryATInfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBeaconIETemplate
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
</UL>

<P><STRONG><a name="[72c]"></a>kalFirmwareImageMapping</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gl_kal.o(i.kalFirmwareImageMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kalFirmwareImageMapping &rArr; kalFirmwareSize &rArr; get_firmware_size &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFirmwareSize
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[72d]"></a>kalFirmwareSize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gl_kal.o(i.kalFirmwareSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kalFirmwareSize &rArr; get_firmware_size &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_size
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFirmwareImageMapping
</UL>

<P><STRONG><a name="[72e]"></a>kalFlushPendingTxPackets</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gl_kal.o(i.kalFlushPendingTxPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = kalFlushPendingTxPackets &rArr; kalSendCompleteAndAwakeQueue &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSendCompleteAndAwakeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicOidCmdEnterRFTestTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[7d9]"></a>kalGetConfiguration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gl_kal.o(i.kalGetConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[730]"></a>kalGetConfigurationVersion</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gl_kal.o(i.kalGetConfigurationVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kalGetConfigurationVersion &rArr; kalCfgDataRead16 &rArr; nvram_read
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalCfgDataRead16
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanLoadManufactureData
</UL>

<P><STRONG><a name="[7d2]"></a>kalGetMediaStateIndicated</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gl_kal.o(i.kalGetMediaStateIndicated))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidQueryBssid
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanClearScanningResult
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetDisassociate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssidListScan
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidQueryRssi
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicMediaStateChange
</UL>

<P><STRONG><a name="[7f8]"></a>kalGetTxPendingCmdCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gl_kal.o(i.kalGetTxPendingCmdCount))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
</UL>

<P><STRONG><a name="[822]"></a>kalGetTxPendingFrameCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gl_kal.o(i.kalGetTxPendingFrameCount))
<BR><BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanGetTxPendingFrameCount
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
</UL>

<P><STRONG><a name="[80e]"></a>kalHandleAssocInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_kal.o(i.kalHandleAssocInfo))
<BR><BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[731]"></a>kalIndicateStatusAndComplete</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gl_kal.o(i.kalIndicateStatusAndComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryInformation
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalScanDone
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGeneratePmkidIndication
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenMicErrorEvent
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetDisassociate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicMediaStateChange
</UL>

<P><STRONG><a name="[640]"></a>kalIoctl</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, gl_kal.o(i.kalIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_stop
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wait_for_completion
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_disconnect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_bssid
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_encode_ext
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_key
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_mode
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_get_mode
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_wext_set_key
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_ssid
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_switch_test_mode
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl_get
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl
</UL>

<P><STRONG><a name="[7d7]"></a>kalIsCardRemoved</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gl_kal.o(i.kalIsCardRemoved))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
</UL>

<P><STRONG><a name="[737]"></a>kalOidClearance</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gl_kal.o(i.kalOidClearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = kalOidClearance &rArr; __complete &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingOid
</UL>

<P><STRONG><a name="[738]"></a>kalOidCmdClearance</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, gl_kal.o(i.kalOidCmdClearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = kalOidCmdClearance &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingOid
</UL>

<P><STRONG><a name="[739]"></a>kalOidComplete</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gl_kal.o(i.kalOidComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidClearTimeoutCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidCmdClearance
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventQueryAddress
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingOid
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingCMDbyNetwork
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicOidCmdTimeoutCommon
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventSetCommon
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicOidCmdEnterRFTestTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventQueryRfTestATInfo
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventQueryLinkQuality
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[73b]"></a>kalOsTimerInitialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gl_kal.o(i.kalOsTimerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = kalOsTimerInitialize &rArr; xTimerCreate &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[85a]"></a>kalP2PCalWSC_IELen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PCalWSC_IELen))
<BR><BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateWSC_IEForBeacon
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCalculateWSC_IELenForBeacon
</UL>

<P><STRONG><a name="[838]"></a>kalP2PGCIndicateConnectionStatus</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, gl_p2p_kal.o(i.kalP2PGCIndicateConnectionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kalP2PGCIndicateConnectionStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionAbort
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>

<P><STRONG><a name="[73c]"></a>kalP2PGOStationUpdate</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gl_p2p_kal.o(i.kalP2PGOStationUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = kalP2PGOStationUpdate &rArr; handle_disassoc_info &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc_info
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionAbort
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAASuccess
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>

<P><STRONG><a name="[73d]"></a>kalP2PGenWSC_IE</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gl_p2p_kal.o(i.kalP2PGenWSC_IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kalP2PGenWSC_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateWSC_IEForBeacon
</UL>

<P><STRONG><a name="[8d1]"></a>kalP2PGetCcmpCipher</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PGetCcmpCipher))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateRSNIE
</UL>

<P><STRONG><a name="[3d7]"></a>kalP2PGetCipher</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PGetCipher))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
</UL>

<P><STRONG><a name="[993]"></a>kalP2PGetRole</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PGetRole))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveP2PKey
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddP2PKey
</UL>

<P><STRONG><a name="[8d3]"></a>kalP2PGetTkipCipher</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PGetTkipCipher))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateWPAIE
</UL>

<P><STRONG><a name="[8e7]"></a>kalP2PIndicateBssInfo</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, gl_p2p_kal.o(i.kalP2PIndicateBssInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kalP2PIndicateBssInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pProcessBeaconAndProbeResp
</UL>

<P><STRONG><a name="[86a]"></a>kalP2PIndicateChannelExpired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PIndicateChannelExpired))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_CHNL_ON_HAND
</UL>

<P><STRONG><a name="[86c]"></a>kalP2PIndicateChannelReady</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, gl_p2p_kal.o(i.kalP2PIndicateChannelReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kalP2PIndicateChannelReady
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_CHNL_ON_HAND
</UL>

<P><STRONG><a name="[843]"></a>kalP2PIndicateMgmtTxStatus</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, gl_p2p_kal.o(i.kalP2PIndicateMgmtTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kalP2PIndicateMgmtTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventMgmtFrameTxDone
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncTxMgmtFrame
</UL>

<P><STRONG><a name="[863]"></a>kalP2PIndicateRxMgmtFrame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PIndicateRxMgmtFrame))
<BR><BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateRxActionFrame
</UL>

<P><STRONG><a name="[86b]"></a>kalP2PIndicateScanDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PIndicateScanDone))
<BR><BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_SCAN
</UL>

<P><STRONG><a name="[85e]"></a>kalP2PSetCipher</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PSetCipher))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
</UL>

<P><STRONG><a name="[3dc]"></a>kalP2PUpdateAssocInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_p2p_kal.o(i.kalP2PUpdateAssocInfo))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
</UL>

<P><STRONG><a name="[73e]"></a>kalP2PUpdateWSC_IE</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gl_p2p_kal.o(i.kalP2PUpdateWSC_IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kalP2PUpdateWSC_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
</UL>

<P><STRONG><a name="[73f]"></a>kalPacketFree</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gl_kal.o(i.kalPacketFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSendCompleteAndAwakeQueue
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSecurityFrameSendComplete
</UL>

<P><STRONG><a name="[740]"></a>kalProcessRxPacket</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, gl_kal.o(i.kalProcessRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kalProcessRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalUpdateRxCSUMOffloadParam
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
</UL>

<P><STRONG><a name="[823]"></a>kalQoSFrameClassifierAndPacketInfo</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, gl_kal.o(i.kalQoSFrameClassifierAndPacketInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = kalQoSFrameClassifierAndPacketInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFillMsduInfo
</UL>

<P><STRONG><a name="[82a]"></a>kalQueryTxChksumOffloadParam</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_kal.o(i.kalQueryTxChksumOffloadParam))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
</UL>

<P><STRONG><a name="[742]"></a>kalRandomNumber</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gl_kal.o(i.kalRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kalRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncInitConnectionSettings
</UL>

<P><STRONG><a name="[743]"></a>kalRetrieveNetworkAddress</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gl_kal.o(i.kalRetrieveNetworkAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kalRetrieveNetworkAddress &rArr; kalCfgDataRead16 &rArr; nvram_read
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalCfgDataRead16
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
</UL>

<P><STRONG><a name="[744]"></a>kalRxIndicatePkts</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gl_kal.o(i.kalRxIndicatePkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = kalRxIndicatePkts &rArr; netif_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
</UL>

<P><STRONG><a name="[38d]"></a>kalScanDone</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gl_kal.o(i.kalScanDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = kalScanDone &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventScanDone
</UL>

<P><STRONG><a name="[747]"></a>kalSecurityFrameSendComplete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gl_kal.o(i.kalSecurityFrameSendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = kalSecurityFrameSendComplete &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalPacketFree
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSecurityFrameTxTimeout
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSecurityFrameTxDone
</UL>

<P><STRONG><a name="[72f]"></a>kalSendCompleteAndAwakeQueue</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gl_kal.o(i.kalSendCompleteAndAwakeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = kalSendCompleteAndAwakeQueue &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalPacketFree
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFlushPendingTxPackets
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
</UL>

<P><STRONG><a name="[748]"></a>kalSetEvent</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gl_kal.o(i.kalSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaUpdateFreeQuota
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaChangePsMode
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventBssAbsencePresence
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveKey
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestSetATInfo
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestQueryATInfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBeaconIETemplate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
</UL>

<P><STRONG><a name="[994]"></a>kalSetMediaStateIndicated</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gl_kal.o(i.kalSetMediaStateIndicated))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
</UL>

<P><STRONG><a name="[531]"></a>kalSetTimer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gl_kal.o(i.kalSetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerSetTimer
</UL>

<P><STRONG><a name="[e7]"></a>kalTimeoutHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gl_kal.o(i.kalTimeoutHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = kalTimeoutHandler &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_init.o(i.wlanInit)
</UL>
<P><STRONG><a name="[749]"></a>kalUpdateMACAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gl_kal.o(i.kalUpdateMACAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kalUpdateMACAddress &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventQueryAddress
</UL>

<P><STRONG><a name="[831]"></a>kalUpdateRSSI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_kal.o(i.kalUpdateRSSI))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateRSSI
</UL>

<P><STRONG><a name="[3e1]"></a>kalUpdateReAssocReqInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_kal.o(i.kalUpdateReAssocReqInfo))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
</UL>

<P><STRONG><a name="[741]"></a>kalUpdateRxCSUMOffloadParam</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_kal.o(i.kalUpdateRxCSUMOffloadParam))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalProcessRxPacket
</UL>

<P><STRONG><a name="[8d7]"></a>kalWSCGetActiveState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gl_kal.o(i.kalWSCGetActiveState))
<BR><BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnPerformPolicySelection
</UL>

<P><STRONG><a name="[380]"></a>linkAddTail</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, link.o(i.linkAddTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkAddTail
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__linkAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnInit
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchExistingBssDescWithSsid
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescsByPolicy
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescByBssid
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAllocateBssDesc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInsertRequest
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgStart
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssAddStaRecToClientList
</UL>

<P><STRONG><a name="[37c]"></a>linkDel</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, link.o(i.linkDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = linkDel
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssRemoveStaRecFromClientList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionAbort
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxRcvAllMsg
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchExistingBssDescWithSsid
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescsByPolicy
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescByBssid
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAllocateBssDesc
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmIsRequestPending
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmGetNextRequest
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmRemovePendingMsg
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>

<P><STRONG><a name="[22]"></a>linkToP2pCalculateP2P_IELenForAssocReq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bss.o(i.linkToP2pCalculateP2P_IELenForAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = linkToP2pCalculateP2P_IELenForAssocReq &rArr; p2pIECalculateP2P_IEForAssocReq
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIECalculateP2P_IEForAssocReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>linkToP2pCalculateP2P_IELenForAssocRsp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bss.o(i.linkToP2pCalculateP2P_IELenForAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = linkToP2pCalculateP2P_IELenForAssocRsp &rArr; p2pFuncCalculateP2p_IELenForAssocRsp &rArr; p2pFuncCalculateP2P_IELen
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCalculateP2p_IELenForAssocRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>linkToP2pCalculateP2P_IELenForBeacon</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bss.o(i.linkToP2pCalculateP2P_IELenForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = linkToP2pCalculateP2P_IELenForBeacon &rArr; p2pFuncCalculateP2p_IELenForBeacon
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncIsAPMode
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCalculateP2p_IELenForBeacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bss.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>linkToP2pCalculateWSC_IELenForBeacon</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bss.o(i.linkToP2pCalculateWSC_IELenForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = linkToP2pCalculateWSC_IELenForBeacon &rArr; p2pFuncCalculateWSC_IELenForBeacon
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCalculateWSC_IELenForBeacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bss.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>linkToP2pGenerateP2P_IEForAssocReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bss.o(i.linkToP2pGenerateP2P_IEForAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linkToP2pGenerateP2P_IEForAssocReq &rArr; p2pIEGenerateP2P_IEForAssocReq
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEGenerateP2P_IEForAssocReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>linkToP2pGenerateP2P_IEForAssocRsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bss.o(i.linkToP2pGenerateP2P_IEForAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = linkToP2pGenerateP2P_IEForAssocRsp &rArr; p2pFuncGenerateP2p_IEForAssocRsp &rArr; p2pFuncGenerateP2P_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2p_IEForAssocRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>linkToP2pGenerateP2P_IEForBeacon</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bss.o(i.linkToP2pGenerateP2P_IEForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linkToP2pGenerateP2P_IEForBeacon &rArr; p2pFuncGenerateP2p_IEForBeacon
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncIsAPMode
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2p_IEForBeacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bss.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>linkToP2pGenerateWSC_IEForBeacon</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bss.o(i.linkToP2pGenerateWSC_IEForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = linkToP2pGenerateWSC_IEForBeacon &rArr; p2pFuncGenerateWSC_IEForBeacon &rArr; kalP2PGenWSC_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateWSC_IEForBeacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bss.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>linkToRlmRspGenerateObssScanIE</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rlm.o(i.linkToRlmRspGenerateObssScanIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = linkToRlmRspGenerateObssScanIE &rArr; rlmRspGenerateObssScanIE &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateObssScanIE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> assoc.o(.data)
<LI> bss.o(.data)
</UL>
<P><STRONG><a name="[719]"></a>lock_clear_bit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gl_os.o(i.lock_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalCancelTimer
</UL>

<P><STRONG><a name="[261]"></a>lock_get_wifi_rec_flg_bit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa.o(i.lock_get_wifi_rec_flg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lock_get_wifi_rec_flg_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[262]"></a>lock_inc_wifi_rec_flg_bit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wpa.o(i.lock_inc_wifi_rec_flg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lock_inc_wifi_rec_flg_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[755]"></a>lock_set_bitn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gl_os.o(i.lock_set_bitn))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lock_set_bitn &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModInit
</UL>

<P><STRONG><a name="[263]"></a>lock_set_wifi_rec_flg_bit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa.o(i.lock_set_wifi_rec_flg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lock_set_wifi_rec_flg_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[756]"></a>lock_test_and_clear_bit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gl_os.o(i.lock_test_and_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lock_test_and_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[757]"></a>lock_test_bitn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gl_os.o(i.lock_test_bitn))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lock_test_bitn &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
</UL>

<P><STRONG><a name="[75d]"></a>lpb100_pin_set</STRONG> (Thumb, 1420 bytes, Stack size 16 bytes, uart_cmd_hex.o(i.lpb100_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lpb100_pin_set &rArr; pwm_enable &rArr; PwmConfigure &rArr; PwmEnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_Low
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_High
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioOutput
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioNoPull
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpioInput
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_need_change
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[637]"></a>lwip_accept</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, sockets.o(i.lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_accept
</UL>

<P><STRONG><a name="[232]"></a>lwip_bind</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>

<P><STRONG><a name="[638]"></a>lwip_close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[639]"></a>lwip_connect</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_connect
</UL>

<P><STRONG><a name="[767]"></a>lwip_gethostbyname</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, netdb.o(i.lwip_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_gethostbyname
</UL>

<P><STRONG><a name="[231]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ntp_packet
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[20d]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[768]"></a>lwip_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lwip_init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_init &rArr; mem_init &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[63b]"></a>lwip_listen</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sockets.o(i.lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_listen
</UL>

<P><STRONG><a name="[1db]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindAddress
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_time
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[58b]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[63d]"></a>lwip_recvfrom</STRONG> (Thumb, 586 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recvfrom
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>

<P><STRONG><a name="[219]"></a>lwip_select</STRONG> (Thumb, 740 bytes, Stack size 88 bytes, sockets.o(i.lwip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lwip_select &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_no_special_len
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
</UL>

<P><STRONG><a name="[21d]"></a>lwip_send</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_raw_send
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Send
</UL>

<P><STRONG><a name="[777]"></a>lwip_sendto</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_net_udp_write
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ntp_packet
</UL>

<P><STRONG><a name="[703]"></a>lwip_setsockopt</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>

<P><STRONG><a name="[63e]"></a>lwip_socket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_socket
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[76e]"></a>lwip_socket_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sockets.o(i.lwip_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1b7]"></a>m2m_assis_write</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, assis_thread.o(i.m2m_assis_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
</UL>

<P><STRONG><a name="[42e]"></a>m2m_assis_writen</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assis_thread.o(i.m2m_assis_writen))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = m2m_assis_writen &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd_query
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr_query
</UL>

<P><STRONG><a name="[77e]"></a>m2m_net_udp_write</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, uart_thread.o(i.m2m_net_udp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = m2m_net_udp_write &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
</UL>

<P><STRONG><a name="[77f]"></a>m2m_tcp_send</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, uart_thread.o(i.m2m_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = m2m_tcp_send &rArr; sock_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_content
</UL>

<P><STRONG><a name="[781]"></a>m2m_uart_config</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, mv_cm3_main.o(i.m2m_uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = m2m_uart_config &rArr; FuartInit &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baud_en2num
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_get_adjust
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_stop
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_parity
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_bits
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartTxIoConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartRxIoConfig
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRtsIoConfig
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartCtsIoConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFuartAndBuartSampleClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e3]"></a>m2m_uplog_post</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, assis_thread.o(i.m2m_uplog_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, mv_cm3_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = main &rArr; wifi_secu_cal_pmk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_pmk
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_ap_pmk
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTaskLauncher
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_kernel
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settimeofday
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_factor
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_module_init
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_state_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_zero
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_int
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_init
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_fs_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_check
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfat_init
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock_ex
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_start_parameter
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nvram
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgSetMode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgSetHaltMode
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Set
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1HaltModeSet
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LdoCfg
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleEn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInit
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_init
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEnNew
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLdoTrimValue
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>mboxDummy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hem_mbox.o(i.mboxDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mboxDummy &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gl_p2p_init.o(i.p2pUnregisterToWlan)
<LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[78e]"></a>mboxInitMsgMap</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, hem_mbox.o(i.mboxInitMsgMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mboxInitMsgMap
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxInitialize
</UL>

<P><STRONG><a name="[78d]"></a>mboxInitialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hem_mbox.o(i.mboxInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mboxInitialize &rArr; mboxSetup &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSetup
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxInitMsgMap
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitSystemService
</UL>

<P><STRONG><a name="[790]"></a>mboxRcvAllMsg</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hem_mbox.o(i.mboxRcvAllMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mboxRcvAllMsg &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessMboxMessage
</UL>

<P><STRONG><a name="[382]"></a>mboxSendMsg</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, hem_mbox.o(i.mboxSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_set_beacon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDisassoc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDeauth
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrHandleChEvent
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRetryJOIN
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRequestScan
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCancelScan
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncAcquireCh
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSsid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetDisassociate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetBssid
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_RetryJOIN
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateInit_JOIN
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_SCAN
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmReleaseCh
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmGenerateScanDoneMsg
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSendEventJoinComplete
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_GC_JOIN
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssTriggerScan
</UL>

<P><STRONG><a name="[78f]"></a>mboxSetup</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hem_mbox.o(i.mboxSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mboxSetup &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxInitialize
</UL>

<P><STRONG><a name="[6c1]"></a>md5_vector</STRONG> (Thumb, 60 bytes, Stack size 112 bytes, crypt.o(i.md5_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>

<P><STRONG><a name="[791]"></a>mem_free</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[76b]"></a>mem_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[574]"></a>mem_malloc</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[793]"></a>mem_trim</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[6fa]"></a>memp_free</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[76c]"></a>memp_init</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[586]"></a>memp_malloc</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init_local
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
</UL>

<P><STRONG><a name="[2a7]"></a>mmm_free</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, mmm.o(i.mmm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_deinit
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_config
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__do_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalPacketFree
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_p2p
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_update
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_3_of_4
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destroy
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl_get
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_serial_number
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_number
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_name
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_manufacturer
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_dev_name
</UL>

<P><STRONG><a name="[49c]"></a>mmm_ioctl</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mmm.o(i.mmm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmm_ioctl &rArr; _read_unlock_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_unlock_irq
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_lock_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>

<P><STRONG><a name="[221]"></a>mmm_malloc</STRONG> (Thumb, 694 bytes, Stack size 48 bytes, mmm.o(i.mmm_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_memzcmp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuartAsFuartFunc
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_config
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open_error
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsmac_ssid
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__do_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_p2p
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_key_config
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_start
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_3_of_4
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_security_data
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc_info
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_info
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_priv_do_ctrl_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_serial_number
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_number
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_name
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_manufacturer
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_dev_name
</UL>

<P><STRONG><a name="[56]"></a>mmm_print</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, mmm.o(i.mmm_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mmm_print &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_unlock_irq
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_lock_irq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmm.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[7ac]"></a>mqmFillAcQueParam</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, que_mgt.o(i.mqmFillAcQueParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mqmFillAcQueParam
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmParseEdcaParameters
</UL>

<P><STRONG><a name="[21]"></a>mqmGenerateWmmInfoIE</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, que_mgt.o(i.mqmGenerateWmmInfoIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mqmGenerateWmmInfoIE &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>mqmGenerateWmmParamIE</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, que_mgt.o(i.mqmGenerateWmmParamIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mqmGenerateWmmParamIE &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Address Reference Count : 4]<UL><LI> p2p_func.o(.data)
<LI> assoc.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[7ab]"></a>mqmParseEdcaParameters</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, que_mgt.o(i.mqmParseEdcaParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mqmParseEdcaParameters &rArr; mqmFillAcQueParam
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmFillAcQueParam
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocRsp
</UL>

<P><STRONG><a name="[3da]"></a>mqmProcessAssocReq</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, que_mgt.o(i.mqmProcessAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mqmProcessAssocReq &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
</UL>

<P><STRONG><a name="[3a1]"></a>mqmProcessAssocRsp</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, que_mgt.o(i.mqmProcessAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mqmProcessAssocRsp &rArr; nicQmUpdateWmmParms &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicQmUpdateWmmParms
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmParseEdcaParameters
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncUpdateBssInfoForJOIN
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisUpdateBssInfoForJOIN
</UL>

<P><STRONG><a name="[400]"></a>mqmProcessScanResult</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, que_mgt.o(i.mqmProcessScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mqmProcessScanResult &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssCreateStaRecFromBssDesc
</UL>

<P><STRONG><a name="[5a]"></a>msgq_debug</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, msgq.o(i.msgq_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = msgq_debug &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_unlock_irq
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_lock_irq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgq.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[1c0]"></a>msgq_msg_ioctl</STRONG> (Thumb, 836 bytes, Stack size 56 bytes, msgq.o(i.msgq_msg_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfillset
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDelSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgEmptySet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgAddSet
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[7b4]"></a>msgq_msg_notify_fromisr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, msgq.o(i.msgq_msg_notify_fromisr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msgq_msg_notify_fromisr &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
</UL>

<P><STRONG><a name="[1c9]"></a>msgq_msg_recv</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, msgq.o(i.msgq_msg_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = msgq_msg_recv &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuart_recv_bytes
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_interruptible
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[156]"></a>msgq_msg_send</STRONG> (Thumb, 860 bytes, Stack size 120 bytes, msgq.o(i.msgq_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = msgq_msg_send &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterruptHf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInterrupt
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wpa_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterrupt
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_security_data
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc_info
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_info
</UL>

<P><STRONG><a name="[157]"></a>msgq_msg_send_fromisr</STRONG> (Thumb, 834 bytes, Stack size 128 bytes, msgq.o(i.msgq_msg_send_fromisr))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterruptHf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInterrupt
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wpa_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterrupt
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_security_data
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc_info
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_info
</UL>

<P><STRONG><a name="[7b8]"></a>msgq_sleepon_msgqueue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, msgq.o(i.msgq_sleepon_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msgq_sleepon_msgqueue &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>

<P><STRONG><a name="[7b9]"></a>msgq_task_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, msgq.o(i.msgq_task_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = msgq_task_register &rArr; msgaddset
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgaddset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[7ba]"></a>msgq_task_unregister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msgq.o(i.msgq_task_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msgq_task_unregister
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[c0]"></a>msgq_tmrchk_cbfun</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, msgq.o(i.msgq_tmrchk_cbfun))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = msgq_tmrchk_cbfun &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.prvIdleTask)
</UL>
<P><STRONG><a name="[7bb]"></a>mtk_sdio_interrupt</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, gl_kal.o(i.mtk_sdio_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mtk_sdio_interrupt &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writel
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanIST
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_bitn
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevWriteWithSdioCmd52
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
</UL>

<P><STRONG><a name="[158]"></a>mvprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, print.o(i.mvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInterrupt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_kernel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_print
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reboot
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dsleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterrupt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_param_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__do_top
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_debug
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_top
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
</UL>

<P><STRONG><a name="[6d9]"></a>mystrdup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, httpc.o(i.mystrdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mystrdup &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
</UL>

<P><STRONG><a name="[5f5]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[77b]"></a>netbuf_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[7c0]"></a>netbuf_rcvb_data</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uart_cmd_lpb.o(i.netbuf_rcvb_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = netbuf_rcvb_data &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
</UL>

<P><STRONG><a name="[7c1]"></a>netbuf_recv_data</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.netbuf_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = netbuf_recv_data &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
</UL>

<P><STRONG><a name="[779]"></a>netbuf_ref</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[761]"></a>netconn_accept</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[33f]"></a>netconn_alloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; hfmsgq_create &rArr; hfmsgq_destroy &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[764]"></a>netconn_bind</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[766]"></a>netconn_connect</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[763]"></a>netconn_delete</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[765]"></a>netconn_disconnect</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, api_lib.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = netconn_disconnect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[349]"></a>netconn_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; sem_destroy &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[762]"></a>netconn_getaddr</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[208]"></a>netconn_gethostbyname</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hfopen_add
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http_socket
</UL>

<P><STRONG><a name="[771]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[77d]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[774]"></a>netconn_recv</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[773]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[772]"></a>netconn_recved</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, api_lib.o(i.netconn_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[77a]"></a>netconn_send</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[778]"></a>netconn_write</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, api_lib.o(i.netconn_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = netconn_write &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[5da]"></a>netif_add</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>

<P><STRONG><a name="[76d]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[734]"></a>netif_link_down</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ethernetif.o(i.netif_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = netif_link_down &rArr; handle_link_status_change &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
</UL>

<P><STRONG><a name="[733]"></a>netif_link_up</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, ethernetif.o(i.netif_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scantime
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan_param
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_get_channel
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_linked
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
</UL>

<P><STRONG><a name="[745]"></a>netif_rx</STRONG> (Thumb, 868 bytes, Stack size 48 bytes, ethernetif.o(i.netif_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = netif_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRxIndicatePkts
</UL>

<P><STRONG><a name="[7c6]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[5dd]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>

<P><STRONG><a name="[569]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[552]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[550]"></a>netif_set_ipaddr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[551]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[5db]"></a>netif_set_status_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_status_callback))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>

<P><STRONG><a name="[553]"></a>netif_set_up</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_reconfigure_interface
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[7cc]"></a>netsock_send</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, socket_thread.o(i.netsock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = netsock_send &rArr; m2m_tcp_send &rArr; sock_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_net_udp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_free
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_send_num
</UL>

<P><STRONG><a name="[7cd]"></a>netsockb_send</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uart_thread.o(i.netsockb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = netsockb_send &rArr; m2m_tcp_send &rArr; sock_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_net_udp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndb_num
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_free
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
</UL>

<P><STRONG><a name="[393]"></a>nicActivateNetwork</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, nic.o(i.nicActivateNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nicActivateNetwork &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconAbort
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glRegisterP2P
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>

<P><STRONG><a name="[7ce]"></a>nicAddScanResult</STRONG> (Thumb, 1992 bytes, Stack size 48 bytes, nic.o(i.nicAddScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = nicAddScanResult &rArr; wifi_wscan_print &rArr; print_wscan_one &rArr; wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_looking_for
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreeScanResultIE
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddScanResult
</UL>

<P><STRONG><a name="[986]"></a>nicAllocateAdapterMemory</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nic.o(i.nicAllocateAdapterMemory))
<BR><BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[39a]"></a>nicChannelNum2Freq</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, nic.o(i.nicChannelNum2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddScanResult
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
</UL>

<P><STRONG><a name="[f0]"></a>nicCmdEventEnterRfTest</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, nic_cmd_event.o(i.nicCmdEventEnterRfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = nicCmdEventEnterRfTest &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFlushPendingTxPackets
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIsCardRemoved
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetConfiguration
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortRead
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFrames
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFrames
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanLoadManufactureData
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxResetResource
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxRelease
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUninitMGMT
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicResetSystemService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wlanoidRftestSetTestMode)
</UL>
<P><STRONG><a name="[ed]"></a>nicCmdEventQueryAddress</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, nic_cmd_event.o(i.nicCmdEventQueryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = nicCmdEventQueryAddress &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalUpdateMACAddress
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wlanoidQueryCurrentAddr)
</UL>
<P><STRONG><a name="[ee]"></a>nicCmdEventQueryLinkQuality</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, nic_cmd_event.o(i.nicCmdEventQueryLinkQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = nicCmdEventQueryLinkQuality &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wlanoidQueryRssi)
</UL>
<P><STRONG><a name="[c2]"></a>nicCmdEventQueryRfTestATInfo</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nic_cmd_event.o(i.nicCmdEventQueryRfTestATInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = nicCmdEventQueryRfTestATInfo &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.rftestQueryATInfo)
</UL>
<P><STRONG><a name="[a9]"></a>nicCmdEventSetCommon</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nic_cmd_event.o(i.nicCmdEventSetCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = nicCmdEventSetCommon &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Address Reference Count : 9]<UL><LI> nic.o(i.nicConfigPowerSaveProfile)
<LI> wlan_p2p.o(i.wlanoidSetRemoveP2PKey)
<LI> p2p_func.o(i.p2pFuncMgmtFrameRegister)
<LI> wlan_oid.o(i.rftestSetATInfo)
<LI> wlan_oid.o(i.wlanoidSetAddKey)
<LI> wlan_oid.o(i.wlanoidSetCSUMOffload)
<LI> wlan_oid.o(i.wlanoidSetInfrastructureMode)
<LI> wlan_oid.o(i.wlanoidSetRemoveKey)
<LI> wlan_p2p.o(i.wlanoidSetAddP2PKey)
</UL>
<P><STRONG><a name="[7db]"></a>nicConfigPowerSaveProfile</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, nic.o(i.nicConfigPowerSaveProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nicConfigPowerSaveProfile &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[394]"></a>nicDeactivateNetwork</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, nic.o(i.nicDeactivateNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFramesByNetType
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaFreeAllStaByNetType
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmFreeAllByNetType
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreePendingTxMsduInfoByNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconAbort
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glUnregisterP2P
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>

<P><STRONG><a name="[7de]"></a>nicDisableInterrupt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nic.o(i.nicDisableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nicDisableInterrupt &rArr; kalDevWriteWithSdioCmd52 &rArr; sdio_writeb &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevWriteWithSdioCmd52
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[7df]"></a>nicEnableInterrupt</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, nic.o(i.nicEnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nicEnableInterrupt &rArr; kalDevWriteWithSdioCmd52 &rArr; sdio_writeb &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevWriteWithSdioCmd52
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanIST
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[7dd]"></a>nicFreePendingTxMsduInfoByNetwork</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, nic.o(i.nicFreePendingTxMsduInfoByNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nicFreePendingTxMsduInfoByNetwork &rArr; nicTxFreeMsduInfoPacket &rArr; kalSendCompleteAndAwakeQueue &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
</UL>

<P><STRONG><a name="[7cf]"></a>nicFreeScanResultIE</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, nic.o(i.nicFreeScanResultIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nicFreeScanResultIE
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
</UL>

<P><STRONG><a name="[39f]"></a>nicFreq2ChannelNum</STRONG> (Thumb, 828 bytes, Stack size 0 bytes, nic.o(i.nicFreq2ChannelNum))
<BR><BR>[Called By]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211func_channel_format_switch
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisInitializeConnectionSettings
</UL>

<P><STRONG><a name="[7e1]"></a>nicGetMailbox</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nic.o(i.nicGetMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nicGetMailbox &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPrintFirmwareAssertInfo
</UL>

<P><STRONG><a name="[7e2]"></a>nicGetPendingCmdInfo</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, nic.o(i.nicGetPendingCmdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nicGetPendingCmdInfo &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[7e3]"></a>nicGetPendingTxMsduInfo</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, nic.o(i.nicGetPendingTxMsduInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nicGetPendingTxMsduInfo &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[7ee]"></a>nicHifInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicHifInit))
<BR><BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitializeAdapter
</UL>

<P><STRONG><a name="[7e4]"></a>nicIncreaseCmdSeqNum</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nic.o(i.nicIncreaseCmdSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nicIncreaseCmdSeqNum &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSetMcuOscStableTime
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryPermanentAddress
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryNicCapability
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferFilter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveKey
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestSetATInfo
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestQueryATInfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBeaconIETemplate
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
</UL>

<P><STRONG><a name="[3e0]"></a>nicIncreaseTxSeqNum</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nic.o(i.nicIncreaseTxSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nicIncreaseTxSeqNum &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncTxMgmtFrame
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendAuthFrame
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocRespFrame
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanDone
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanExemptionRsp
</UL>

<P><STRONG><a name="[7d6]"></a>nicInitMGMT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nic.o(i.nicInitMGMT))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nicInitMGMT &rArr; aisInitializeConnectionSettings &rArr; secInit &rArr; secClearPmkid &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnInit
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisInitializeConnectionSettings
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmInit
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmInit
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFsmEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[7e8]"></a>nicInitSystemService</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nic.o(i.nicInitSystemService))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nicInitSystemService &rArr; mboxInitialize &rArr; mboxSetup &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufInitialize
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxInitialize
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitialize
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecInit
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[7eb]"></a>nicInitializeAdapter</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nic.o(i.nicInitializeAdapter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nicInitializeAdapter &rArr; nicVerifyChipID &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicVerifyChipID
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicMCRInit
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicHifInit
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[7ed]"></a>nicMCRInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicMCRInit))
<BR><BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitializeAdapter
</UL>

<P><STRONG><a name="[39d]"></a>nicMediaStateChange</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, nic.o(i.nicMediaStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
</UL>

<P><STRONG><a name="[ef]"></a>nicOidCmdEnterRFTestTimeout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nic_cmd_event.o(i.nicOidCmdEnterRFTestTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = nicOidCmdEnterRFTestTimeout &rArr; kalClearMgmtFrames &rArr; wlanReleaseCommand &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFlushPendingTxPackets
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFrames
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFrames
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wlanoidRftestSetTestMode)
</UL>
<P><STRONG><a name="[a8]"></a>nicOidCmdTimeoutCommon</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nic_cmd_event.o(i.nicOidCmdTimeoutCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = nicOidCmdTimeoutCommon &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Address Reference Count : 10]<UL><LI> nic.o(i.nicConfigPowerSaveProfile)
<LI> p2p_func.o(i.p2pFuncMgmtFrameRegister)
<LI> wlan_oid.o(i.rftestQueryATInfo)
<LI> wlan_oid.o(i.rftestSetATInfo)
<LI> wlan_oid.o(i.wlanoidQueryCurrentAddr)
<LI> wlan_oid.o(i.wlanoidQueryRssi)
<LI> wlan_oid.o(i.wlanoidSetAddKey)
<LI> wlan_oid.o(i.wlanoidSetCSUMOffload)
<LI> wlan_oid.o(i.wlanoidSetInfrastructureMode)
<LI> wlan_oid.o(i.wlanoidSetRemoveKey)
</UL>
<P><STRONG><a name="[36f]"></a>nicPmIndicateBssAbort</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, nic.o(i.nicPmIndicateBssAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nicPmIndicateBssAbort &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconAbort
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[7ef]"></a>nicPmIndicateBssConnected</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, nic.o(i.nicPmIndicateBssConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = nicPmIndicateBssConnected &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pProcessBeaconAndProbeResp
</UL>

<P><STRONG><a name="[7f0]"></a>nicPmIndicateBssCreated</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, nic.o(i.nicPmIndicateBssCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = nicPmIndicateBssCreated &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
</UL>

<P><STRONG><a name="[7f1]"></a>nicPrintFirmwareAssertInfo</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nic.o(i.nicPrintFirmwareAssertInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nicPrintFirmwareAssertInfo &rArr; nicGetMailbox &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetMailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessSoftwareInterrupt
</UL>

<P><STRONG><a name="[3b]"></a>nicProcessAbnormalInterrupt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nic.o(i.nicProcessAbnormalInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nicProcessAbnormalInterrupt &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic.o(.data)
</UL>
<P><STRONG><a name="[7f2]"></a>nicProcessIST</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nic.o(i.nicProcessIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nicProcessIST &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessIST_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanIST
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetFWOwn
</UL>

<P><STRONG><a name="[7f3]"></a>nicProcessIST_impl</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nic.o(i.nicProcessIST_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nicProcessIST_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessIST
</UL>

<P><STRONG><a name="[3e]"></a>nicProcessRxInterrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nic_rx.o(i.nicProcessRxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = nicProcessRxInterrupt &rArr; nicRxProcessRFBs &rArr; nicRxProcessEventPacket &rArr; scnEventScanDone &rArr; scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReceiveRFBs
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>nicProcessSoftwareInterrupt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nic.o(i.nicProcessSoftwareInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nicProcessSoftwareInterrupt &rArr; nicPrintFirmwareAssertInfo &rArr; nicGetMailbox &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPrintFirmwareAssertInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>nicProcessTxInterrupt</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, nic_tx.o(i.nicProcessTxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = nicProcessTxInterrupt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanGetTxPendingFrameCount
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetTxPendingCmdCount
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAdjustTcq
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReleaseResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic.o(.data)
</UL>
<P><STRONG><a name="[7ad]"></a>nicQmUpdateWmmParms</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, nic.o(i.nicQmUpdateWmmParms))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nicQmUpdateWmmParms &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocRsp
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
</UL>

<P><STRONG><a name="[7d5]"></a>nicResetSystemService</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicResetSystemService))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[803]"></a>nicRxFillChksumStatus</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, nic_rx.o(i.nicRxFillChksumStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicRxFillChksumStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
</UL>

<P><STRONG><a name="[802]"></a>nicRxFillRFB</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nic_rx.o(i.nicRxFillRFB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicRxFillRFB
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessMgmtPacket
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
</UL>

<P><STRONG><a name="[7fa]"></a>nicRxHandlingSnifferedPacket</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, nic_rx.o(i.nicRxHandlingSnifferedPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nicRxHandlingSnifferedPacket &rArr; nicRxReturnRFB &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_sniffer_data_recv
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
</UL>

<P><STRONG><a name="[7fc]"></a>nicRxInitialize</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nic_rx.o(i.nicRxInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nicRxInitialize &rArr; nicRxReturnRFB &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[7fd]"></a>nicRxPostInitialize</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nic_rx.o(i.nicRxPostInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nicRxPostInitialize &rArr; kalDevRegWrite &rArr; sdio_writel &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[11]"></a>nicRxProcessActionFrame</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nic_rx.o(i.nicRxProcessActionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = nicRxProcessActionFrame &rArr; rlmProcessHtAction &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessPublicAction
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessHtAction
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateRxActionFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[801]"></a>nicRxProcessDataPacket</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, nic_rx.o(i.nicRxProcessDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = nicRxProcessDataPacket &rArr; secCheckClassError &rArr; authSendDeauthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_security_data
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCheckClassError
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleRxPackets
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxFillRFB
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxFillChksumStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
</UL>

<P><STRONG><a name="[809]"></a>nicRxProcessEventPacket</STRONG> (Thumb, 1392 bytes, Stack size 48 bytes, nic_rx.o(i.nicRxProcessEventPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = nicRxProcessEventPacket &rArr; scnEventScanDone &rArr; scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalHandleAssocInfo
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnEventScanDone
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnTkipHandleMICFailure
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmHandleObssStatusEventPkt
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaUpdateFreeQuota
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaChangePsMode
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventRxDelBa
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventRxAddBa
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventBssAbsencePresence
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconTimeout
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateLinkQuality
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPendingTxMsduInfo
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPendingCmdInfo
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrHandleChEvent
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssRemoveStaRecFromClientList
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisBssBeaconTimeout
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
</UL>

<P><STRONG><a name="[807]"></a>nicRxProcessForwardPkt</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nic_rx.o(i.nicRxProcessForwardPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalProcessRxPacket
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmEnqueueTxPackets
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFillMsduInfo
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedSwRfb
</UL>

<P><STRONG><a name="[808]"></a>nicRxProcessGOBroadcastPkt</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, nic_rx.o(i.nicRxProcessGOBroadcastPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxFillRFB
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedSwRfb
</UL>

<P><STRONG><a name="[819]"></a>nicRxProcessMgmtPacket</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nic_rx.o(i.nicRxProcessMgmtPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nicRxProcessMgmtPacket &rArr; nicRxReturnRFB &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxFillRFB
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessRFBs
</UL>

<P><STRONG><a name="[806]"></a>nicRxProcessPktWithoutReorder</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nic_rx.o(i.nicRxProcessPktWithoutReorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nicRxProcessPktWithoutReorder &rArr; kalProcessRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalProcessRxPacket
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmGetRxReorderQueuedBufferCount
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxSetupRFB
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedSwRfb
</UL>

<P><STRONG><a name="[7f5]"></a>nicRxProcessRFBs</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, nic_rx.o(i.nicRxProcessRFBs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = nicRxProcessRFBs &rArr; nicRxProcessEventPacket &rArr; scnEventScanDone &rArr; scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRxIndicatePkts
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessMgmtPacket
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxHandlingSnifferedPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessRxInterrupt
</UL>

<P><STRONG><a name="[81c]"></a>nicRxReadBuffer</STRONG> (Thumb, 698 bytes, Stack size 72 bytes, nic_rx.o(i.nicRxReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = nicRxReadBuffer &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_int
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReceiveRFBs
</UL>

<P><STRONG><a name="[7f4]"></a>nicRxReceiveRFBs</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, nic_rx.o(i.nicRxReceiveRFBs))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = nicRxReceiveRFBs &rArr; nicRxReadBuffer &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessRxInterrupt
</UL>

<P><STRONG><a name="[38a]"></a>nicRxReturnRFB</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, nic_rx.o(i.nicRxReturnRFB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nicRxReturnRFB &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReceiveRFBs
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessMgmtPacket
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxInitialize
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxHandlingSnifferedPacket
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedSwRfb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDelRxBaEntry
</UL>

<P><STRONG><a name="[81b]"></a>nicRxSetupRFB</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nic_rx.o(i.nicRxSetupRFB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nicRxSetupRFB &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
</UL>

<P><STRONG><a name="[81d]"></a>nicRxWaitResponse</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, nic_rx.o(i.nicRxWaitResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nicRxWaitResponse &rArr; kalDevPortRead &rArr; sdio_readsb &rArr; SD_IORWHelper &rArr; SD_IOWriteExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryPermanentAddress
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryNicCapability
</UL>

<P><STRONG><a name="[98d]"></a>nicSetAvailablePhyTypeSet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, nic.o(i.nicSetAvailablePhyTypeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicSetAvailablePhyTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[81e]"></a>nicTxAcquireResource</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nic_tx.o(i.nicTxAcquireResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nicTxAcquireResource &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduInfoList
</UL>

<P><STRONG><a name="[7f7]"></a>nicTxAdjustTcq</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, nic_tx.o(i.nicTxAdjustTcq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nicTxAdjustTcq &rArr; qmAdjustTcQuotas
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmAdjustTcQuotas
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
</UL>

<P><STRONG><a name="[820]"></a>nicTxCmd</STRONG> (Thumb, 682 bytes, Stack size 72 bytes, nic_tx.o(i.nicTxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = nicTxCmd &rArr; kalDevPortWrite &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortWrite
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
</UL>

<P><STRONG><a name="[3e2]"></a>nicTxEnqueueMsdu</STRONG> (Thumb, 464 bytes, Stack size 72 bytes, nic_tx.o(i.nicTxEnqueueMsdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetTxPendingFrameCount
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmEnqueueTxPackets
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxGetFreeCmdCount
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncTxMgmtFrame
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendAuthFrame
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocRespFrame
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanDone
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanExemptionRsp
</UL>

<P><STRONG><a name="[816]"></a>nicTxFillMsduInfo</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, nic_tx.o(i.nicTxFillMsduInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nicTxFillMsduInfo &rArr; kalQoSFrameClassifierAndPacketInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalQoSFrameClassifierAndPacketInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
</UL>

<P><STRONG><a name="[824]"></a>nicTxFlush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nic_tx.o(i.nicTxFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nicTxFlush &rArr; nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmFlushTxQueues
</UL>
<BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxRelease
</UL>

<P><STRONG><a name="[7e0]"></a>nicTxFreeMsduInfoPacket</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nic_tx.o(i.nicTxFreeMsduInfoPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nicTxFreeMsduInfoPacket &rArr; kalSendCompleteAndAwakeQueue &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSendCompleteAndAwakeQueue
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFlush
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedMsduInfo
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreePendingTxMsduInfoByNetwork
</UL>

<P><STRONG><a name="[821]"></a>nicTxGetFreeCmdCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nic_tx.o(i.nicTxGetFreeCmdCount))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
</UL>

<P><STRONG><a name="[8ad]"></a>nicTxGetResource</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nic_tx.o(i.nicTxGetResource))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmGetFrameAction
</UL>

<P><STRONG><a name="[826]"></a>nicTxInitialize</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, nic_tx.o(i.nicTxInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nicTxInitialize &rArr; nicTxResetResource &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxResetResource
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[828]"></a>nicTxMsduInfoList</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, nic_tx.o(i.nicTxMsduInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = nicTxMsduInfoList &rArr; nicTxMsduQueue &rArr; kalDevPortWrite &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAcquireResource
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
</UL>

<P><STRONG><a name="[829]"></a>nicTxMsduQueue</STRONG> (Thumb, 708 bytes, Stack size 96 bytes, nic_tx.o(i.nicTxMsduQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = nicTxMsduQueue &rArr; kalDevPortWrite &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSendCompleteAndAwakeQueue
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalQueryTxChksumOffloadParam
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortWrite
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduInfoList
</UL>

<P><STRONG><a name="[82b]"></a>nicTxPollingResource</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nic_tx.o(i.nicTxPollingResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_restart
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIsCardRemoved
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReleaseResource
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
</UL>

<P><STRONG><a name="[7d3]"></a>nicTxRelease</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nic_tx.o(i.nicTxRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nicTxRelease &rArr; nicTxFlush &rArr; nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicOidCmdEnterRFTestTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[7f6]"></a>nicTxReleaseResource</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, nic_tx.o(i.nicTxReleaseResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nicTxReleaseResource &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
</UL>

<P><STRONG><a name="[7d8]"></a>nicTxResetResource</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nic_tx.o(i.nicTxResetResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nicTxResetResource &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxInitialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[818]"></a>nicTxReturnMsduInfo</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nic_tx.o(i.nicTxReturnMsduInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReturnPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFlush
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedMsduInfo
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduQueue
</UL>

<P><STRONG><a name="[7d4]"></a>nicUninitMGMT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nic.o(i.nicUninitMGMT))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = nicUninitMGMT &rArr; rlmFsmEventUninit &rArr; rlmBssReset &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnUninit
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmUninit
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmUninit
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFsmEventUninit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[406]"></a>nicUpdateBeaconIETemplate</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, nic.o(i.nicUpdateBeaconIETemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = nicUpdateBeaconIETemplate &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
</UL>

<P><STRONG><a name="[376]"></a>nicUpdateBss</STRONG> (Thumb, 408 bytes, Stack size 128 bytes, nic.o(i.nicUpdateBss))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncIsAPMode
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearSecurityFramesByNetType
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetCipher
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssClearClientList
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaFreeAllStaByNetType
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillSyncCmdParam
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmFreeAllByNetType
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventDeauthTxDone
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncUpdateBssInfoForJOIN
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisUpdateBssInfoForJOIN
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAAComplete
</UL>

<P><STRONG><a name="[80c]"></a>nicUpdateLinkQuality</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nic.o(i.nicUpdateLinkQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nicUpdateLinkQuality &rArr; nicUpdateRSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateRSSI
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateLinkSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[830]"></a>nicUpdateLinkSpeed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nic.o(i.nicUpdateLinkSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateLinkSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateLinkQuality
</UL>

<P><STRONG><a name="[385]"></a>nicUpdateRSSI</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nic.o(i.nicUpdateRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nicUpdateRSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalUpdateRSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateLinkQuality
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
</UL>

<P><STRONG><a name="[52c]"></a>nicUpdateRateParams</STRONG> (Thumb, 1834 bytes, Stack size 24 bytes, nic.o(i.nicUpdateRateParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nicUpdateRateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendUpdateCmd
</UL>

<P><STRONG><a name="[832]"></a>nicUpdateTxPower</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, nic.o(i.nicUpdateTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nicUpdateTxPower &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanLoadManufactureData
</UL>

<P><STRONG><a name="[7ec]"></a>nicVerifyChipID</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nic.o(i.nicVerifyChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nicVerifyChipID &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitializeAdapter
</UL>

<P><STRONG><a name="[7bc]"></a>nicpmSetDriverOwn</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nic_pwr_mgt.o(i.nicpmSetDriverOwn))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = nicpmSetDriverOwn &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanIST
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAcquirePowerControl
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[833]"></a>nicpmSetFWOwn</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, nic_pwr_mgt.o(i.nicpmSetFWOwn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nicpmSetFWOwn &rArr; nicProcessIST &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessIST
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePowerControl
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanIST
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[409]"></a>nvram_commit</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, uart_cmd.o(i.nvram_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fmap_check
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_set_level
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_pmk
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_ap_pmk
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_language
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wsssid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wap
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wann
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_lann
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wpsbtnen
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_walkind
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wadhcpd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_udplcpt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_smtlk_setup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_ntpser
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_modechange
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_dbgl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_para_end
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_finished_ok
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upurl
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_equa
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_equa
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_equa
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_equa
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_equa
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_equa
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_equa
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_equa
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_equa
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_equa
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_equa
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_equa
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[60e]"></a>p2PAllocInfo</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, gl_p2p.o(i.p2PAllocInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = p2PAllocInfo &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glRegisterP2P
</UL>

<P><STRONG><a name="[613]"></a>p2PFreeInfo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_p2p.o(i.p2PFreeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = p2PFreeInfo &rArr; scanRemoveAllP2pBssDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveAllP2pBssDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glUnregisterP2P
</UL>

<P><STRONG><a name="[3d0]"></a>p2pBuildReAssocReqFrameCommonIEs</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, p2p_assoc.o(i.p2pBuildReAssocReqFrameCommonIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p2pBuildReAssocReqFrameCommonIEs
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocReqFrameCommonIEs
</UL>

<P><STRONG><a name="[60f]"></a>p2pFsmInit</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pFsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = p2pFsmInit &rArr; cnmMgtPktAlloc &rArr; cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetDataRatesFromRateSet
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glRegisterP2P
</UL>

<P><STRONG><a name="[836]"></a>p2pFsmRunEventAbort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pFsmRunEventAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanRequest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChannelRequest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconUpdate
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventStartAP
</UL>

<P><STRONG><a name="[b6]"></a>p2pFsmRunEventBeaconAbort</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pFsmRunEventBeaconAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventBeaconAbort &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicActivateNetwork
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssAborted
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[813]"></a>p2pFsmRunEventBeaconTimeout</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pFsmRunEventBeaconTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventBeaconTimeout &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGCIndicateConnectionStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[b5]"></a>p2pFsmRunEventBeaconUpdate</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, p2p_fsm.o(i.p2pFsmRunEventBeaconUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventBeaconUpdate &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncBeaconUpdate
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmPreferredChannel
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[ad]"></a>p2pFsmRunEventChGrant</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, p2p_fsm.o(i.p2pFsmRunEventChGrant))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventChGrant &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[b8]"></a>p2pFsmRunEventChannelAbort</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pFsmRunEventChannelAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventChannelAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[b7]"></a>p2pFsmRunEventChannelRequest</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, p2p_fsm.o(i.p2pFsmRunEventChannelRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventChannelRequest &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[b3]"></a>p2pFsmRunEventConnectionAbort</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, p2p_fsm.o(i.p2pFsmRunEventConnectionAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventConnectionAbort &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGOStationUpdate
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGCIndicateConnectionStatus
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[b2]"></a>p2pFsmRunEventConnectionRequest</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, p2p_fsm.o(i.p2pFsmRunEventConnectionRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventConnectionRequest &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pSearchDesc
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[ab]"></a>p2pFsmRunEventDeauthTxDone</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, p2p_fsm.o(i.p2pFsmRunEventDeauthTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventDeauthTxDone &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncResetStaRecStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_func.o(i.p2pFuncDisconnect)
</UL>
<P><STRONG><a name="[b9]"></a>p2pFsmRunEventDissolve</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pFsmRunEventDissolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = p2pFsmRunEventDissolve &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[aa]"></a>p2pFsmRunEventFsmTimeout</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pFsmRunEventFsmTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventFsmTimeout &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_fsm.o(i.p2pFsmInit)
</UL>
<P><STRONG><a name="[af]"></a>p2pFsmRunEventJoinComplete</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, p2p_fsm.o(i.p2pFsmRunEventJoinComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventJoinComplete &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncUpdateBssInfoForJOIN
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRetryJOIN
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGCIndicateConnectionStatus
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[ba]"></a>p2pFsmRunEventMgmtFrameRegister</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pFsmRunEventMgmtFrameRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = p2pFsmRunEventMgmtFrameRegister &rArr; p2pFuncMgmtFrameRegister &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncMgmtFrameRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[b4]"></a>p2pFsmRunEventMgmtFrameTx</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, p2p_fsm.o(i.p2pFsmRunEventMgmtFrameTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = p2pFsmRunEventMgmtFrameTx &rArr; p2pFuncTxMgmtFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncTxMgmtFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[ac]"></a>p2pFsmRunEventMgmtFrameTxDone</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, p2p_fsm.o(i.p2pFsmRunEventMgmtFrameTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = p2pFsmRunEventMgmtFrameTxDone &rArr; kalP2PIndicateMgmtTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateMgmtTxStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_func.o(i.p2pFuncTxMgmtFrame)
</UL>
<P><STRONG><a name="[844]"></a>p2pFsmRunEventRxDeauthentication</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, p2p_fsm.o(i.p2pFsmRunEventRxDeauthentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventRxDeauthentication &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authProcessRxDeauthFrame
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGOStationUpdate
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGCIndicateConnectionStatus
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDeauth
</UL>

<P><STRONG><a name="[845]"></a>p2pFsmRunEventRxDisassociation</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, p2p_fsm.o(i.p2pFsmRunEventRxDisassociation))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventRxDisassociation &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxDisassocFrame
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGOStationUpdate
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGCIndicateConnectionStatus
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxDisassoc
</UL>

<P><STRONG><a name="[ae]"></a>p2pFsmRunEventScanDone</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, p2p_fsm.o(i.p2pFsmRunEventScanDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventScanDone &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncKeepOnConnection
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[b1]"></a>p2pFsmRunEventScanRequest</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, p2p_fsm.o(i.p2pFsmRunEventScanRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventScanRequest &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[39]"></a>p2pFsmRunEventStartAP</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, p2p_fsm.o(i.p2pFsmRunEventStartAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventStartAP &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmPreferredChannel
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>p2pFsmRunEventSwitchOPMode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pFsmRunEventSwitchOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = p2pFsmRunEventSwitchOPMode &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[3a]"></a>p2pFsmRunEventUpdateMgmtFrame</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pFsmRunEventUpdateMgmtFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = p2pFsmRunEventUpdateMgmtFrame &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[837]"></a>p2pFsmStateTransition</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, p2p_fsm.o(i.p2pFsmStateTransition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncAcquireCh
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_SCAN
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_IDLE
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_GC_JOIN
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_CHNL_ON_HAND
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_AP_CHANNEL_DETECT
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_SCAN
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_REQING_CHANNEL
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_IDLE
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_GC_JOIN
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_CHNL_ON_HAND
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_AP_CHANNEL_DETECT
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanRequest
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanDone
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChannelRequest
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChannelAbort
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventChGrant
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconUpdate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventStartAP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventFsmTimeout
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
</UL>

<P><STRONG><a name="[612]"></a>p2pFsmUninit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pFsmUninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = p2pFsmUninit &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePowerControl
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAcquirePowerControl
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFramesByNetType
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePendingCMDbyNetwork
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glUnregisterP2P
</UL>

<P><STRONG><a name="[84f]"></a>p2pFuncAcquireCh</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncAcquireCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = p2pFuncAcquireCh &rArr; p2pFuncReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[13]"></a>p2pFuncAppendAttriExtListenTiming</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, p2p_func.o(i.p2pFuncAppendAttriExtListenTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = p2pFuncAppendAttriExtListenTiming
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_func.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>p2pFuncAppendAttriStatusForAssocRsp</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, p2p_func.o(i.p2pFuncAppendAttriStatusForAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p2pFuncAppendAttriStatusForAssocRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_func.o(.data)
</UL>
<P><STRONG><a name="[839]"></a>p2pFuncBeaconUpdate</STRONG> (Thumb, 188 bytes, Stack size 664 bytes, p2p_func.o(i.p2pFuncBeaconUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = p2pFuncBeaconUpdate &rArr; p2pFuncParseBeaconContent &rArr; rsnParseRsnIE
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconUpdate
</UL>

<P><STRONG><a name="[859]"></a>p2pFuncCalculateP2P_IELen</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, p2p_func.o(i.p2pFuncCalculateP2P_IELen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = p2pFuncCalculateP2P_IELen
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCalculateP2p_IELenForAssocRsp
</UL>

<P><STRONG><a name="[74d]"></a>p2pFuncCalculateP2p_IELenForAssocRsp</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, p2p_func.o(i.p2pFuncCalculateP2p_IELenForAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = p2pFuncCalculateP2p_IELenForAssocRsp &rArr; p2pFuncCalculateP2P_IELen
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCalculateP2P_IELen
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pCalculateP2P_IELenForAssocRsp
</UL>

<P><STRONG><a name="[74e]"></a>p2pFuncCalculateP2p_IELenForBeacon</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncCalculateP2p_IELenForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p2pFuncCalculateP2p_IELenForBeacon
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pCalculateP2P_IELenForBeacon
</UL>

<P><STRONG><a name="[74f]"></a>p2pFuncCalculateWSC_IELenForBeacon</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncCalculateWSC_IELenForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p2pFuncCalculateWSC_IELenForBeacon
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PCalWSC_IELen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pCalculateWSC_IELenForBeacon
</UL>

<P><STRONG><a name="[85b]"></a>p2pFuncCancelScan</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncCancelScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = p2pFuncCancelScan &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_SCAN
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_AP_CHANNEL_DETECT
</UL>

<P><STRONG><a name="[814]"></a>p2pFuncDisconnect</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, p2p_func.o(i.p2pFuncDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssAborted
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssAbort
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncResetStaRecStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconTimeout
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionAbort
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRunEventAAATxFail
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>

<P><STRONG><a name="[85c]"></a>p2pFuncDissolve</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, p2p_func.o(i.p2pFuncDissolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePowerControl
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAcquirePowerControl
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
</UL>

<P><STRONG><a name="[85d]"></a>p2pFuncGenerateP2P_IE</STRONG> (Thumb, 206 bytes, Stack size 312 bytes, p2p_func.o(i.p2pFuncGenerateP2P_IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = p2pFuncGenerateP2P_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2p_IEForAssocRsp
</UL>

<P><STRONG><a name="[751]"></a>p2pFuncGenerateP2p_IEForAssocRsp</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, p2p_func.o(i.p2pFuncGenerateP2p_IEForAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = p2pFuncGenerateP2p_IEForAssocRsp &rArr; p2pFuncGenerateP2P_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncGenerateP2P_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pGenerateP2P_IEForAssocRsp
</UL>

<P><STRONG><a name="[752]"></a>p2pFuncGenerateP2p_IEForBeacon</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, p2p_func.o(i.p2pFuncGenerateP2p_IEForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p2pFuncGenerateP2p_IEForBeacon
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pGenerateP2P_IEForBeacon
</UL>

<P><STRONG><a name="[753]"></a>p2pFuncGenerateWSC_IEForBeacon</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, p2p_func.o(i.p2pFuncGenerateWSC_IEForBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = p2pFuncGenerateWSC_IEForBeacon &rArr; kalP2PGenWSC_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGenWSC_IE
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PCalWSC_IELen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pGenerateWSC_IEForBeacon
</UL>

<P><STRONG><a name="[610]"></a>p2pFuncInitConnectionSettings</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, p2p_func.o(i.p2pFuncInitConnectionSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = p2pFuncInitConnectionSettings &rArr; kalRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRandomNumber
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glRegisterP2P
</UL>

<P><STRONG><a name="[521]"></a>p2pFuncIsAPMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, p2p_func.o(i.p2pFuncIsAPMode))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmAisInfraChannelFixed
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pGenerateP2P_IEForBeacon
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pCalculateP2P_IELenForBeacon
</UL>

<P><STRONG><a name="[846]"></a>p2pFuncKeepOnConnection</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, p2p_func.o(i.p2pFuncKeepOnConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = p2pFuncKeepOnConnection &rArr; scanP2pSearchDesc &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pSearchDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventScanDone
</UL>

<P><STRONG><a name="[841]"></a>p2pFuncMgmtFrameRegister</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, p2p_func.o(i.p2pFuncMgmtFrameRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = p2pFuncMgmtFrameRegister &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventMgmtFrameRegister
</UL>

<P><STRONG><a name="[858]"></a>p2pFuncParseBeaconContent</STRONG> (Thumb, 620 bytes, Stack size 120 bytes, p2p_func.o(i.p2pFuncParseBeaconContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = p2pFuncParseBeaconContent &rArr; rsnParseRsnIE
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseRsnIE
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseCheckForWFAInfoElem
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PUpdateWSC_IE
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PSetCipher
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetCipher
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseCheckForP2PInfoElem
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncBeaconUpdate
</UL>

<P><STRONG><a name="[3d9]"></a>p2pFuncParseCheckForP2PInfoElem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncParseCheckForP2PInfoElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p2pFuncParseCheckForP2PInfoElem
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
</UL>

<P><STRONG><a name="[85f]"></a>p2pFuncProcessP2pProbeRsp</STRONG> (Thumb, 622 bytes, Stack size 72 bytes, p2p_func.o(i.p2pFuncProcessP2pProbeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = p2pFuncProcessP2pProbeRsp &rArr; cnmMgtPktAlloc &rArr; cnmMemAlloc &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseCheckForWFAInfoElem
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PUpdateWSC_IE
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGenWSC_IE
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PCalWSC_IELen
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssComposeBeaconProbeRespFrameHeaderAndFF
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssBuildBeaconProbeRespFrameCommonIEs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseCheckForP2PInfoElem
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncTxMgmtFrame
</UL>

<P><STRONG><a name="[83e]"></a>p2pFuncReleaseCh</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncReleaseCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = p2pFuncReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncAcquireCh
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_REQING_CHANNEL
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_IDLE
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_GC_JOIN
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_CHNL_ON_HAND
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventFsmTimeout
</UL>

<P><STRONG><a name="[860]"></a>p2pFuncRequestScan</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, p2p_func.o(i.p2pFuncRequestScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = p2pFuncRequestScan &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_SCAN
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateInit_AP_CHANNEL_DETECT
</UL>

<P><STRONG><a name="[83d]"></a>p2pFuncResetStaRecStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, p2p_func.o(i.p2pFuncResetStaRecStatus))
<BR><BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventDeauthTxDone
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncValidateAuth
</UL>

<P><STRONG><a name="[840]"></a>p2pFuncRetryJOIN</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, p2p_func.o(i.p2pFuncRetryJOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = p2pFuncRetryJOIN &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
</UL>

<P><STRONG><a name="[870]"></a>p2pFuncSetChannel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, p2p_func.o(i.p2pFuncSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = p2pFuncSetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_set_channel
</UL>

<P><STRONG><a name="[861]"></a>p2pFuncStartGO</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, p2p_func.o(i.p2pFuncStartGO))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAPandIbss
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetDataRatesFromRateSet
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicQmUpdateWmmParms
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssCreated
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PSetCipher
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetCipher
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssInitForAP
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_REQING_CHANNEL
</UL>

<P><STRONG><a name="[847]"></a>p2pFuncSwitchOPMode</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, p2p_func.o(i.p2pFuncSwitchOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconAbort
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventSwitchOPMode
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
</UL>

<P><STRONG><a name="[842]"></a>p2pFuncTxMgmtFrame</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, p2p_func.o(i.p2pFuncTxMgmtFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = p2pFuncTxMgmtFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateMgmtTxStatus
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventMgmtFrameTx
</UL>

<P><STRONG><a name="[83f]"></a>p2pFuncUpdateBssInfoForJOIN</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, p2p_func.o(i.p2pFuncUpdateBssInfoForJOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = p2pFuncUpdateBssInfoForJOIN &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocRsp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqmProcessAssocRsp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventJoinComplete
</UL>

<P><STRONG><a name="[330]"></a>p2pFuncValidateAssocReq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, p2p_func.o(i.p2pFuncValidateAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = p2pFuncValidateAssocReq &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
</UL>

<P><STRONG><a name="[338]"></a>p2pFuncValidateAuth</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, p2p_func.o(i.p2pFuncValidateAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = p2pFuncValidateAuth &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssRemoveStaRecFromClientList
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecAlloc
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncResetStaRecStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAuth
</UL>

<P><STRONG><a name="[7ff]"></a>p2pFuncValidateRxActionFrame</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, p2p_func.o(i.p2pFuncValidateRxActionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p2pFuncValidateRxActionFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateRxMgmtFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessActionFrame
</UL>

<P><STRONG><a name="[75c]"></a>p2pHardStartXmit</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gl_p2p.o(i.p2pHardStartXmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = p2pHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_bitn
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output_p2p
</UL>

<P><STRONG><a name="[74c]"></a>p2pIECalculateP2P_IEForAssocReq</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, p2p_ie.o(i.p2pIECalculateP2P_IEForAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = p2pIECalculateP2P_IEForAssocReq
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pCalculateP2P_IELenForAssocReq
</UL>

<P><STRONG><a name="[750]"></a>p2pIEGenerateP2P_IEForAssocReq</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, p2p_ie.o(i.p2pIEGenerateP2P_IEForAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p2pIEGenerateP2P_IEForAssocReq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToP2pGenerateP2P_IEForAssocReq
</UL>

<P><STRONG><a name="[83c]"></a>p2pIEProcessConnReqP2P_IE</STRONG> (Thumb, 330 bytes, Stack size 120 bytes, p2p_ie.o(i.p2pIEProcessConnReqP2P_IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = p2pIEProcessConnReqP2P_IE &rArr; rsnParseRsnIE
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseRsnIE
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseCheckForWFAInfoElem
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PSetCipher
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetCipher
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseCheckForP2PInfoElem
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetWSCAssocInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
</UL>

<P><STRONG><a name="[91]"></a>p2pLaunch</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gl_p2p_init.o(i.p2pLaunch))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = p2pLaunch &rArr; glRegisterP2P &rArr; nicActivateNetwork &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRegisterToWlan
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glRegisterP2P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.initP2P)
</UL>
<P><STRONG><a name="[991]"></a>p2pNetRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_p2p.o(i.p2pNetRegister))
<BR><BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModInit
</UL>

<P><STRONG><a name="[866]"></a>p2pRegisterToWlan</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, gl_p2p_init.o(i.p2pRegisterToWlan))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pLaunch
</UL>

<P><STRONG><a name="[90]"></a>p2pRemove</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gl_p2p_init.o(i.p2pRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = p2pRemove &rArr; glUnregisterP2P &rArr; p2pFsmUninit &rArr; p2pFsmRunEventAbort &rArr; p2pFsmStateTransition &rArr; p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pUnregisterToWlan
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStopImmediate
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glUnregisterP2P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p_init.o(i.initP2P)
</UL>
<P><STRONG><a name="[332]"></a>p2pRunEventAAAComplete</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, p2p_fsm.o(i.p2pRunEventAAAComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = p2pRunEventAAAComplete &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssRemoveStaRecFromClientList
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssAddStaRecToClientList
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
</UL>

<P><STRONG><a name="[33d]"></a>p2pRunEventAAASuccess</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pRunEventAAASuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = p2pRunEventAAASuccess &rArr; kalP2PGOStationUpdate &rArr; handle_disassoc_info &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGOStationUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventTxDone
</UL>

<P><STRONG><a name="[33b]"></a>p2pRunEventAAATxFail</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, p2p_fsm.o(i.p2pRunEventAAATxFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = p2pRunEventAAATxFail &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssRemoveStaRecFromClientList
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventTxDone
</UL>

<P><STRONG><a name="[955]"></a>p2pSetMulticastListWorkQueueWrapper</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gl_init.o(i.p2pSetMulticastListWorkQueueWrapper))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[84c]"></a>p2pStateAbort_AP_CHANNEL_DETECT</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, p2p_state.o(i.p2pStateAbort_AP_CHANNEL_DETECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = p2pStateAbort_AP_CHANNEL_DETECT &rArr; p2pFuncCancelScan &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCancelScan
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmPreferredChannel
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnQuerySparseChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[850]"></a>p2pStateAbort_CHNL_ON_HAND</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, p2p_state.o(i.p2pStateAbort_CHNL_ON_HAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = p2pStateAbort_CHNL_ON_HAND &rArr; p2pFuncReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateChannelExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[852]"></a>p2pStateAbort_GC_JOIN</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, p2p_state.o(i.p2pStateAbort_GC_JOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = p2pStateAbort_GC_JOIN &rArr; p2pFuncReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[848]"></a>p2pStateAbort_IDLE</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, p2p_state.o(i.p2pStateAbort_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = p2pStateAbort_IDLE &rArr; p2pFuncReleaseCh &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[84e]"></a>p2pStateAbort_REQING_CHANNEL</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, p2p_state.o(i.p2pStateAbort_REQING_CHANNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = p2pStateAbort_REQING_CHANNEL &rArr; p2pFuncStartGO &rArr; p2pFuncSwitchOPMode &rArr; p2pFuncDissolve &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncReleaseCh
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[84a]"></a>p2pStateAbort_SCAN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, p2p_state.o(i.p2pStateAbort_SCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = p2pStateAbort_SCAN &rArr; p2pFuncCancelScan &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncCancelScan
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateScanDone
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[84d]"></a>p2pStateInit_AP_CHANNEL_DETECT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p2p_state.o(i.p2pStateInit_AP_CHANNEL_DETECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = p2pStateInit_AP_CHANNEL_DETECT &rArr; p2pFuncRequestScan &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRequestScan
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[851]"></a>p2pStateInit_CHNL_ON_HAND</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, p2p_state.o(i.p2pStateInit_CHNL_ON_HAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = p2pStateInit_CHNL_ON_HAND &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateChannelReady
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[853]"></a>p2pStateInit_GC_JOIN</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, p2p_state.o(i.p2pStateInit_GC_JOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = p2pStateInit_GC_JOIN &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssCreateStaRecFromBssDesc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[849]"></a>p2pStateInit_IDLE</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, p2p_state.o(i.p2pStateInit_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = p2pStateInit_IDLE &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[84b]"></a>p2pStateInit_SCAN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, p2p_state.o(i.p2pStateInit_SCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = p2pStateInit_SCAN &rArr; p2pFuncRequestScan &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncRequestScan
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmStateTransition
</UL>

<P><STRONG><a name="[867]"></a>p2pStopImmediate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_p2p.o(i.p2pStopImmediate))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRemove
</UL>

<P><STRONG><a name="[868]"></a>p2pUnregisterToWlan</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gl_p2p_init.o(i.p2pUnregisterToWlan))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pRemove
</UL>

<P><STRONG><a name="[86d]"></a>p2p_cfg80211_add_key</STRONG> (Thumb, 270 bytes, Stack size 128 bytes, gl_p2p_cfg80211.o(i.p2p_cfg80211_add_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = p2p_cfg80211_add_key &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pairewise_config_keys
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>

<P><STRONG><a name="[3bc]"></a>p2p_cfg80211_add_set_beacon</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, gl_p2p_cfg80211.o(i.p2p_cfg80211_add_set_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[86e]"></a>p2p_cfg80211_set_channel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gl_p2p_cfg80211.o(i.p2p_cfg80211_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = p2p_cfg80211_set_channel &rArr; p2p_cfg80211func_channel_format_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSetChannel
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211func_channel_format_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[86f]"></a>p2p_cfg80211func_channel_format_switch</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gl_p2p_cfg80211.o(i.p2p_cfg80211func_channel_format_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p2p_cfg80211func_channel_format_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicFreq2ChannelNum
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_set_channel
</UL>

<P><STRONG><a name="[871]"></a>p2p_set_local_dev_info</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gl_p2p.o(i.p2p_set_local_dev_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p2p_set_local_dev_info
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[978]"></a>p2p_wext_set_auth</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gl_p2p.o(i.p2p_wext_set_auth))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[872]"></a>p2p_wext_set_key</STRONG> (Thumb, 266 bytes, Stack size 160 bytes, gl_p2p.o(i.p2p_wext_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = p2p_wext_set_key &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[534]"></a>pars_uart_cmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_cmd.o(i.pars_uart_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = pars_uart_cmd &rArr; _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
</UL>

<P><STRONG><a name="[873]"></a>pbkdf2_sha1</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, crypt.o(i.pbkdf2_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_pmk
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_ap_pmk
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
</UL>

<P><STRONG><a name="[298]"></a>pbuf_alloc</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[709]"></a>pbuf_alloced_custom</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[70b]"></a>pbuf_cat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[876]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[711]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[5d4]"></a>pbuf_copy</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[56f]"></a>pbuf_copy_partial</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[1b1]"></a>pbuf_free</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input_p2p
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[5d0]"></a>pbuf_header</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[560]"></a>pbuf_realloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[5d5]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>

<P><STRONG><a name="[3cb]"></a>ping</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ping.o(i.ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sdio_func
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_ping_func
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ping
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
</UL>

<P><STRONG><a name="[34b]"></a>print_hex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_cmd.o(i.print_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_query
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wamac_query
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgrade_addr
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
</UL>

<P><STRONG><a name="[881]"></a>print_wscan_one</STRONG> (Thumb, 194 bytes, Stack size 208 bytes, ethernetif.o(i.print_wscan_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = print_wscan_one &rArr; wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_print_rsn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
</UL>

<P><STRONG><a name="[883]"></a>print_wscan_one_assis</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, ethernetif.o(i.print_wscan_one_assis))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = print_wscan_one_assis &rArr; wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_print_rsn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
</UL>

<P><STRONG><a name="[884]"></a>print_wscan_one_web</STRONG> (Thumb, 496 bytes, Stack size 120 bytes, ethernetif.o(i.print_wscan_one_web))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = print_wscan_one_web &rArr; wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_print_rsn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
</UL>

<P><STRONG><a name="[889]"></a>prvCheckDelayedTasks</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(i.prvCheckDelayedTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCheckDelayedTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>

<P><STRONG><a name="[760]"></a>pwm_disable</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hfgpio.o(i.pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwm_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[75f]"></a>pwm_enable</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hfgpio.o(i.pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pwm_enable &rArr; PwmConfigure &rArr; PwmEnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[52b]"></a>qmActivateStaRec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, que_mgt.o(i.qmActivateStaRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = qmActivateStaRec &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDeactivateStaRec
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecHandleEventPkt
</UL>

<P><STRONG><a name="[8a0]"></a>qmAddRxBaEntry</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, que_mgt.o(i.qmAddRxBaEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = qmAddRxBaEntry &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmLookupRxBaEntry
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDelRxBaEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventRxAddBa
</UL>

<P><STRONG><a name="[81f]"></a>qmAdjustTcQuotas</STRONG> (Thumb, 186 bytes, Stack size 44 bytes, que_mgt.o(i.qmAdjustTcQuotas))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = qmAdjustTcQuotas
</UL>
<BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAdjustTcq
</UL>

<P><STRONG><a name="[527]"></a>qmDeactivateStaRec</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, que_mgt.o(i.qmDeactivateStaRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedMsduInfo
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmFlushStaTxQueues
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDelRxBaEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmActivateStaRec
</UL>

<P><STRONG><a name="[8a2]"></a>qmDelRxBaEntry</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, que_mgt.o(i.qmDelRxBaEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedSwRfb
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmFlushStaRxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventRxDelBa
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDeactivateStaRec
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmAddRxBaEntry
</UL>

<P><STRONG><a name="[8a7]"></a>qmDequeueTxPackets</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, que_mgt.o(i.qmDequeueTxPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = qmDequeueTxPackets &rArr; qmDequeueTxPacketsFromPerTypeQueues &rArr; wlanProcessQueuedMsduInfo &rArr; nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDequeueTxPacketsFromPerTypeQueues
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDequeueTxPacketsFromPerStaQueues
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
</UL>

<P><STRONG><a name="[817]"></a>qmEnqueueTxPackets</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, que_mgt.o(i.qmEnqueueTxPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = qmEnqueueTxPackets &rArr; qmUpdateAverageTxQueLen &rArr; qmReassignTcResource
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmUpdateAverageTxQueLen
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDetermineStaRecIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
</UL>

<P><STRONG><a name="[8a5]"></a>qmFlushStaRxQueue</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, que_mgt.o(i.qmFlushStaRxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qmFlushStaRxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDelRxBaEntry
</UL>

<P><STRONG><a name="[8a3]"></a>qmFlushStaTxQueues</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, que_mgt.o(i.qmFlushStaTxQueues))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qmFlushStaTxQueues
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDeactivateStaRec
</UL>

<P><STRONG><a name="[825]"></a>qmFlushTxQueues</STRONG> (Thumb, 410 bytes, Stack size 20 bytes, que_mgt.o(i.qmFlushTxQueues))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qmFlushTxQueues
</UL>
<BR>[Called By]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFlush
</UL>

<P><STRONG><a name="[7dc]"></a>qmFreeAllByNetType</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, que_mgt.o(i.qmFreeAllByNetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = qmFreeAllByNetType &rArr; wlanProcessQueuedMsduInfo &rArr; nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedMsduInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
</UL>

<P><STRONG><a name="[8ac]"></a>qmGetFrameAction</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, que_mgt.o(i.qmGetFrameAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = qmGetFrameAction &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxGetResource
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
</UL>

<P><STRONG><a name="[81a]"></a>qmGetRxReorderQueuedBufferCount</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, que_mgt.o(i.qmGetRxReorderQueuedBufferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qmGetRxReorderQueuedBufferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
</UL>

<P><STRONG><a name="[810]"></a>qmHandleEventBssAbsencePresence</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, que_mgt.o(i.qmHandleEventBssAbsencePresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = qmHandleEventBssAbsencePresence &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[80a]"></a>qmHandleEventRxAddBa</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, que_mgt.o(i.qmHandleEventRxAddBa))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = qmHandleEventRxAddBa &rArr; qmAddRxBaEntry &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmAddRxBaEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[80b]"></a>qmHandleEventRxDelBa</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, que_mgt.o(i.qmHandleEventRxDelBa))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = qmHandleEventRxDelBa &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDelRxBaEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[811]"></a>qmHandleEventStaChangePsMode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, que_mgt.o(i.qmHandleEventStaChangePsMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = qmHandleEventStaChangePsMode &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmUpdateFreeQuota
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[812]"></a>qmHandleEventStaUpdateFreeQuota</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, que_mgt.o(i.qmHandleEventStaUpdateFreeQuota))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = qmHandleEventStaUpdateFreeQuota &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmUpdateFreeQuota
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[805]"></a>qmHandleRxPackets</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, que_mgt.o(i.qmHandleRxPackets))
<BR><BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
</UL>

<P><STRONG><a name="[827]"></a>qmInit</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, que_mgt.o(i.qmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qmInit
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxInitialize
</UL>

<P><STRONG><a name="[8a1]"></a>qmLookupRxBaEntry</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, que_mgt.o(i.qmLookupRxBaEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qmLookupRxBaEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmAddRxBaEntry
</UL>

<P><STRONG><a name="[8af]"></a>qmReassignTcResource</STRONG> (Thumb, 648 bytes, Stack size 44 bytes, que_mgt.o(i.qmReassignTcResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = qmReassignTcResource
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmUpdateAverageTxQueLen
</UL>

<P><STRONG><a name="[8ab]"></a>qmUpdateAverageTxQueLen</STRONG> (Thumb, 256 bytes, Stack size 28 bytes, que_mgt.o(i.qmUpdateAverageTxQueLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qmUpdateAverageTxQueLen &rArr; qmReassignTcResource
</UL>
<BR>[Calls]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmReassignTcResource
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmEnqueueTxPackets
</UL>

<P><STRONG><a name="[8ae]"></a>qmUpdateFreeQuota</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, que_mgt.o(i.qmUpdateFreeQuota))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qmUpdateFreeQuota
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaUpdateFreeQuota
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmHandleEventStaChangePsMode
</UL>

<P><STRONG><a name="[54c]"></a>random_get_bytes</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wpa.o(i.random_get_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = random_get_bytes &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
</UL>

<P><STRONG><a name="[3d1]"></a>rateGetDataRatesFromRateSet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rate.o(i.rateGetDataRatesFromRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rateGetDataRatesFromRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmInit
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddScanResult
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssInitForAP
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocBuildReAssocReqFrameCommonIEs
</UL>

<P><STRONG><a name="[402]"></a>rateGetLowestRateIndexFromRateSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rate.o(i.rateGetLowestRateIndexFromRateSet))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssInitForAP
</UL>

<P><STRONG><a name="[3db]"></a>rateGetRateSetFromIEs</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, rate.o(i.rateGetRateSetFromIEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rateGetRateSetFromIEs
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
</UL>

<P><STRONG><a name="[58e]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[595]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[70d]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[878]"></a>raw_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[879]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[59d]"></a>raw_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = raw_remove &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[5a7]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[5a8]"></a>raw_sendto</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[9b9]"></a>rc4_skip</STRONG> (Thumb, 148 bytes, Stack size 284 bytes, crypt.o(i.rc4_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rc4_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>

<P><STRONG><a name="[421]"></a>read_aswd</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, uart_cmd_misc.o(i.read_aswd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = read_aswd &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_aswd_equa
</UL>

<P><STRONG><a name="[427]"></a>read_atrm_cs</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, uart_cmd_atrm.o(i.read_atrm_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_atrm_cs &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
</UL>

<P><STRONG><a name="[429]"></a>read_atrm_ip</STRONG> (Thumb, 142 bytes, Stack size 144 bytes, uart_cmd_atrm.o(i.read_atrm_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = read_atrm_ip &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
</UL>

<P><STRONG><a name="[428]"></a>read_atrm_port</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, uart_cmd_atrm.o(i.read_atrm_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_atrm_port
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
</UL>

<P><STRONG><a name="[426]"></a>read_atrm_pro</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, uart_cmd_atrm.o(i.read_atrm_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_atrm_pro &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_atrm_equa
</UL>

<P><STRONG><a name="[436]"></a>read_crst</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, uart_cmd_lpb.o(i.read_crst))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_crst
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_crst_equa
</UL>

<P><STRONG><a name="[43c]"></a>read_echo</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_echo &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_echo_equa
</UL>

<P><STRONG><a name="[442]"></a>read_flang_flang</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, uart_cmd_misc.o(i.read_flang_flang))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_flang_flang
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_flang_equa
</UL>

<P><STRONG><a name="[445]"></a>read_fuartte_mode</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_fuartte_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_fuartte_mode &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_fuartte_equa
</UL>

<P><STRONG><a name="[44b]"></a>read_hfopen_add</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_hfopen_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = read_hfopen_add &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddress
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
</UL>

<P><STRONG><a name="[44a]"></a>read_hfopen_mode</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_hfopen_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_hfopen_mode &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
</UL>

<P><STRONG><a name="[44c]"></a>read_hfopen_port</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, uart_cmd_lpb.o(i.read_hfopen_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_hfopen_port
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_hfopen_equa
</UL>

<P><STRONG><a name="[44f]"></a>read_httpcn</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, uart_cmd_http.o(i.read_httpcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = read_httpcn &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpcn_equa
</UL>

<P><STRONG><a name="[452]"></a>read_httpdt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uart_cmd_http.o(i.read_httpdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = read_httpdt &rArr; http_cmd_open_session &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpdt_equa
</UL>

<P><STRONG><a name="[456]"></a>read_httpph</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, uart_cmd_http.o(i.read_httpph))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = read_httpph &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpph_equa
</UL>

<P><STRONG><a name="[460]"></a>read_httpport</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, uart_cmd_http.o(i.read_httpport))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_httpport
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_equa
</UL>

<P><STRONG><a name="[459]"></a>read_httptp</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, uart_cmd_http.o(i.read_httptp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_httptp &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httptp_equa
</UL>

<P><STRONG><a name="[45c]"></a>read_httpua</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, uart_cmd_http.o(i.read_httpua))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = read_httpua &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpua_equa
</UL>

<P><STRONG><a name="[45f]"></a>read_httpurl</STRONG> (Thumb, 234 bytes, Stack size 144 bytes, uart_cmd_http.o(i.read_httpurl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = read_httpurl &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_httpurl_equa
</UL>

<P><STRONG><a name="[463]"></a>read_lptio</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_lptio))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_lptio &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_lptio_equa
</UL>

<P><STRONG><a name="[467]"></a>read_maxsk</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, uart_cmd_misc.o(i.read_maxsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_maxsk
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_maxsk_equa
</UL>

<P><STRONG><a name="[46a]"></a>read_mid_mid</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, uart_cmd_misc.o(i.read_mid_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = read_mid_mid &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mid_equa
</UL>

<P><STRONG><a name="[46d]"></a>read_mslp</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_mslp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_mslp &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_mslp_equa
</UL>

<P><STRONG><a name="[470]"></a>read_ntpp</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, uart_cmd_time.o(i.read_ntpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_ntpp
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntpp_equa
</UL>

<P><STRONG><a name="[473]"></a>read_ntps</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, uart_cmd_time.o(i.read_ntps))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_ntps &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntps_equa
</UL>

<P><STRONG><a name="[478]"></a>read_ping</STRONG> (Thumb, 226 bytes, Stack size 96 bytes, uart_cmd_misc.o(i.read_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = read_ping &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddress
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ping_equa
</UL>

<P><STRONG><a name="[439]"></a>read_power_saving_mode</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.read_power_saving_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_power_saving_mode &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_ps_disable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_disps_equa
</UL>

<P><STRONG><a name="[47b]"></a>read_prst</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, uart_cmd_lpb.o(i.read_prst))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_prst
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_prst_equa
</UL>

<P><STRONG><a name="[47e]"></a>read_rcvb_data</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, uart_cmd_lpb.o(i.read_rcvb_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = read_rcvb_data &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_rcvb_data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb_equa
</UL>

<P><STRONG><a name="[481]"></a>read_recv_data</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.read_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv_equa
</UL>

<P><STRONG><a name="[482]"></a>read_recv_delay</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, uart_cmd_misc.o(i.read_recv_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = read_recv_delay &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_recv_data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv_equa
</UL>

<P><STRONG><a name="[486]"></a>read_reset</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, uart_cmd_misc.o(i.read_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_reset_equa
</UL>

<P><STRONG><a name="[489]"></a>read_rlden</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_rlden))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_rlden &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rlden_equa
</UL>

<P><STRONG><a name="[48e]"></a>read_rx_datatrate</STRONG> (Thumb, 678 bytes, Stack size 40 bytes, uart_cmd_test.o(i.read_rx_datatrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_rx_datatrate &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
</UL>

<P><STRONG><a name="[508]"></a>read_security</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_security &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_equa
</UL>

<P><STRONG><a name="[494]"></a>read_send_num</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_send_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = read_send_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_send_equa
</UL>

<P><STRONG><a name="[496]"></a>read_sendck_num</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_sendck_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = read_sendck_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yz_check_buf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sendck_equa
</UL>

<P><STRONG><a name="[499]"></a>read_slpen</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_slpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_slpen &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_slpen_equa
</UL>

<P><STRONG><a name="[4a0]"></a>read_sndb_num</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_sndb_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = read_sndb_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndb_equa
</UL>

<P><STRONG><a name="[4a2]"></a>read_sndbck_num</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_sndbck_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = read_sndbck_num &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yz_check_buf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sndbck_equa
</UL>

<P><STRONG><a name="[4a7]"></a>read_sockb_add</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_sockb_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sockb_add
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
</UL>

<P><STRONG><a name="[4a5]"></a>read_sockb_mode</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, uart_cmd_lpb.o(i.read_sockb_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_sockb_mode &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
</UL>

<P><STRONG><a name="[4a6]"></a>read_sockb_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, uart_cmd_lpb.o(i.read_sockb_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_sockb_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_sockb_equa
</UL>

<P><STRONG><a name="[4b4]"></a>read_tcpbt_to</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, uart_cmd_misc.o(i.read_tcpbt_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_tcpbt_to
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpto_equa
</UL>

<P><STRONG><a name="[4b7]"></a>read_tcpbtb_to</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, uart_cmd_misc.o(i.read_tcpbtb_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_tcpbtb_to
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcptob_equa
</UL>

<P><STRONG><a name="[4ac]"></a>read_tcpdis</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_tcpdis))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_tcpdis &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdis_equa
</UL>

<P><STRONG><a name="[4af]"></a>read_tcpdisb</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_tcpdisb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_tcpdisb &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tcpdisb_equa
</UL>

<P><STRONG><a name="[4bb]"></a>read_tmode</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.read_tmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_tmode &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_tmode_equa
</UL>

<P><STRONG><a name="[48d]"></a>read_tx_bandwidth</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, uart_cmd_test.o(i.read_tx_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_tx_bandwidth &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest_equa
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
</UL>

<P><STRONG><a name="[48c]"></a>read_tx_channel</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, uart_cmd_test.o(i.read_tx_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_tx_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest_equa
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rxtest_equa
</UL>

<P><STRONG><a name="[4c7]"></a>read_tx_cw_mode</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, uart_cmd_test.o(i.read_tx_cw_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_tx_cw_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>

<P><STRONG><a name="[4c1]"></a>read_tx_datatrate</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, uart_cmd_test.o(i.read_tx_datatrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = read_tx_datatrate &rArr; hf_wifi_test_tx &rArr; hf_wifi_test_setmac &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_disable_all_soft_watchdogs
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_enable_ap_idle_auto_reset
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest_equa
</UL>

<P><STRONG><a name="[4c6]"></a>read_tx_ls</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart_cmd_test.o(i.read_tx_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_tx_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>

<P><STRONG><a name="[4c4]"></a>read_tx_mcs</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart_cmd_test.o(i.read_tx_mcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_tx_mcs
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>

<P><STRONG><a name="[4c5]"></a>read_tx_mg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart_cmd_test.o(i.read_tx_mg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_tx_mg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>

<P><STRONG><a name="[4c0]"></a>read_tx_pmr</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, uart_cmd_test.o(i.read_tx_pmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_tx_pmr
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtest_equa
</UL>

<P><STRONG><a name="[4c3]"></a>read_tx_pmr_n</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uart_cmd_test.o(i.read_tx_pmr_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_tx_pmr_n
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txtestn_equa
</UL>

<P><STRONG><a name="[4be]"></a>read_txpwr</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, uart_cmd_misc.o(i.read_txpwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = read_txpwr &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_txpwr_equa
</UL>

<P><STRONG><a name="[4cb]"></a>read_uartf_uartf</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_uartf_uartf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_uartf_uartf &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartf_equa
</UL>

<P><STRONG><a name="[4ce]"></a>read_uartfl_fl</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, uart_cmd_misc.o(i.read_uartfl_fl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_uartfl_fl
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartfl_equa
</UL>

<P><STRONG><a name="[4d1]"></a>read_uartft_ft</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, uart_cmd_misc.o(i.read_uartft_ft))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_uartft_ft
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uartft_equa
</UL>

<P><STRONG><a name="[4d4]"></a>read_upfile</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, uart_cmd_lpb.o(i.read_upfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = read_upfile &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upfile_equa
</UL>

<P><STRONG><a name="[4e7]"></a>read_upfile_name</STRONG> (Thumb, 394 bytes, Stack size 104 bytes, uart_cmd_lpb.o(i.read_upfile_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_judge_url
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_equa
</UL>

<P><STRONG><a name="[4d7]"></a>read_uplogport</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, uart_cmd_lpb.o(i.read_uplogport))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_uplogport
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogport_equa
</UL>

<P><STRONG><a name="[4da]"></a>read_uplogsw</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, uart_cmd_lpb.o(i.read_uplogsw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_uplogsw &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uplogsw_equa
</UL>

<P><STRONG><a name="[4df]"></a>read_uppin</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, uart_cmd_update.o(i.read_uppin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_uppin
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_uppin_equa
</UL>

<P><STRONG><a name="[4e6]"></a>read_upurl</STRONG> (Thumb, 118 bytes, Stack size 128 bytes, uart_cmd_lpb.o(i.read_upurl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = read_upurl &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upurl_equa
</UL>

<P><STRONG><a name="[4eb]"></a>read_wadmn</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, uart_cmd_lpb.o(i.read_wadmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = read_wadmn &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wadmn_equa
</UL>

<P><STRONG><a name="[62e]"></a>read_wakey_auth</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, uart_cmd_wakey.o(i.read_wakey_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_wakey_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
</UL>

<P><STRONG><a name="[62f]"></a>read_wakey_encry</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, uart_cmd_wakey.o(i.read_wakey_encry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_wakey_encry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
</UL>

<P><STRONG><a name="[630]"></a>read_wakey_key</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart_cmd_wakey.o(i.read_wakey_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_wakey_key &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wakey
</UL>

<P><STRONG><a name="[4f0]"></a>read_webswitch</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_webswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_webswitch &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webswitch_equa
</UL>

<P><STRONG><a name="[4f4]"></a>read_webu_pwd</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, uart_cmd_misc.o(i.read_webu_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_webu_pwd &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_equa
</UL>

<P><STRONG><a name="[4f3]"></a>read_webu_usr</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, uart_cmd_misc.o(i.read_webu_usr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_webu_usr &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_webu_equa
</UL>

<P><STRONG><a name="[4f9]"></a>read_wmode_mode</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.read_wmode_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_wmode_mode &rArr; copy_para &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wmode_equa
</UL>

<P><STRONG><a name="[500]"></a>read_wsdns</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, uart_cmd_lpb.o(i.read_wsdns))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = read_wsdns &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsdns_equa
</UL>

<P><STRONG><a name="[50e]"></a>read_wskey_auth</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, uart_cmd_wskey.o(i.read_wskey_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_wskey_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
</UL>

<P><STRONG><a name="[50f]"></a>read_wskey_encry</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, uart_cmd_wskey.o(i.read_wskey_encry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_wskey_encry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
</UL>

<P><STRONG><a name="[510]"></a>read_wskey_key</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, uart_cmd_wskey.o(i.read_wskey_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_wskey_key &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_hex_num
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wskey
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
</UL>

<P><STRONG><a name="[509]"></a>read_wsmac_ssid</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, uart_cmd_lpb.o(i.read_wsmac_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = read_wsmac_ssid &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_para
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_c2h
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wsmac_equa
</UL>

<P><STRONG><a name="[50d]"></a>read_wsssid_ssid</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, uart_cmd_misc.o(i.read_wsssid_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = read_wsssid_ssid &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
</UL>

<P><STRONG><a name="[4fd]"></a>read_wsssid_ssidspecified</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, uart_cmd_wscan.o(i.read_wsssid_ssidspecified))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = read_wsssid_ssidspecified &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_queryspecified
</UL>

<P><STRONG><a name="[513]"></a>read_wtrwe_add</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, uart_cmd_test.o(i.read_wtrwe_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_wtrwe_add &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_c2h
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
</UL>

<P><STRONG><a name="[515]"></a>read_wtrwe_val</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, uart_cmd_test.o(i.read_wtrwe_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = read_wtrwe_val &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_c2h
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wtrwe_equa
</UL>

<P><STRONG><a name="[6ce]"></a>recv_http_content</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, uart_cmd_http.o(i.recv_http_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = recv_http_content &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recv
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>

<P><STRONG><a name="[8b4]"></a>rftestQueryATInfo</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, wlan_oid.o(i.rftestQueryATInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rftestQueryATInfo &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidRftestQueryAutoTest
</UL>

<P><STRONG><a name="[8b5]"></a>rftestSetATInfo</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, wlan_oid.o(i.rftestSetATInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rftestSetATInfo &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidRftestSetAutoTest
</UL>

<P><STRONG><a name="[356]"></a>rijndaelEncrypt</STRONG> (Thumb, 894 bytes, Stack size 40 bytes, crypt.o(i.rijndaelEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[355]"></a>rijndaelKeySetupDec</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, crypt.o(i.rijndaelKeySetupDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rijndaelKeySetupDec &rArr; rijndaelKeySetupEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_init
</UL>

<P><STRONG><a name="[357]"></a>rijndaelKeySetupEnc</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, crypt.o(i.rijndaelKeySetupEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupDec
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
</UL>

<P><STRONG><a name="[370]"></a>rlmBssAborted</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rlm.o(i.rlmBssAborted))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rlmBssAborted &rArr; rlmBssReset &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssReset
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDisconnect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventBeaconAbort
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[8b7]"></a>rlmBssInitForAP</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, p2p_rlm.o(i.rlmBssInitForAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = rlmBssInitForAP &rArr; rlmUpdateBwByChListForAP &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmPreferredChannel
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmBss40mBwPermitted
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateBwByChListForAP
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDecideScoForAP
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAPandIbss
</UL>

<P><STRONG><a name="[862]"></a>rlmBssInitForAPandIbss</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rlm.o(i.rlmBssInitForAPandIbss))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rlmBssInitForAPandIbss &rArr; rlmBssInitForAP &rArr; rlmUpdateBwByChListForAP &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAP
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncStartGO
</UL>

<P><STRONG><a name="[8b9]"></a>rlmDecideScoForAP</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, p2p_rlm.o(i.rlmDecideScoForAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rlmDecideScoForAP &rArr; rlmDomainIsLegalChannel &rArr; rlmDomainGetDomainInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainIsLegalChannel
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainGetDomainInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAP
</UL>

<P><STRONG><a name="[8bb]"></a>rlmDomainGetDomainInfo</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, rlm_domain.o(i.rlmDomainGetDomainInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rlmDomainGetDomainInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainSendCmd
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainIsLegalChannel
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDecideScoForAP
</UL>

<P><STRONG><a name="[8bc]"></a>rlmDomainIsLegalChannel</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rlm_domain.o(i.rlmDomainIsLegalChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rlmDomainIsLegalChannel &rArr; rlmDomainGetDomainInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainGetDomainInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDecideScoForAP
</UL>

<P><STRONG><a name="[8bd]"></a>rlmDomainSendCmd</STRONG> (Thumb, 180 bytes, Stack size 112 bytes, rlm_domain.o(i.rlmDomainSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rlmDomainSendCmd &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainGetDomainInfo
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanLoadManufactureData
</UL>

<P><STRONG><a name="[82f]"></a>rlmFillSyncCmdParam</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rlm.o(i.rlmFillSyncCmdParam))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
</UL>

<P><STRONG><a name="[7e6]"></a>rlmFsmEventInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rlm.o(i.rlmFsmEventInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rlmFsmEventInit &rArr; rlmObssInit &rArr; cnmTimerInitTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
</UL>

<P><STRONG><a name="[82d]"></a>rlmFsmEventUninit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rlm.o(i.rlmFsmEventUninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rlmFsmEventUninit &rArr; rlmBssReset &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUninitMGMT
</UL>

<P><STRONG><a name="[815]"></a>rlmHandleObssStatusEventPkt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, p2p_rlm.o(i.rlmHandleObssStatusEventPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = rlmHandleObssStatusEventPkt &rArr; rlmUpdateParamsForAP &rArr; bssUpdateBeaconContent &rArr; nicUpdateBeaconIETemplate &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateParamsForAP
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[8bf]"></a>rlmObssChnlLevel</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, p2p_rlm_obss.o(i.rlmObssChnlLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rlmObssChnlLevel &rArr; rlmObssChnlLevelIn2G4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssChnlLevelIn5G
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssChnlLevelIn2G4
</UL>
<BR>[Called By]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateBwByChListForAP
</UL>

<P><STRONG><a name="[8be]"></a>rlmObssInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rlm_obss.o(i.rlmObssInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rlmObssInit &rArr; cnmTimerInitTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFsmEventInit
</UL>

<P><STRONG><a name="[34]"></a>rlmObssScanDone</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, rlm_obss.o(i.rlmObssScanDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = rlmObssScanDone &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[8c2]"></a>rlmObssScanExemptionRsp</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, p2p_rlm_obss.o(i.rlmObssScanExemptionRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rlmObssScanExemptionRsp &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseTxSeqNum
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessPublicAction
</UL>

<P><STRONG><a name="[8c3]"></a>rlmObssTriggerScan</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rlm_obss.o(i.rlmObssTriggerScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rlmObssTriggerScan &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanTimeout
</UL>

<P><STRONG><a name="[331]"></a>rlmProcessAssocReq</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, rlm.o(i.rlmProcessAssocReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rlmProcessAssocReq &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
</UL>

<P><STRONG><a name="[3a2]"></a>rlmProcessAssocRsp</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rlm.o(i.rlmProcessAssocRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = rlmProcessAssocRsp &rArr; rlmRecIeInfoForClient &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRecIeInfoForClient
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssReset
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncUpdateBssInfoForJOIN
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisUpdateBssInfoForJOIN
</UL>

<P><STRONG><a name="[8c5]"></a>rlmProcessBcn</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, rlm.o(i.rlmProcessBcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rlmProcessBcn &rArr; rlmRecBcnInfoForClient &rArr; rlmRecIeInfoForClient &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRecBcnInfoForClient
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRecBcnFromNeighborForClient
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
</UL>

<P><STRONG><a name="[800]"></a>rlmProcessHtAction</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, p2p_rlm.o(i.rlmProcessHtAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rlmProcessHtAction &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessActionFrame
</UL>

<P><STRONG><a name="[7fe]"></a>rlmProcessPublicAction</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, p2p_rlm.o(i.rlmProcessPublicAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rlmProcessPublicAction &rArr; rlmUpdateBwByChListForAP &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanExemptionRsp
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateBwByChListForAP
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessActionFrame
</UL>

<P><STRONG><a name="[20]"></a>rlmReqGenerateExtCapIE</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rlm.o(i.rlmReqGenerateExtCapIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rlmReqGenerateExtCapIE &rArr; rlmFillExtCapIE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillExtCapIE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>rlmReqGenerateHtCapIE</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rlm.o(i.rlmReqGenerateHtCapIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rlmReqGenerateHtCapIE &rArr; rlmFillHtCapIE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillHtCapIE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>rlmRspGenerateErpIE</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, rlm.o(i.rlmRspGenerateErpIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rlmRspGenerateErpIE &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Address Reference Count : 3]<UL><LI> p2p_func.o(.data)
<LI> assoc.o(.data)
<LI> bss.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>rlmRspGenerateExtCapIE</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rlm.o(i.rlmRspGenerateExtCapIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rlmRspGenerateExtCapIE &rArr; rlmFillExtCapIE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillExtCapIE
</UL>
<BR>[Address Reference Count : 4]<UL><LI> p2p_func.o(.data)
<LI> assoc.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>rlmRspGenerateHtCapIE</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rlm.o(i.rlmRspGenerateHtCapIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rlmRspGenerateHtCapIE &rArr; rlmFillHtCapIE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillHtCapIE
</UL>
<BR>[Address Reference Count : 4]<UL><LI> p2p_func.o(.data)
<LI> assoc.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>rlmRspGenerateHtOpIE</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rlm.o(i.rlmRspGenerateHtOpIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rlmRspGenerateHtOpIE &rArr; rlmFillHtOpIE
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillHtOpIE
</UL>
<BR>[Address Reference Count : 4]<UL><LI> p2p_func.o(.data)
<LI> assoc.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>rlmRspGenerateObssScanIE</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, p2p_rlm.o(i.rlmRspGenerateObssScanIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rlmRspGenerateObssScanIE &rArr; cnmGetStaRecByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkToRlmRspGenerateObssScanIE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> p2p_func.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[8c8]"></a>rlmSyncOperationParams</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, rlm.o(i.rlmSyncOperationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = rlmSyncOperationParams &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFillSyncCmdParam
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessPublicAction
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessBcn
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateParamsForAP
</UL>

<P><STRONG><a name="[8ba]"></a>rlmUpdateBwByChListForAP</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, p2p_rlm.o(i.rlmUpdateBwByChListForAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rlmUpdateBwByChListForAP &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssChnlLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessPublicAction
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssInitForAP
</UL>

<P><STRONG><a name="[529]"></a>rlmUpdateParamsForAP</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, p2p_rlm.o(i.rlmUpdateParamsForAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rlmUpdateParamsForAP &rArr; bssUpdateBeaconContent &rArr; nicUpdateBeaconIETemplate &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssUpdateBeaconContent
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
</UL>
<BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmHandleObssStatusEventPkt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssScanTimeout
</UL>

<P><STRONG><a name="[8cc]"></a>rsnCheckPmkidCache</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rsn.o(i.rsnCheckPmkidCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = rsnCheckPmkidCache &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSelectPmkidCandidateList
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCandicate
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
</UL>

<P><STRONG><a name="[8ce]"></a>rsnCheckPmkidCandicate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rsn.o(i.rsnCheckPmkidCandicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsnCheckPmkidCandicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCache
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
</UL>

<P><STRONG><a name="[8cf]"></a>rsnGenMicErrorEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rsn.o(i.rsnGenMicErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = rsnGenMicErrorEvent &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnTkipHandleMICFailure
</UL>

<P><STRONG><a name="[8d0]"></a>rsnGeneratePmkidIndication</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, rsn.o(i.rsnGeneratePmkidIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = rsnGeneratePmkidIndication &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnIndicatePmkidCand
</UL>

<P><STRONG><a name="[18]"></a>rsnGenerateRSNIE</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, rsn.o(i.rsnGenerateRSNIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsnGenerateRSNIE &rArr; rsnSearchPmkidEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetCcmpCipher
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchPmkidEntry
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 4]<UL><LI> p2p_func.o(.data)
<LI> assoc.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>rsnGenerateWPAIE</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, rsn.o(i.rsnGenerateWPAIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsnGenerateWPAIE
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetTkipCipher
</UL>
<BR>[Address Reference Count : 2]<UL><LI> assoc.o(.data)
<LI> bss.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>rsnGenerateWSCIE</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rsn.o(i.rsnGenerateWSCIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsnGenerateWSCIE
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assoc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>rsnGenerateWpaNoneIE</STRONG> (Thumb, 362 bytes, Stack size 52 bytes, rsn.o(i.rsnGenerateWpaNoneIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsnGenerateWpaNoneIE &rArr; rsnSearchSupportedCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchSupportedCipher
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchAKMSuite
</UL>
<BR>[Address Reference Count : 3]<UL><LI> p2p_func.o(.data)
<LI> bss.o(.data)
<LI> p2p_bss.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>rsnIndicatePmkidCand</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rsn.o(i.rsnIndicatePmkidCand))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = rsnIndicatePmkidCand &rArr; rsnGeneratePmkidIndication &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGeneratePmkidIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> privacy.o(i.secInit)
</UL>
<P><STRONG><a name="[691]"></a>rsnParseCheckForWFAInfoElem</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rsn.o(i.rsnParseCheckForWFAInfoElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsnParseCheckForWFAInfoElem
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncProcessP2pProbeRsp
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
</UL>

<P><STRONG><a name="[690]"></a>rsnParseRsnIE</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, rsn.o(i.rsnParseRsnIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rsnParseRsnIE
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParserCheckForRSNCCMPPSK
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseBeaconContent
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
</UL>

<P><STRONG><a name="[692]"></a>rsnParseWpaIE</STRONG> (Thumb, 454 bytes, Stack size 44 bytes, rsn.o(i.rsnParseWpaIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rsnParseWpaIE
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
</UL>

<P><STRONG><a name="[3d8]"></a>rsnParserCheckForRSNCCMPPSK</STRONG> (Thumb, 90 bytes, Stack size 92 bytes, rsn.o(i.rsnParserCheckForRSNCCMPPSK))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rsnParserCheckForRSNCCMPPSK &rArr; rsnParseRsnIE
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseRsnIE
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxAssocReqFrame
</UL>

<P><STRONG><a name="[8d6]"></a>rsnPerformPolicySelection</STRONG> (Thumb, 1002 bytes, Stack size 48 bytes, rsn.o(i.rsnPerformPolicySelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rsnPerformPolicySelection &rArr; rsnSearchSupportedCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalWSCGetActiveState
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secEnabledInAis
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchSupportedCipher
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchAKMSuite
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
</UL>

<P><STRONG><a name="[8d5]"></a>rsnSearchAKMSuite</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rsn.o(i.rsnSearchAKMSuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rsnSearchAKMSuite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnPerformPolicySelection
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateWpaNoneIE
</UL>

<P><STRONG><a name="[8d2]"></a>rsnSearchPmkidEntry</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rsn.o(i.rsnSearchPmkidEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsnSearchPmkidEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateRSNIE
</UL>

<P><STRONG><a name="[8d4]"></a>rsnSearchSupportedCipher</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, rsn.o(i.rsnSearchSupportedCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rsnSearchSupportedCipher
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnPerformPolicySelection
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenerateWpaNoneIE
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secSetCipherSuite
</UL>

<P><STRONG><a name="[8cd]"></a>rsnSelectPmkidCandidateList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rsn.o(i.rsnSelectPmkidCandidateList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rsnSelectPmkidCandidateList &rArr; rsnUpdatePmkidCandidateList &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnUpdatePmkidCandidateList
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCache
</UL>

<P><STRONG><a name="[80d]"></a>rsnTkipHandleMICFailure</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rsn.o(i.rsnTkipHandleMICFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = rsnTkipHandleMICFailure &rArr; rsnGenMicErrorEvent &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStartCounterMeasure
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnGenMicErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[8d9]"></a>rsnUpdatePmkidCandidateList</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rsn.o(i.rsnUpdatePmkidCandidateList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsnUpdatePmkidCandidateList &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSelectPmkidCandidateList
</UL>

<P><STRONG><a name="[14b]"></a>rtc_time_add</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart_cmd_time.o(i.rtc_time_add))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[248]"></a>rtc_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_cmd_time.o(i.rtc_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_time_get
</UL>

<P><STRONG><a name="[268]"></a>rtc_time_set</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, uart_cmd_time.o(i.rtc_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = rtc_time_set &rArr; hftimer_adjust_external_rtc &rArr; hftimer_adjust &rArr; Timer1Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settimeofday
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
</UL>

<P><STRONG><a name="[37]"></a>saaFsmRunEventAbort</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, saa_fsm.o(i.saaFsmRunEventAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventAbort &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hem_mbox.o(.data)
<LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[c]"></a>saaFsmRunEventRxAssoc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, saa_fsm.o(i.saaFsmRunEventRxAssoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventRxAssoc &rArr; saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocCheckRxReAssocRspFrameStatus
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[3e5]"></a>saaFsmRunEventRxAuth</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, saa_fsm.o(i.saaFsmRunEventRxAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventRxAuth &rArr; saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authProcessRxAuth2_Auth4Frame
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckRxAuthFrameStatus
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckRxAuthFrameTransSeq
</UL>

<P><STRONG><a name="[10]"></a>saaFsmRunEventRxDeauth</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, saa_fsm.o(i.saaFsmRunEventRxDeauth))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventRxDeauth &rArr; p2pFsmRunEventRxDeauthentication &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authProcessRxDeauthFrame
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDeauthentication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>saaFsmRunEventRxDisassoc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, saa_fsm.o(i.saaFsmRunEventRxDisassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventRxDisassoc &rArr; p2pFsmRunEventRxDisassociation &rArr; p2pFuncDisconnect &rArr; nicUpdateBss &rArr; bssClearClientList &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocProcessRxDisassocFrame
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventRxDisassociation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>saaFsmRunEventRxRespTimeOut</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, saa_fsm.o(i.saaFsmRunEventRxRespTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = saaFsmRunEventRxRespTimeOut &rArr; saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saa_fsm.o(i.saaFsmRunEventTxDone)
</UL>
<P><STRONG><a name="[36]"></a>saaFsmRunEventStart</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, saa_fsm.o(i.saaFsmRunEventStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventStart &rArr; saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmBss40mBwPermitted
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmInit
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSendEventJoinComplete
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hem_mbox.o(.data)
<LI> gl_p2p_init.o(i.p2pRegisterToWlan)
</UL>
<P><STRONG><a name="[74]"></a>saaFsmRunEventTxDone</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, saa_fsm.o(i.saaFsmRunEventTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = saaFsmRunEventTxDone &rArr; saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocCheckTxReAssocReqFrame
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authCheckTxAuthFrame
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>
<BR>[Address Reference Count : 2]<UL><LI> auth.o(i.authSendAuthFrame)
<LI> assoc.o(i.assocSendReAssocReqFrame)
</UL>
<P><STRONG><a name="[c7]"></a>saaFsmRunEventTxReqTimeOut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, saa_fsm.o(i.saaFsmRunEventTxReqTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = saaFsmRunEventTxReqTimeOut &rArr; saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saa_fsm.o(i.saaFsmSteps)
</UL>
<P><STRONG><a name="[8dd]"></a>saaFsmSendEventJoinComplete</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, saa_fsm.o(i.saaFsmSendEventJoinComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = saaFsmSendEventJoinComplete &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSteps
</UL>

<P><STRONG><a name="[8db]"></a>saaFsmSteps</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, saa_fsm.o(i.saaFsmSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = saaFsmSteps &rArr; cnmStaRecChangeState &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assocSendReAssocReqFrame
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendAuthFrame
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmSendEventJoinComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAssoc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxAuth
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxDone
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventTxReqTimeOut
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventRxRespTimeOut
</UL>

<P><STRONG><a name="[8df]"></a>scanAddScanResult</STRONG> (Thumb, 294 bytes, Stack size 160 bytes, scan.o(i.scanAddScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = scanAddScanResult &rArr; nicAddScanResult &rArr; wifi_wscan_print &rArr; print_wscan_one &rArr; wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicChannelNum2Freq
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetDataRatesFromRateSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
</UL>

<P><STRONG><a name="[8e0]"></a>scanAddToBssDesc</STRONG> (Thumb, 1672 bytes, Stack size 144 bytes, scan.o(i.scanAddToBssDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = scanAddToBssDesc &rArr; rsnCheckPmkidCache &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseWpaIE
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseRsnIE
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnParseCheckForWFAInfoElem
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pars_beancon
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rateGetRateSetFromIEs
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchExistingBssDescWithSsid
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescsByPolicy
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescByBssid
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAllocateBssDesc
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCache
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncParseCheckForP2PInfoElem
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
</UL>

<P><STRONG><a name="[8e2]"></a>scanAllocateBssDesc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, scan.o(i.scanAllocateBssDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scanAllocateBssDesc &rArr; linkAddTail
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
</UL>

<P><STRONG><a name="[8e5]"></a>scanIsRegisteredScanSSID</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, scan.o(i.scanIsRegisteredScanSSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scanIsRegisteredScanSSID &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_check_score
</UL>

<P><STRONG><a name="[8e6]"></a>scanP2pProcessBeaconAndProbeResp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, p2p_scan.o(i.scanP2pProcessBeaconAndProbeResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = scanP2pProcessBeaconAndProbeResp &rArr; nicPmIndicateBssConnected &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssConnected
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PIndicateBssInfo
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanProcessBeaconAndProbeResp
</UL>

<P><STRONG><a name="[83b]"></a>scanP2pSearchDesc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, p2p_scan.o(i.scanP2pSearchDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scanP2pSearchDesc &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmRunEventConnectionRequest
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncKeepOnConnection
</UL>

<P><STRONG><a name="[d]"></a>scanProcessBeaconAndProbeResp</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, scan.o(i.scanProcessBeaconAndProbeResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = scanProcessBeaconAndProbeResp &rArr; aisBssBeaconTimeout &rArr; aisFsmStateAbort &rArr; aisFsmDisconnect &rArr; aisIndicationOfMediaStateToHost &rArr; nicMediaStateChange &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisBssBeaconTimeout
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanP2pProcessBeaconAndProbeResp
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessBcn
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssConnected
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmAisInfraChannelFixed
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIsRegisteredScanSSID
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddScanResult
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainIsLegalChannel
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nic_rx.o(.data)
</UL>
<P><STRONG><a name="[835]"></a>scanRemoveAllP2pBssDesc</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, p2p_scan.o(i.scanRemoveAllP2pBssDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scanRemoveAllP2pBssDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveP2pBssDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2PFreeInfo
</UL>

<P><STRONG><a name="[371]"></a>scanRemoveBssDescByBssid</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, scan.o(i.scanRemoveBssDescByBssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scanRemoveBssDescByBssid &rArr; linkAddTail
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[8e3]"></a>scanRemoveBssDescsByPolicy</STRONG> (Thumb, 680 bytes, Stack size 72 bytes, scan.o(i.scanRemoveBssDescsByPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = scanRemoveBssDescsByPolicy &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
</UL>

<P><STRONG><a name="[375]"></a>scanRemoveConnFlagOfBssDescByBssid</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, scan.o(i.scanRemoveConnFlagOfBssDescByBssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scanRemoveConnFlagOfBssDescByBssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmStateAbort_JOIN
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[8e8]"></a>scanRemoveP2pBssDesc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_scan.o(i.scanRemoveP2pBssDesc))
<BR><BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveAllP2pBssDesc
</UL>

<P><STRONG><a name="[388]"></a>scanSearchBssDescByBssid</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, scan.o(i.scanSearchBssDescByBssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scanSearchBssDescByBssid &rArr; scanSearchBssDescByBssidAndSsid &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssidAndSsid
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisUpdateBssInfoForJOIN
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinComplete
</UL>

<P><STRONG><a name="[8e9]"></a>scanSearchBssDescByBssidAndSsid</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, scan.o(i.scanSearchBssDescByBssidAndSsid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = scanSearchBssDescByBssidAndSsid &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchExistingBssDescWithSsid
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssid
</UL>

<P><STRONG><a name="[395]"></a>scanSearchBssDescByPolicy</STRONG> (Thumb, 648 bytes, Stack size 72 bytes, scan.o(i.scanSearchBssDescByPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = scanSearchBssDescByPolicy &rArr; sta_try_check_score &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmAisInfraChannelFixed
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_update_score
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_check_score
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_try_add_score
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnPerformPolicySelection
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainIsLegalChannel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
</UL>

<P><STRONG><a name="[8ed]"></a>scanSearchBssDescByTAAndSsid</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, scan.o(i.scanSearchBssDescByTAAndSsid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = scanSearchBssDescByTAAndSsid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchExistingBssDescWithSsid
</UL>

<P><STRONG><a name="[8e1]"></a>scanSearchExistingBssDescWithSsid</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, scan.o(i.scanSearchExistingBssDescWithSsid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = scanSearchExistingBssDescWithSsid &rArr; scanSearchBssDescByTAAndSsid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByTAAndSsid
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByBssidAndSsid
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
</UL>

<P><STRONG><a name="[24c]"></a>schedule_timeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(i.schedule_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_process_normal_mode
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortWrite
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_completion_timeout
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_smartlink
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx11n
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_set_efuse
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_get_efuse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSecurityFrameTxDone
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2af]"></a>schedule_yield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, setup.o(i.schedule_yield))
<BR><BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[80f]"></a>scnEventScanDone</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, scan_fsm.o(i.scnEventScanDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = scnEventScanDone &rArr; scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmGenerateScanDoneMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
</UL>

<P><STRONG><a name="[8ee]"></a>scnFsmGenerateScanDoneMsg</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, scan_fsm.o(i.scnFsmGenerateScanDoneMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = scnFsmGenerateScanDoneMsg &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnEventScanDone
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgAbort
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmRemovePendingMsg
</UL>

<P><STRONG><a name="[8f0]"></a>scnFsmHandleScanMsg</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, scan_fsm.o(i.scnFsmHandleScanMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scnFsmHandleScanMsg &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgStart
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
</UL>

<P><STRONG><a name="[8f1]"></a>scnFsmHandleScanMsgV2</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, scan_fsm.o(i.scnFsmHandleScanMsgV2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scnFsmHandleScanMsgV2 &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgStart
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
</UL>

<P><STRONG><a name="[32]"></a>scnFsmMsgAbort</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, scan_fsm.o(i.scnFsmMsgAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = scnFsmMsgAbort &rArr; scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmRemovePendingMsg
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmGenerateScanDoneMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>scnFsmMsgStart</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, scan_fsm.o(i.scnFsmMsgStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = scnFsmMsgStart &rArr; scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsgV2
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hem_mbox.o(.data)
</UL>
<P><STRONG><a name="[8f2]"></a>scnFsmRemovePendingMsg</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, scan_fsm.o(i.scnFsmRemovePendingMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = scnFsmRemovePendingMsg &rArr; scnFsmGenerateScanDoneMsg &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmGenerateScanDoneMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgAbort
</UL>

<P><STRONG><a name="[8ef]"></a>scnFsmSteps</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, scan_fsm.o(i.scnFsmSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = scnFsmSteps &rArr; scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReqV2
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReq
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsgV2
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmHandleScanMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnEventScanDone
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgStart
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgAbort
</UL>

<P><STRONG><a name="[7e7]"></a>scnInit</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, scan.o(i.scnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scnInit &rArr; linkAddTail
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkAddTail
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
</UL>

<P><STRONG><a name="[869]"></a>scnQuerySparseChannel</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scan_fsm.o(i.scnQuerySparseChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scnQuerySparseChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pStateAbort_AP_CHANNEL_DETECT
</UL>

<P><STRONG><a name="[8f3]"></a>scnSendScanReq</STRONG> (Thumb, 278 bytes, Stack size 760 bytes, scan_fsm.o(i.scnSendScanReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = scnSendScanReq &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
</UL>

<P><STRONG><a name="[8f4]"></a>scnSendScanReqV2</STRONG> (Thumb, 330 bytes, Stack size 872 bytes, scan_fsm.o(i.scnSendScanReqV2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = scnSendScanReqV2 &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmSteps
</UL>

<P><STRONG><a name="[82c]"></a>scnUninit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, scan.o(i.scnUninit))
<BR><BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUninitMGMT
</UL>

<P><STRONG><a name="[8f5]"></a>sdio_irq_process_normal_mode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdiocard.o(i.sdio_irq_process_normal_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = sdio_irq_process_normal_mode &rArr; process_sdio_pending_irqs &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[8f6]"></a>sdio_irq_process_sniffer_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdiocard.o(i.sdio_irq_process_sniffer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = sdio_irq_process_sniffer_mode &rArr; process_sdio_pending_irqs &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[e8]"></a>sdio_irq_thread</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, sdiocard.o(i.sdio_irq_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = sdio_irq_thread &rArr; sdio_irq_process_normal_mode &rArr; process_sdio_pending_irqs &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_worker_thread_exit_flags
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_process_sniffer_mode
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_process_normal_mode
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_worker_thread_exit_flags
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_worker_thread_exit_flags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_init.o(i.wlanInit)
</UL>
<P><STRONG><a name="[726]"></a>sdio_readl</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sdiocard.o(i.sdio_readl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartReciveData
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioIsDatTransDone
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioGetCmdResp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndDatTrans
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioDisableClk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
</UL>

<P><STRONG><a name="[721]"></a>sdio_readsb</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, sdiocard.o(i.sdio_readsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_readsb &rArr; SD_IORWHelper &rArr; SD_IOWriteExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IORWHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortRead
</UL>

<P><STRONG><a name="[72a]"></a>sdio_writeb</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sdiocard.o(i.sdio_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sdio_writeb &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevWriteWithSdioCmd52
</UL>

<P><STRONG><a name="[728]"></a>sdio_writel</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, sdiocard.o(i.sdio_writel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdio_writel &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioStartSendData
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioIsDatTransDone
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioGetCmdResp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioEndDatTrans
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
</UL>

<P><STRONG><a name="[724]"></a>sdio_writesb</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sdiocard.o(i.sdio_writesb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_writesb &rArr; SD_IORWHelper &rArr; SD_IOWriteExtended &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IORWHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortWrite
</UL>

<P><STRONG><a name="[804]"></a>secCheckClassError</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, privacy.o(i.secCheckClassError))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = secCheckClassError &rArr; authSendDeauthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secRxPortControlCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessDataPacket
</UL>

<P><STRONG><a name="[39c]"></a>secClearPmkid</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, privacy.o(i.secClearPmkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = secClearPmkid &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secInit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisIndicationOfMediaStateToHost
</UL>

<P><STRONG><a name="[8d8]"></a>secEnabledInAis</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, privacy.o(i.secEnabledInAis))
<BR><BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnPerformPolicySelection
</UL>

<P><STRONG><a name="[ca]"></a>secFsmEventDeauthTxDone</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sec_fsm.o(i.secFsmEventDeauthTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = secFsmEventDeauthTxDone &rArr; secFsmTrans_SEND_DEAUTH_to_COUNTERMEASURE &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_SEND_DEAUTH_to_COUNTERMEASURE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sec_fsm.o(i.secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH)
</UL>
<P><STRONG><a name="[8fb]"></a>secFsmEventEapolTxDone</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sec_fsm.o(i.secFsmEventEapolTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = secFsmEventEapolTxDone &rArr; secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH &rArr; authSendDeauthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmSteps
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSecurityFrameTxDone
</UL>

<P><STRONG><a name="[c8]"></a>secFsmEventEapolTxTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sec_fsm.o(i.secFsmEventEapolTxTimeout))
<BR>[Address Reference Count : 1]<UL><LI> sec_fsm.o(i.secFsmInit)
</UL>
<P><STRONG><a name="[c9]"></a>secFsmEventEndOfCounterMeasure</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, sec_fsm.o(i.secFsmEventEndOfCounterMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = secFsmEventEndOfCounterMeasure &rArr; secFsmSteps
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_COUNTERMEASURE_to_INIT
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmSteps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sec_fsm.o(i.secFsmInit)
</UL>
<P><STRONG><a name="[526]"></a>secFsmEventStart</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sec_fsm.o(i.secFsmEventStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = secFsmEventStart &rArr; secFsmTrans_INIT_to_CHECK_OK
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secSetPortBlocked
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_INIT_to_CHECK_OK
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmSteps
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
</UL>

<P><STRONG><a name="[8da]"></a>secFsmEventStartCounterMeasure</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sec_fsm.o(i.secFsmEventStartCounterMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = secFsmEventStartCounterMeasure &rArr; secFsmSteps
</UL>
<BR>[Calls]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_CHECK_OK_to_SEND_EAPOL
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmSteps
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnTkipHandleMICFailure
</UL>

<P><STRONG><a name="[8de]"></a>secFsmInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sec_fsm.o(i.secFsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = secFsmInit &rArr; cnmTimerInitTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
</UL>

<P><STRONG><a name="[8fd]"></a>secFsmSteps</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sec_fsm.o(i.secFsmSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = secFsmSteps
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStartCounterMeasure
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventEapolTxDone
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventEndOfCounterMeasure
</UL>

<P><STRONG><a name="[901]"></a>secFsmTrans_CHECK_OK_to_SEND_EAPOL</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sec_fsm.o(i.secFsmTrans_CHECK_OK_to_SEND_EAPOL))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStartCounterMeasure
</UL>

<P><STRONG><a name="[8fe]"></a>secFsmTrans_COUNTERMEASURE_to_INIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sec_fsm.o(i.secFsmTrans_COUNTERMEASURE_to_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventEndOfCounterMeasure
</UL>

<P><STRONG><a name="[900]"></a>secFsmTrans_INIT_to_CHECK_OK</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sec_fsm.o(i.secFsmTrans_INIT_to_CHECK_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = secFsmTrans_INIT_to_CHECK_OK
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secSetPortBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStart
</UL>

<P><STRONG><a name="[8fa]"></a>secFsmTrans_SEND_DEAUTH_to_COUNTERMEASURE</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sec_fsm.o(i.secFsmTrans_SEND_DEAUTH_to_COUNTERMEASURE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = secFsmTrans_SEND_DEAUTH_to_COUNTERMEASURE &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventDeauthTxDone
</UL>

<P><STRONG><a name="[8fc]"></a>secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sec_fsm.o(i.secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH &rArr; authSendDeauthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventEapolTxDone
</UL>

<P><STRONG><a name="[3a0]"></a>secInit</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, privacy.o(i.secInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = secInit &rArr; secClearPmkid &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secClearPmkid
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisInitializeConnectionSettings
</UL>

<P><STRONG><a name="[8f9]"></a>secRxPortControlCheck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, privacy.o(i.secRxPortControlCheck))
<BR><BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCheckClassError
</UL>

<P><STRONG><a name="[902]"></a>secSetCipherSuite</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, privacy.o(i.secSetCipherSuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = secSetCipherSuite &rArr; rsnSearchSupportedCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnSearchSupportedCipher
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetEncryptionStatus
</UL>

<P><STRONG><a name="[8ff]"></a>secSetPortBlocked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, privacy.o(i.secSetPortBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventStart
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmTrans_INIT_to_CHECK_OK
</UL>

<P><STRONG><a name="[903]"></a>sem_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gl_os.o(i.sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sem_destroy &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[928]"></a>sem_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gl_os.o(i.sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[2c7]"></a>send_at_cmd</STRONG> (Thumb, 424 bytes, Stack size 120 bytes, hfat.o(i.send_at_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = send_at_cmd &rArr; hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_escape
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_ucmd_lexical_analysis
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_ucmd_find
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pars_uart_cmd
</UL>

<P><STRONG><a name="[6cd]"></a>send_http_content</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, uart_cmd_http.o(i.send_http_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = send_http_content &rArr; m2m_tcp_send &rArr; sock_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_cmd_open_session
</UL>

<P><STRONG><a name="[61d]"></a>set_baurate</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, hfat.o(i.set_baurate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = set_baurate &rArr; FuartInit &rArr; FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baud_en2num
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_get_adjust
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_stop
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_parity
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_bits
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartTxIoConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioFuartRxIoConfig
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRtsIoConfig
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartCtsIoConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFuartAndBuartSampleClk
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_chbau
</UL>

<P><STRONG><a name="[735]"></a>set_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gl_os.o(i.set_bit))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalTimeoutHandler
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>

<P><STRONG><a name="[906]"></a>set_mode_infra</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethernetif.o(i.set_mode_infra))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = set_mode_infra &rArr; wext_set_mode &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_mode
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[633]"></a>set_para</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hfat.o(i.set_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_para &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
</UL>

<P><STRONG><a name="[975]"></a>set_secumode_ap</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ethernetif.o(i.set_secumode_ap))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[90b]"></a>set_secumode_sta</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, ethernetif.o(i.set_secumode_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_secumode_sta &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[90c]"></a>set_struct_conf</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, ethernetif.o(i.set_struct_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_struct_conf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[90d]"></a>set_struct_devicecfg</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ethernetif.o(i.set_struct_devicecfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_struct_devicecfg &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[976]"></a>set_struct_modes</STRONG> (Thumb, 274 bytes, Stack size 12 bytes, ethernetif.o(i.set_struct_modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_struct_modes
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[977]"></a>set_struct_rates</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ethernetif.o(i.set_struct_rates))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_struct_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[8f7]"></a>set_wifi_worker_thread_exit_flags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdiocard.o(i.set_wifi_worker_thread_exit_flags))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[628]"></a>settimeofday</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hftime.o(i.settimeofday))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = settimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
</UL>

<P><STRONG><a name="[90f]"></a>setup_stack_frame</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, setup.o(i.setup_stack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = setup_stack_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[911]"></a>sha1_prf</STRONG> (Thumb, 150 bytes, Stack size 104 bytes, crypt.o(i.sha1_prf))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
</UL>

<P><STRONG><a name="[6c4]"></a>sha1_vector</STRONG> (Thumb, 60 bytes, Stack size 120 bytes, crypt.o(i.sha1_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_gen_mac_addr
</UL>

<P><STRONG><a name="[6c7]"></a>sha256_vector</STRONG> (Thumb, 106 bytes, Stack size 144 bytes, crypt.o(i.sha256_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[916]"></a>smartlink_correct</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, smartlinkv3.o(i.smartlink_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = smartlink_correct &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
</UL>

<P><STRONG><a name="[917]"></a>smartlink_correct_step1</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, smartlinkv3.o(i.smartlink_correct_step1))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = smartlink_correct_step1 &rArr; hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_finished_ok
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_get_verify_code
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
</UL>

<P><STRONG><a name="[919]"></a>smartlink_get_verify_cnts</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, smartlinkv3.o(i.smartlink_get_verify_cnts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smartlink_get_verify_cnts
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_get_verify_code
</UL>

<P><STRONG><a name="[918]"></a>smartlink_get_verify_code</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, smartlinkv3.o(i.smartlink_get_verify_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smartlink_get_verify_code &rArr; smartlink_get_verify_cnts
</UL>
<BR>[Calls]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_get_verify_cnts
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
</UL>

<P><STRONG><a name="[91a]"></a>smartlink_save_one_seq</STRONG> (Thumb, 372 bytes, Stack size 112 bytes, smartlinkv3.o(i.smartlink_save_one_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = smartlink_save_one_seq &rArr; smartlink_correct_step1 &rArr; hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_finished_ok
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_correct_step1
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_decode
</UL>

<P><STRONG><a name="[67f]"></a>smartlinkv3_check</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, smartlinkv3.o(i.smartlinkv3_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = smartlinkv3_check &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_get_item
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_match_code
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[ce]"></a>smartlinkv3_decode</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, smartlinkv3.o(i.smartlinkv3_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = smartlinkv3_decode &rArr; smartlink_save_one_seq &rArr; smartlink_correct_step1 &rArr; hfsmtlk_finished_ok &rArr; smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_valid_char
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlink_save_one_seq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smartlinkv3.o(i.smartlinkv3_fix_channel)
</UL>
<P><STRONG><a name="[680]"></a>smartlinkv3_fix_channel</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, smartlinkv3.o(i.smartlinkv3_fix_channel))
<BR><BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
</UL>

<P><STRONG><a name="[687]"></a>smartlinkv3_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smartlinkv3.o(i.smartlinkv3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = smartlinkv3_init &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[cd]"></a>smartlinkv3_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smartlinkv3.o(i.smartlinkv3_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smartlinkv3_reset &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smartlinkv3.o(i.smartlinkv3_fix_channel)
</UL>
<P><STRONG><a name="[91c]"></a>smartlinkv3_valid_char</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, smartlinkv3.o(i.smartlinkv3_valid_char))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_decode
</UL>

<P><STRONG><a name="[684]"></a>smartlinkv7_check</STRONG> (Thumb, 696 bytes, Stack size 64 bytes, smartlinkv7.o(i.smartlinkv7_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = smartlinkv7_check &rArr; smartlinkv7_partial_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_partial_ok
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_finished_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode_mc
</UL>

<P><STRONG><a name="[91d]"></a>smartlinkv7_finished_ok</STRONG> (Thumb, 478 bytes, Stack size 64 bytes, smartlinkv7.o(i.smartlinkv7_finished_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = smartlinkv7_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_stop_sniffer_mode
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssid
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_check
</UL>

<P><STRONG><a name="[686]"></a>smartlinkv7_fix_channel</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smartlinkv7.o(i.smartlinkv7_fix_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = smartlinkv7_fix_channel &rArr; hfsmtlk_fix_channel_by_bssid &rArr; hf_start_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_fix_channel_by_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode_mc
</UL>

<P><STRONG><a name="[685]"></a>smartlinkv7_get_fix_channel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, smartlinkv7.o(i.smartlinkv7_get_fix_channel))
<BR><BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode_mc
</UL>

<P><STRONG><a name="[688]"></a>smartlinkv7_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, smartlinkv7.o(i.smartlinkv7_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = smartlinkv7_init &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_default_main_loop
</UL>

<P><STRONG><a name="[91e]"></a>smartlinkv7_partial_ok</STRONG> (Thumb, 440 bytes, Stack size 64 bytes, smartlinkv7.o(i.smartlinkv7_partial_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = smartlinkv7_partial_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_stop_sniffer_mode
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_ssid
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_check
</UL>

<P><STRONG><a name="[694]"></a>smartlinkv7_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smartlinkv7.o(i.smartlinkv7_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = smartlinkv7_reset &rArr; smartlinkv7_init &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_init
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_reset
</UL>

<P><STRONG><a name="[253]"></a>smtlk_send_log</STRONG> (Thumb, 480 bytes, Stack size 128 bytes, assis_thread.o(i.smtlk_send_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = smtlk_send_log &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_data
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[780]"></a>sock_send</STRONG> (Thumb, 462 bytes, Stack size 80 bytes, sockets.o(i.sock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = sock_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_available
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
</UL>

<P><STRONG><a name="[47f]"></a>socketa_is_started</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, socket_thread.o(i.socketa_is_started))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_recv
</UL>

<P><STRONG><a name="[47c]"></a>socketb_is_started</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, socket_b_thread.o(i.socketb_is_started))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_rcvb
</UL>

<P><STRONG><a name="[8eb]"></a>sta_try_add_score</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, scan.o(i.sta_try_add_score))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sta_try_add_score &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
</UL>

<P><STRONG><a name="[8ea]"></a>sta_try_check_score</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, scan.o(i.sta_try_check_score))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sta_try_check_score &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIsRegisteredScanSSID
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
</UL>

<P><STRONG><a name="[7c9]"></a>sta_try_linked</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, scan.o(i.sta_try_linked))
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>

<P><STRONG><a name="[8ec]"></a>sta_try_update_score</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, scan.o(i.sta_try_update_score))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sta_try_update_score &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
</UL>

<P><STRONG><a name="[673]"></a>start_assis_thread</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, assis_thread.o(i.start_assis_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = start_assis_thread &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_assis
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
</UL>

<P><STRONG><a name="[5dc]"></a>start_dns_server</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dns_server.o(i.start_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = start_dns_server &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>

<P><STRONG><a name="[787]"></a>start_kernel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, init.o(i.start_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = start_kernel &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91f]"></a>start_schedule</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setup.o(i.start_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = start_schedule &rArr; systick_config &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_first_task
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[769]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(i.stats_init))
<BR><BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[84]"></a>status_callback</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ethernet.o(i.status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = status_callback &rArr; ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.ethernet_configure_interface)
</UL>
<P><STRONG><a name="[922]"></a>str2hex</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, uart_cmd_misc.o(i.str2hex))
<BR><BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_escape
</UL>

<P><STRONG><a name="[905]"></a>str_escape</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, uart_cmd_misc.o(i.str_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = str_escape &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2hex
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
</UL>

<P><STRONG><a name="[657]"></a>strtowords</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hfat.o(i.strtowords))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strtowords
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfat_get_words
</UL>

<P><STRONG><a name="[4e2]"></a>success_update_flag</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, httpd.o(i.success_update_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = success_update_flag &rArr; hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_config_crc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upfile_name
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_upst_query
</UL>

<P><STRONG><a name="[75b]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input_p2p
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[7c3]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[3a4]"></a>sys_arch_protect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[5b2]"></a>sys_arch_sem_wait</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op_ret
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_wait
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvlwIPInit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_wifi_rec_flg_bit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_inc_wifi_rec_flg_bit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_wifi_rec_flg_bit
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_bitn
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_and_clear_bit
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_clear_bit
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_bitn
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_lock
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[3a6]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[76a]"></a>sys_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[347]"></a>sys_mbox_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; hfmsgq_destroy &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[5a2]"></a>sys_mbox_new</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; hfmsgq_create &rArr; hfmsgq_destroy &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_create
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input_p2p
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[7cb]"></a>sys_mbox_post</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[348]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[341]"></a>sys_mbox_trypost</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[33e]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[69d]"></a>sys_sem_free</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sys_sem_free &rArr; sem_destroy &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvlwIPInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[671]"></a>sys_sem_new</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_check_is_used
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_init
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_new
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_new
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTask
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvlwIPInit
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_lock_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[590]"></a>sys_sem_signal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_sem_signal
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_mutext_unlock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_tcp_send
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_wifi_rec_flg_bit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_inc_wifi_rec_flg_bit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_wifi_rec_flg_bit
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_bitn
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_and_clear_bit
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_clear_bit
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_bitn
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_unlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[59e]"></a>sys_sem_valid</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[75a]"></a>sys_thread_new</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init_p2p
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[3ca]"></a>sys_timeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lwip_timers_140.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[770]"></a>sys_timeouts_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip_timers_140.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[929]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lwip_timers_140.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[92a]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip_timers_140.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[55]"></a>system_dsleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, setup.o(i.system_dsleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = system_dsleep &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[54]"></a>system_reboot</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, setup.o(i.system_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = system_reboot &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[920]"></a>systick_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, setup.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = systick_config &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_schedule
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
</UL>

<P><STRONG><a name="[47]"></a>systick_interrupt</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, setup.o(i.systick_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = systick_interrupt &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[7af]"></a>task_getpid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.task_getpid))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[59]"></a>task_param_set</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(i.task_param_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = task_param_set &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.shell1.cmd)
</UL>
<P><STRONG><a name="[92c]"></a>tcp_abandon</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[7c4]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[592]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[92f]"></a>tcp_alloc</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[342]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[58f]"></a>tcp_bind</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[593]"></a>tcp_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[596]"></a>tcp_connect</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[939]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[93a]"></a>tcp_enqueue_flags</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[346]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[93d]"></a>tcp_fasttmr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[21c]"></a>tcp_get_available</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sockets.o(i.tcp_get_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_get_available
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Send
</UL>

<P><STRONG><a name="[70f]"></a>tcp_input</STRONG> (Thumb, 1454 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[941]"></a>tcp_keepalive</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5a1]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[87a]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[932]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[5b5]"></a>tcp_output</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[936]"></a>tcp_pcb_purge</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[92d]"></a>tcp_pcb_remove</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[345]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[343]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[d2]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[5a4]"></a>tcp_recved</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[949]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[94a]"></a>tcp_rexmit_fast</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[94d]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[92e]"></a>tcp_rst</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[94c]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[93c]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[877]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[945]"></a>tcp_send_empty_ack</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[937]"></a>tcp_send_fin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[344]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[594]"></a>tcp_shutdown</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[94e]"></a>tcp_slowtmr</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[934]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_timers_140.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[950]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[94b]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5b4]"></a>tcp_write</STRONG> (Thumb, 932 bytes, Stack size 112 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[94f]"></a>tcp_zero_window_probe</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[7c2]"></a>tcpip_apimsg</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[77c]"></a>tcpip_callback_with_block</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[89e]"></a>tcpip_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvlwIPInit
</UL>

<P><STRONG><a name="[146]"></a>time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hftime.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = time &rArr; gettimeofday &rArr; _gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[532]"></a>timerPendingTimer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cnm_timer.o(i.timerPendingTimer))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer_impl
</UL>

<P><STRONG><a name="[505]"></a>transform_rssi</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart_cmd_misc.o(i.transform_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_get_rssi
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq_query
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
</UL>

<P><STRONG><a name="[9a]"></a>tx_thread</STRONG> (Thumb, 820 bytes, Stack size 56 bytes, gl_kal.o(i.tx_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tx_thread &rArr; wlanProcessCommandQueue &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_worker_thread_exit_flags
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_worker_thread_exit_flags
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_worker_thread_exit_flags
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidTimeoutCheck
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTimerTimeoutCheck
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSetInformation
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleasePowerControl
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryInformation
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessMboxMessage
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanIST
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanGetTxPendingFrameCount
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanEnqueueTxPacket
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAcquirePowerControl
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_interruptible
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_bitn
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_and_clear_bit
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_clear_bit
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_bitn
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModRunInit
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModRunExit
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pSetMulticastListWorkQueueWrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mv_cm3_main.o(i.main)
</UL>
<P><STRONG><a name="[603]"></a>uart_baud_en2num</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.uart_baud_en2num))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uart_config
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_baudrate
</UL>

<P><STRONG><a name="[90a]"></a>uart_baud_num2en</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.uart_baud_num2en))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbaudrate
</UL>

<P><STRONG><a name="[8c]"></a>uart_thread</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, uart_thread.o(i.uart_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = uart_thread &rArr; uart_thread_cmd_mode &rArr; pars_uart_cmd &rArr; _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_int
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_free
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfnet.o(i.hfnet_start_uart)
</UL>
<P><STRONG><a name="[960]"></a>uart_thread_cmd_mode</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, uart_thread.o(i.uart_thread_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = uart_thread_cmd_mode &rArr; pars_uart_cmd &rArr; _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_send_uart_event
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pars_uart_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[1e1]"></a>udp_bind</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dns_server
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[576]"></a>udp_connect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[59f]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[70e]"></a>udp_input</STRONG> (Thumb, 624 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1e0]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dns_server
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_start
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[1e2]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_assis_thread
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dns_server
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_start
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[575]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_remove &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[5a9]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[58a]"></a>udp_sendto</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_writen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_write
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[299]"></a>udp_sendto_if</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_send_log
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[d6]"></a>update_timer_callback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, updatetest.o(i.update_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_timer_callback &rArr; hfgpio_configure_fpin &rArr; hfgpio_configure_pin &rArr; Set_Gpio_DS
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> updatetest.o(i.test_update_as_http)
</UL>
<P><STRONG><a name="[200]"></a>usart_recv</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, uart_cmd.o(i.usart_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = usart_recv &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndb_num
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFUartAdjust_recv
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_free
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd_mode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_send_num
</UL>

<P><STRONG><a name="[412]"></a>usart_recv_f</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, uart_cmd.o(i.usart_recv_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = usart_recv_f &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd_mode
</UL>

<P><STRONG><a name="[2b7]"></a>usart_send</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uart_cmd.o(i.usart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_send &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_send
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baurate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uartadjs
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndb_num
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcvb_data
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread_cmd_mode
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd_mode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_send_num
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_recv_delay
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgrd_query
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr_query
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_rx_query
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_http_content
</UL>

<P><STRONG><a name="[9c]"></a>user_main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mv_cm3_main.o(i.user_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = user_main &rArr; app_main &rArr; user_upgrade &rArr; hfupdate_auto_upgrade &rArr; do_custom_upgrade &rArr; custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyrigth_is_valid
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade_default
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mv_cm3_main.o(i.main)
</UL>
<P><STRONG><a name="[3c5]"></a>user_upgrade</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, updatetest.o(i.user_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = user_upgrade &rArr; hfupdate_auto_upgrade &rArr; do_custom_upgrade &rArr; custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[5c4]"></a>uuid_gen_mac_addr</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, wps.o(i.uuid_gen_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = uuid_gen_mac_addr &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[88b]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[891]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;early_init_task
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[887]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[2aa]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedTasks
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[a4f]"></a>vListInsertIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertIndex))
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[910]"></a>vListInsertIndexByPid</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsertIndexByPid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsertIndexByPid
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[2b0]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.vListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedTasks
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[924]"></a>vPortEnterCritical</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[926]"></a>vPortExitCritical</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[d7]"></a>vStartEthernetTask</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ethernet.o(i.vStartEthernetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = vStartEthernetTask &rArr; prvlwIPInit &rArr; tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvlwIPInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.vStartEthernetTaskLauncher)
</UL>
<P><STRONG><a name="[78a]"></a>vStartEthernetTaskLauncher</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ethernet.o(i.vStartEthernetTaskLauncher))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = vStartEthernetTaskLauncher &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[699]"></a>vTaskDelete</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskDelete &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_destroy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTask
</UL>

<P><STRONG><a name="[2a6]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, tasks.o(i.vTaskGetRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = vTaskGetRunTimeStats &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGenerateRunTimeStatsForTasksInList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__do_top
</UL>

<P><STRONG><a name="[92b]"></a>vTaskIncrementTick</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, tasks.o(i.vTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskIncrementTick &rArr; prvCheckDelayedTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[5a0]"></a>vTaskList</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, tasks.o(i.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = vTaskList &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_stackinfo
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_free
</UL>

<P><STRONG><a name="[7b3]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
</UL>

<P><STRONG><a name="[7b5]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[2b1]"></a>vTaskResume</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskResume &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[49d]"></a>vTaskSleep</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_smem_query
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanImageSectionDownload
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
</UL>

<P><STRONG><a name="[78c]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_schedule
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_tasks_c_current__save_reg_bank
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ad]"></a>vTaskSuspend</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; EXIT_CRITICAL_SECTION
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[69e]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSuspendAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_suspend_all
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_param_set
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[15c]"></a>vTaskSwitchContext</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pendsv_interrupt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[414]"></a>verify_8bit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_cmd.o(i.verify_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = verify_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_valid
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_f_setting_ok
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reload
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgtf_query
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgfr_query
</UL>

<P><STRONG><a name="[956]"></a>wait_event_interruptible</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gl_os.o(i.wait_event_interruptible))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wait_event_interruptible &rArr; msgq_msg_recv &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[968]"></a>wait_for_completion_timeout</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, gl_os.o(i.wait_for_completion_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wait_for_completion_timeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op_ret
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModInit
</UL>

<P><STRONG><a name="[736]"></a>wake_up_interruptible</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gl_os.o(i.wake_up_interruptible))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalTimeoutHandler
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModInit
</UL>

<P><STRONG><a name="[969]"></a>wep_ascii2hex</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ethernetif.o(i.wep_ascii2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wep_ascii2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hex2ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
</UL>

<P><STRONG><a name="[7ca]"></a>wext_get_channel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wlan_oid.o(i.wext_get_channel))
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>

<P><STRONG><a name="[908]"></a>wext_get_mode</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, wlan_oid.o(i.wext_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wext_get_mode &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_infra
</UL>

<P><STRONG><a name="[503]"></a>wext_query_bssid</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, wlan_oid.o(i.wext_query_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wext_query_bssid &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_query
</UL>

<P><STRONG><a name="[25d]"></a>wext_query_rssi</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, wlan_oid.o(i.wext_query_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wext_query_rssi &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wtest_get_rssi
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslq_query
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_query
</UL>

<P><STRONG><a name="[972]"></a>wext_set_auth</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, wlan_oid.o(i.wext_set_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wext_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_config
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
</UL>

<P><STRONG><a name="[632]"></a>wext_set_disconnect</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, wlan_oid.o(i.wext_set_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wext_set_disconnect &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
</UL>

<P><STRONG><a name="[96b]"></a>wext_set_encode_ext</STRONG> (Thumb, 510 bytes, Stack size 80 bytes, wlan_oid.o(i.wext_set_encode_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wext_set_encode_ext &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep
</UL>

<P><STRONG><a name="[96c]"></a>wext_set_essid</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wlan_oid.o(i.wext_set_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wext_set_essid &rArr; wext_set_ssid &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
</UL>

<P><STRONG><a name="[907]"></a>wext_set_mode</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, wlan_oid.o(i.wext_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wext_set_mode &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_infra
</UL>

<P><STRONG><a name="[8b1]"></a>wext_set_ps_disable</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, wlan_oid.o(i.wext_set_ps_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wext_set_ps_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetPowerSavingDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_saving_mode
</UL>

<P><STRONG><a name="[96f]"></a>wext_set_scan</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, wlan_oid.o(i.wext_set_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wext_set_scan &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wait_for_completion
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
</UL>

<P><STRONG><a name="[7c7]"></a>wext_set_scan_param</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wlan_oid.o(i.wext_set_scan_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wext_set_scan_param &rArr; aisFsmSetScanParam
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSetScanParam
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>

<P><STRONG><a name="[7c8]"></a>wext_set_scantime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wlan_oid.o(i.wext_set_scantime))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reconnect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>

<P><STRONG><a name="[96d]"></a>wext_set_ssid</STRONG> (Thumb, 316 bytes, Stack size 96 bytes, wlan_oid.o(i.wext_set_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = wext_set_ssid &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_essid
</UL>

<P><STRONG><a name="[971]"></a>wifi_config_set_wep</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, ethernetif.o(i.wifi_config_set_wep))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wifi_config_set_wep &rArr; wext_set_encode_ext &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_setup_wep_key
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_encode_ext
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_auth
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
</UL>

<P><STRONG><a name="[973]"></a>wifi_config_set_wpa</STRONG> (Thumb, 264 bytes, Stack size 112 bytes, ethernetif.o(i.wifi_config_set_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = wifi_config_set_wpa &rArr; wpa_sm_init &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_encode_ext
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_auth
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
</UL>

<P><STRONG><a name="[5d9]"></a>wifi_configure</STRONG> (Thumb, 694 bytes, Stack size 264 bytes, ethernetif.o(i.wifi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_ps_disable
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_set_channel
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_rates
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_modes
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_devicecfg
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_struct_conf
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_secumode_sta
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_secumode_ap
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_infra
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_smartlink
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan_param
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_wext_set_key
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_wext_set_auth
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_set_local_dev_info
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>

<P><STRONG><a name="[254]"></a>wifi_configure_scan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ethernetif.o(i.wifi_configure_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_stop
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_unlock
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_lock
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scantime
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan_param
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_func
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mode_change
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_deal_wscan_query
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_scan
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wslk_equa
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wps_query
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wsssid_ssidspecified
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wscan_query
</UL>

<P><STRONG><a name="[97a]"></a>wifi_configure_setup_sta</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, ethernetif.o(i.wifi_configure_setup_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = wifi_configure_setup_sta &rArr; wifi_config_set_wpa &rArr; wpa_sm_init &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wep
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wep_ascii2hex
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_key_config
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_essid
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_auth
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[264]"></a>wifi_reconnect</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, wpa.o(i.wifi_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = wifi_reconnect &rArr; wext_set_essid &rArr; wext_set_ssid &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_stop
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scantime
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_scan_param
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_essid
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[25a]"></a>wifi_restart</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdiocard.o(i.wifi_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wtest
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
</UL>

<P><STRONG><a name="[97b]"></a>wifi_scan_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.wifi_scan_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = wifi_scan_lock &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
</UL>

<P><STRONG><a name="[97e]"></a>wifi_scan_lock_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernetif.o(i.wifi_scan_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wifi_scan_lock_init &rArr; sys_sem_new &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[97c]"></a>wifi_scan_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.wifi_scan_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_scan_unlock &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
</UL>

<P><STRONG><a name="[788]"></a>wifi_secu_cal_ap_pmk</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ethernetif.o(i.wifi_secu_cal_ap_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = wifi_secu_cal_ap_pmk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
</UL>

<P><STRONG><a name="[511]"></a>wifi_secu_cal_pmk</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ethernetif.o(i.wifi_secu_cal_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = wifi_secu_cal_pmk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_wstry_equa
</UL>

<P><STRONG><a name="[24e]"></a>wifi_start</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sdiocard.o(i.wifi_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = wifi_start &rArr; ethernet_reconfigure_interface &rArr; ethernet_configure_interface &rArr; wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_pmk
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_secu_cal_ap_pmk
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_update_config
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_restart
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_start
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_reconfigure_interface
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
</UL>

<P><STRONG><a name="[24d]"></a>wifi_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdiocard.o(i.wifi_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = wifi_stop &rArr; wifi_5931_stop &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wifi
</UL>

<P><STRONG><a name="[97f]"></a>wifi_update_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sdiocard.o(i.wifi_update_config))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
</UL>

<P><STRONG><a name="[7d1]"></a>wifi_wscan_looking_for</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ethernetif.o(i.wifi_wscan_looking_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wifi_wscan_looking_for &rArr; wifi_wscan_get_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_secu_match
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_get_wpa
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
</UL>

<P><STRONG><a name="[7d0]"></a>wifi_wscan_print</STRONG> (Thumb, 370 bytes, Stack size 272 bytes, ethernetif.o(i.wifi_wscan_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = wifi_wscan_print &rArr; print_wscan_one &rArr; wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_scan_result_callback
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_get_wpa
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_mac_list
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_in_mac_list
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAddScanResult
</UL>

<P><STRONG><a name="[854]"></a>wlanAcquirePowerControl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wlan_lib.o(i.wlanAcquirePowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wlanAcquirePowerControl &rArr; nicpmSetDriverOwn &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanTxPendingPackets
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
</UL>

<P><STRONG><a name="[984]"></a>wlanAdapterCreate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wlan_lib.o(i.wlanAdapterCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlanAdapterCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[985]"></a>wlanAdapterStart</STRONG> (Thumb, 1718 bytes, Stack size 64 bytes, wlan_lib.o(i.wlanAdapterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = wlanAdapterStart &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortRead
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxPostInitialize
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxInitialize
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetFWOwn
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxInitialize
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSetAvailablePhyTypeSet
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitializeAdapter
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitSystemService
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicInitMGMT
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetMailbox
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicEnableInterrupt
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDisableInterrupt
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicConfigPowerSaveProfile
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicAllocateAdapterMemory
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerInitTimer
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSetMcuOscStableTime
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryPermanentAddress
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryNicCapability
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanLoadManufactureData
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanImageSectionDownload
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanDefTxPowerCfg
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxResetResource
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[372]"></a>wlanClearBssInScanningResult</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, wlan_lib.o(i.wlanClearBssInScanningResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlanClearBssInScanningResult &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmDisconnect
</UL>

<P><STRONG><a name="[38c]"></a>wlanClearScanningResult</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, wlan_lib.o(i.wlanClearScanningResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlanClearScanningResult &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmScanRequest
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmRunEventJoinTimeout
</UL>

<P><STRONG><a name="[987]"></a>wlanDefTxPowerCfg</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, wlan_lib.o(i.wlanDefTxPowerCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlanDefTxPowerCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[95a]"></a>wlanEnqueueTxPacket</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanEnqueueTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlanEnqueueTxPacket &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSendCompleteAndAwakeQueue
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFillMsduInfo
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxEnqueueMsdu
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[7f9]"></a>wlanGetTxPendingFrameCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wlan_lib.o(i.wlanGetTxPendingFrameCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlanGetTxPendingFrameCount
</UL>
<BR>[Calls]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetTxPendingFrameCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessTxInterrupt
</UL>

<P><STRONG><a name="[e5]"></a>wlanHardStartXmit</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, gl_init.o(i.wlanHardStartXmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlanHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_eapol_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.wifi_config_set_wpa)
</UL>
<P><STRONG><a name="[7bd]"></a>wlanIST</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wlan_lib.o(i.wlanIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wlanIST &rArr; nicpmSetDriverOwn &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetDriverOwn
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessIST
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetFWOwn
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
</UL>

<P><STRONG><a name="[988]"></a>wlanImageSectionDownload</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, wlan_lib.o(i.wlanImageSectionDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = wlanImageSectionDownload &rArr; kalDevPortWrite &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevPortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[32b]"></a>wlanInit</STRONG> (Thumb, 486 bytes, Stack size 80 bytes, gl_init.o(i.wlanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = wlanInit &rArr; wlanAdapterStart &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_worker_thread_exit_flags
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_stop_flag
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_is_restart
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterCreate
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan_lock_init
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOsTimerInitialize
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIoctl
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFirmwareImageMapping
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModInit
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glLoadRegInfo
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[7da]"></a>wlanLoadManufactureData</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, wlan_lib.o(i.wlanLoadManufactureData))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wlanLoadManufactureData &rArr; rlmDomainSendCmd &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetConfigurationVersion
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainSendCmd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventEnterRfTest
</UL>

<P><STRONG><a name="[855]"></a>wlanProcessCommandQueue</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, wlan_lib.o(i.wlanProcessCommandQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = wlanProcessCommandQueue &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanReleaseCommand
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmGetFrameAction
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
</UL>

<P><STRONG><a name="[959]"></a>wlanProcessMboxMessage</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wlan_lib.o(i.wlanProcessMboxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlanProcessMboxMessage &rArr; mboxRcvAllMsg &rArr; cnmMemFree &rArr; _spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxRcvAllMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[8a4]"></a>wlanProcessQueuedMsduInfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wlan_lib.o(i.wlanProcessQueuedMsduInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = wlanProcessQueuedMsduInfo &rArr; nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFreeMsduInfoPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDeactivateStaRec
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDequeueTxPacketsFromPerTypeQueues
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmFreeAllByNetType
</UL>

<P><STRONG><a name="[8a6]"></a>wlanProcessQueuedSwRfb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanProcessQueuedSwRfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessPktWithoutReorder
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessGOBroadcastPkt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessForwardPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDelRxBaEntry
</UL>

<P><STRONG><a name="[864]"></a>wlanProcessSecurityFrame</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, wlan_lib.o(i.wlanProcessSecurityFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlanProcessSecurityFrame &rArr; kalQoSFrameClassifierAndPacketInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalQoSFrameClassifierAndPacketInfo
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
</UL>

<P><STRONG><a name="[732]"></a>wlanQueryInformation</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wlan_lib.o(i.wlanQueryInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlanQueryInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
</UL>

<P><STRONG><a name="[98b]"></a>wlanQueryNicCapability</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, wlan_lib.o(i.wlanQueryNicCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = wlanQueryNicCapability &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxWaitResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[98a]"></a>wlanQueryPermanentAddress</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, wlan_lib.o(i.wlanQueryPermanentAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = wlanQueryPermanentAddress &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxWaitResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[71c]"></a>wlanReleaseCommand</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanReleaseCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = wlanReleaseCommand &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSecurityFrameSendComplete
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMgtPktFree
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFramesByNetType
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalClearMgmtFrames
</UL>

<P><STRONG><a name="[857]"></a>wlanReleasePendingCMDbyNetwork</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, wlan_lib.o(i.wlanReleasePendingCMDbyNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = wlanReleasePendingCMDbyNetwork &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
</UL>

<P><STRONG><a name="[e6]"></a>wlanReleasePendingOid</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, wlan_lib.o(i.wlanReleasePendingOid))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = wlanReleasePendingOid &rArr; kalOidCmdClearance &rArr; kalOidComplete &rArr; wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidCmdClearance
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidClearance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_lib.o(i.wlanAdapterStart)
</UL>
<P><STRONG><a name="[856]"></a>wlanReleasePowerControl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wlan_lib.o(i.wlanReleasePowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlanReleasePowerControl &rArr; nicpmSetFWOwn &rArr; nicProcessIST &rArr; kalDevRegRead &rArr; sdio_readl &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicpmSetFWOwn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFsmUninit
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncDissolve
</UL>

<P><STRONG><a name="[746]"></a>wlanReturnPacket</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanReturnPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalPacketFree
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxSetupRFB
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReturnRFB
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRxIndicatePkts
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxReturnMsduInfo
</UL>

<P><STRONG><a name="[eb]"></a>wlanSecurityFrameTxDone</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanSecurityFrameTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = wlanSecurityFrameTxDone &rArr; secFsmEventEapolTxDone &rArr; secFsmTrans_SEND_EAPOL_to_SEND_DEAUTH &rArr; authSendDeauthFrame &rArr; nicTxEnqueueMsdu &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSecurityFrameSendComplete
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secFsmEventEapolTxDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_lib.o(i.wlanProcessSecurityFrame)
</UL>
<P><STRONG><a name="[ec]"></a>wlanSecurityFrameTxTimeout</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wlan_lib.o(i.wlanSecurityFrameTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = wlanSecurityFrameTxTimeout &rArr; kalSecurityFrameSendComplete &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSecurityFrameSendComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_lib.o(i.wlanProcessSecurityFrame)
</UL>
<P><STRONG><a name="[990]"></a>wlanSendCommand</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, wlan_lib.o(i.wlanSendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegWrite
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalDevRegRead
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxCmd
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAcquireResource
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessCommandQueue
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSetMcuOscStableTime
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryPermanentAddress
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanQueryNicCapability
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferMode
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetSnifferFilter
</UL>

<P><STRONG><a name="[522]"></a>wlanSendSetQueryCmd</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, wlan_oid.o(i.wlanSendSetQueryCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetCSUMOffload
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidQueryCurrentAddr
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicDeactivateNetwork
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicActivateNetwork
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicConfigPowerSaveProfile
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanLoadManufactureData
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssConnected
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmDomainSendCmd
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateBss
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicQmUpdateWmmParms
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssCreated
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicPmIndicateBssAbort
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncSwitchOPMode
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pFuncMgmtFrameRegister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetInfrastructureMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidRftestSetTestMode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidQueryRssi
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateTxPower
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnFsmMsgAbort
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendUpdateCmd
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaSendRemoveCmd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrRequestPrivilege
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmChMngrAbortPrivilege
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReqV2
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scnSendScanReq
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmSyncOperationParams
</UL>

<P><STRONG><a name="[957]"></a>wlanSetInformation</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wlan_lib.o(i.wlanSetInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlanSetInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[989]"></a>wlanSetMcuOscStableTime</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, wlan_lib.o(i.wlanSetMcuOscStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = wlanSetMcuOscStableTime &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[329]"></a>wlanSubModHandlerInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_init.o(i.wlanSubModHandlerInit))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[98f]"></a>wlanSubModInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gl_init.o(i.wlanSubModInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = wlanSubModInit &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_completion_timeout
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pNetRegister
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_bitn
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[702]"></a>wlanSubModRegisterInitExit</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gl_init.o(i.wlanSubModRegisterInitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlanSubModRegisterInitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initP2P
</UL>

<P><STRONG><a name="[954]"></a>wlanSubModRunExit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_init.o(i.wlanSubModRunExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlanSubModRunExit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[953]"></a>wlanSubModRunInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gl_init.o(i.wlanSubModRunInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlanSubModRunInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[95c]"></a>wlanTimerTimeoutCheck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wlan_lib.o(i.wlanTimerTimeoutCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = wlanTimerTimeoutCheck &rArr; cnmTimerDoTimeOutCheck &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[95b]"></a>wlanTxPendingPackets</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanTxPendingPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = wlanTxPendingPackets &rArr; nicTxMsduInfoList &rArr; nicTxMsduQueue &rArr; kalDevPortWrite &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAcquirePowerControl
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxAdjustTcq
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDequeueTxPackets
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxMsduInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[98c]"></a>wlanUpdateNetworkAddress</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, wlan_lib.o(i.wlanUpdateNetworkAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = wlanUpdateNetworkAddress &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRetrieveNetworkAddress
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicCmdEventQueryAddress
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanAdapterStart
</UL>

<P><STRONG><a name="[73a]"></a>wlanoidClearTimeoutCheck</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wlan_lib.o(i.wlanoidClearTimeoutCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = wlanoidClearTimeoutCheck &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOidComplete
</UL>

<P><STRONG><a name="[95]"></a>wlanoidQueryBssid</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, wlan_oid.o(i.wlanoidQueryBssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlanoidQueryBssid
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gl_kal.o(i.kalIndicateStatusAndComplete)
<LI> wlan_oid.o(i.wext_query_bssid)
</UL>
<P><STRONG><a name="[e9]"></a>wlanoidQueryCurrentAddr</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, wlan_oid.o(i.wlanoidQueryCurrentAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wlanoidQueryCurrentAddr &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_init.o(i.wlanInit)
</UL>
<P><STRONG><a name="[d9]"></a>wlanoidQueryInfrastructureMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wlan_oid.o(i.wlanoidQueryInfrastructureMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlanoidQueryInfrastructureMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_get_mode)
</UL>
<P><STRONG><a name="[da]"></a>wlanoidQueryRssi</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, wlan_oid.o(i.wlanoidQueryRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wlanoidQueryRssi &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_query_rssi)
</UL>
<P><STRONG><a name="[8a]"></a>wlanoidRftestQueryAutoTest</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wlan_oid.o(i.wlanoidRftestQueryAutoTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wlanoidRftestQueryAutoTest &rArr; rftestQueryATInfo &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestQueryATInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.hf_priv_do_ctrl_get)
</UL>
<P><STRONG><a name="[89]"></a>wlanoidRftestSetAutoTest</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wlan_oid.o(i.wlanoidRftestSetAutoTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wlanoidRftestSetAutoTest &rArr; rftestSetATInfo &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftestSetATInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.hf_priv_do_ctrl)
</UL>
<P><STRONG><a name="[8b]"></a>wlanoidRftestSetTestMode</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, wlan_oid.o(i.wlanoidRftestSetTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wlanoidRftestSetTestMode &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.hf_wifi_switch_test_mode)
</UL>
<P><STRONG><a name="[992]"></a>wlanoidSendSetQueryP2PCmd</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, wlan_p2p.o(i.wlanoidSendSetQueryP2PCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlanoidSendSetQueryP2PCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetRemoveP2PKey
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddP2PKey
</UL>

<P><STRONG><a name="[e0]"></a>wlanoidSetAddKey</STRONG> (Thumb, 590 bytes, Stack size 48 bytes, wlan_oid.o(i.wlanoidSetAddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = wlanoidSetAddKey &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnCheckPmkidCandicate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddWep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_encode_ext)
</UL>
<P><STRONG><a name="[bb]"></a>wlanoidSetAddP2PKey</STRONG> (Thumb, 326 bytes, Stack size 120 bytes, wlan_p2p.o(i.wlanoidSetAddP2PKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wlanoidSetAddP2PKey &rArr; wlanoidSendSetQueryP2PCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetRole
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gl_p2p.o(i.p2p_wext_set_key)
<LI> gl_p2p_cfg80211.o(i.p2p_cfg80211_add_key)
</UL>
<P><STRONG><a name="[dd]"></a>wlanoidSetAddWep</STRONG> (Thumb, 214 bytes, Stack size 104 bytes, wlan_oid.o(i.wlanoidSetAddWep))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = wlanoidSetAddWep &rArr; wlanoidSetAddKey &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSetAddKey
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_encode_ext)
</UL>
<P><STRONG><a name="[de]"></a>wlanoidSetAuthMode</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, wlan_oid.o(i.wlanoidSetAuthMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlanoidSetAuthMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wlan_oid.o(i.wext_set_encode_ext)
<LI> wlan_oid.o(i.wext_set_ssid)
</UL>
<P><STRONG><a name="[e4]"></a>wlanoidSetBssid</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, wlan_oid.o(i.wlanoidSetBssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = wlanoidSetBssid &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetMediaStateIndicated
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_ssid)
</UL>
<P><STRONG><a name="[e2]"></a>wlanoidSetBssidListScan</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, wlan_oid.o(i.wlanoidSetBssidListScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = wlanoidSetBssidListScan &rArr; aisFsmScanRequest &rArr; aisFsmSteps &rArr; nicDeactivateNetwork &rArr; cnmStaFreeAllStaByNetType &rArr; cnmStaRecFree &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmScanRequest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_scan)
</UL>
<P><STRONG><a name="[ea]"></a>wlanoidSetCSUMOffload</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, wlan_oid.o(i.wlanoidSetCSUMOffload))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wlanoidSetCSUMOffload &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_init.o(i.wlanInit)
</UL>
<P><STRONG><a name="[db]"></a>wlanoidSetDisassociate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, wlan_oid.o(i.wlanoidSetDisassociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = wlanoidSetDisassociate &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_disconnect)
</UL>
<P><STRONG><a name="[df]"></a>wlanoidSetEncryptionStatus</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, wlan_oid.o(i.wlanoidSetEncryptionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wlanoidSetEncryptionStatus &rArr; secSetCipherSuite &rArr; rsnSearchSupportedCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secSetCipherSuite
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wlan_oid.o(i.wext_set_encode_ext)
<LI> wlan_oid.o(i.wext_set_ssid)
</UL>
<P><STRONG><a name="[e1]"></a>wlanoidSetInfrastructureMode</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, wlan_oid.o(i.wlanoidSetInfrastructureMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlanoidSetInfrastructureMode &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_mode)
</UL>
<P><STRONG><a name="[96e]"></a>wlanoidSetPowerSavingDisable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wlan_oid.o(i.wlanoidSetPowerSavingDisable))
<BR><BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_ps_disable
</UL>

<P><STRONG><a name="[dc]"></a>wlanoidSetRemoveKey</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, wlan_oid.o(i.wlanoidSetRemoveKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlanoidSetRemoveKey &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalEnqueueCommand
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_encode_ext)
</UL>
<P><STRONG><a name="[bc]"></a>wlanoidSetRemoveP2PKey</STRONG> (Thumb, 164 bytes, Stack size 120 bytes, wlan_p2p.o(i.wlanoidSetRemoveP2PKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wlanoidSetRemoveP2PKey &rArr; wlanoidSendSetQueryP2PCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalP2PGetRole
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidSendSetQueryP2PCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_p2p.o(i.p2p_wext_set_key)
</UL>
<P><STRONG><a name="[644]"></a>wlanoidSetSnifferFilter</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, wlan_oid.o(i.wlanoidSetSnifferFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = wlanoidSetSnifferFilter &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_start_sniffer_mode
</UL>

<P><STRONG><a name="[643]"></a>wlanoidSetSnifferMode</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, wlan_oid.o(i.wlanoidSetSnifferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_ver
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufFreeCmdInfo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdBufAllocateCmdInfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIncreaseCmdSeqNum
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_stop_sniffer_mode
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_start_sniffer_mode
</UL>

<P><STRONG><a name="[e3]"></a>wlanoidSetSsid</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, wlan_oid.o(i.wlanoidSetSsid))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = wlanoidSetSsid &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetMediaStateIndicated
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalIndicateStatusAndComplete
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalGetMediaStateIndicated
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mboxSendMsg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_oid.o(i.wext_set_ssid)
</UL>
<P><STRONG><a name="[865]"></a>wlanoidSetWSCAssocInfo</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wlan_oid.o(i.wlanoidSetWSCAssocInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlanoidSetWSCAssocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pIEProcessConnReqP2P_IE
</UL>

<P><STRONG><a name="[958]"></a>wlanoidTimeoutCheck</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wlan_lib.o(i.wlanoidTimeoutCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wlanoidTimeoutCheck &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_thread
</UL>

<P><STRONG><a name="[92]"></a>wpaTask</STRONG> (Thumb, 704 bytes, Stack size 24 bytes, wpa.o(i.wpaTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744 + Unknown Stack Size
<LI>Call Chain = wpaTask &rArr; wps_supplicant_rx_eapol &rArr; eap_wsc_process &rArr; wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_worker_thread_exit_flags
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_worker_thread_exit_flags
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_set_wifi_rec_flg_bit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_wifi_rec_flg_bit
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_config
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_disassoc
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaAuthTimerSet
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_start
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa.o(i.init_wpaTask)
</UL>
<P><STRONG><a name="[99d]"></a>wpa_add_kde</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wpa.o(i.wpa_add_kde))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_add_kde
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_3_of_4
</UL>

<P><STRONG><a name="[99e]"></a>wpa_auth_gen_wpa_ie</STRONG> (Thumb, 106 bytes, Stack size 144 bytes, wpa.o(i.wpa_auth_gen_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wpa_auth_gen_wpa_ie &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
</UL>

<P><STRONG><a name="[3b4]"></a>wpa_auth_get_wpa_ie</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wpa.o(i.wpa_auth_get_wpa_ie))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_wpa
</UL>

<P><STRONG><a name="[979]"></a>wpa_auth_init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, wpa.o(i.wpa_auth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = wpa_auth_init &rArr; wpa_group_init &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_del_all
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
</UL>

<P><STRONG><a name="[9a2]"></a>wpa_auth_sta_init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, wpa.o(i.wpa_auth_sta_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wpa_auth_sta_init &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
</UL>

<P><STRONG><a name="[9a3]"></a>wpa_compare_rsn_ie</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wpa.o(i.wpa_compare_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_compare_rsn_ie &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[9a5]"></a>wpa_eapol_key_mic</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, wpa.o(i.wpa_eapol_key_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[9a6]"></a>wpa_eapol_key_send</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, wpa.o(i.wpa_eapol_key_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
</UL>

<P><STRONG><a name="[9a8]"></a>wpa_gen_wpa_ie</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, wpa.o(i.wpa_gen_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_gen_wpa_ie &rArr; wpa_gen_wpa_ie_rsn
</UL>
<BR>[Calls]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_wpa
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
</UL>

<P><STRONG><a name="[9a1]"></a>wpa_group_init</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, wpa.o(i.wpa_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = wpa_group_init &rArr; wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gmk_to_gtk
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_init
</UL>

<P><STRONG><a name="[9b1]"></a>wpa_parse_kde_ies</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wpa.o(i.wpa_parse_kde_ies))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_parse_kde_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[9b3]"></a>wpa_parse_wpa_ie_rsn</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, wpa.o(i.wpa_parse_wpa_ie_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wpa_parse_wpa_ie_rsn &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_selector_to_bitfield
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_key_mgmt_to_bitfield
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[3ac]"></a>wpa_pmk_to_ptk</STRONG> (Thumb, 162 bytes, Stack size 128 bytes, wpa.o(i.wpa_pmk_to_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_wpa_derive_ptk
</UL>

<P><STRONG><a name="[998]"></a>wpa_receive</STRONG> (Thumb, 440 bytes, Stack size 128 bytes, wpa.o(i.wpa_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = wpa_receive &rArr; ap_wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_replay_counter_valid
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pairewise_config_keys
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_wpa_derive_ptk
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_3_of_4
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[9b8]"></a>wpa_send_3_of_4</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, wpa.o(i.wpa_send_3_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = wpa_send_3_of_4 &rArr; wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[974]"></a>wpa_sm_init</STRONG> (Thumb, 204 bytes, Stack size 128 bytes, wpa.o(i.wpa_sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = wpa_sm_init &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_config_set_wpa
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
</UL>

<P><STRONG><a name="[9bb]"></a>wpa_sm_rx_eapol</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, wpa.o(i.wpa_sm_rx_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[9ba]"></a>wpa_sm_set_assoc_wpa_ie_default</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wpa.o(i.wpa_sm_set_assoc_wpa_ie_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wpa_sm_set_assoc_wpa_ie_default &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_update
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
</UL>

<P><STRONG><a name="[9c2]"></a>wpa_sm_update</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, wpa.o(i.wpa_sm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wpa_sm_update &rArr; wpa_sm_set_assoc_wpa_ie_default &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_config
</UL>

<P><STRONG><a name="[9ca]"></a>wpa_supplicant_parse_ies</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, wpa.o(i.wpa_supplicant_parse_ies))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_supplicant_parse_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
</UL>

<P><STRONG><a name="[99a]"></a>wpa_supplicant_rx_eapol</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, wpa.o(i.wpa_supplicant_rx_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[9d1]"></a>wpa_supplicant_send_2_of_4</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, wpa.o(i.wpa_supplicant_send_2_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = wpa_supplicant_send_2_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supp_alloc_eapol
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[9d3]"></a>wpa_supplicant_send_4_of_4</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, wpa.o(i.wpa_supplicant_send_4_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = wpa_supplicant_send_4_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supp_alloc_eapol
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[9ae]"></a>wpa_validate_wpa_ie</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, wpa.o(i.wpa_validate_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wpa_validate_wpa_ie &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
</UL>

<P><STRONG><a name="[99f]"></a>wpa_write_rsn_ie</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, wpa.o(i.wpa_write_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_write_rsn_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[547]"></a>wpabuf_alloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wpabuf.o(i.wpabuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[9d5]"></a>wpabuf_alloc_copy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpabuf.o(i.wpabuf_alloc_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wpabuf_alloc_copy &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_pubkey
</UL>

<P><STRONG><a name="[9d7]"></a>wpabuf_dup</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wpabuf_dup &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[54a]"></a>wpabuf_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpabuf.o(i.wpabuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wpabuf_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_pubkey
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[54b]"></a>wpabuf_put</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_overflow
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wps_state
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_os_version
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>

<P><STRONG><a name="[9e7]"></a>wpabuf_zeropad</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_zeropad))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wpabuf_zeropad &rArr; wpabuf_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[9e8]"></a>wps_build_assoc_state</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_assoc_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_assoc_state &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9e9]"></a>wps_build_auth_type_flags</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_auth_type_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_auth_type_flags &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9ea]"></a>wps_build_authenticator</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, wps_attr_build.o(i.wps_build_authenticator))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = wps_build_authenticator &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
</UL>

<P><STRONG><a name="[9eb]"></a>wps_build_config_error</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_config_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_config_error &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
</UL>

<P><STRONG><a name="[9ec]"></a>wps_build_config_methods</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_config_methods))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_config_methods &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9ed]"></a>wps_build_conn_type_flags</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_conn_type_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_conn_type_flags &rArr; wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9ee]"></a>wps_build_dev_name</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_dev_name &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[9ef]"></a>wps_build_dev_password_id</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_dev_password_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_dev_password_id &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9f0]"></a>wps_build_device_attrs</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_device_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wps_build_device_attrs &rArr; wps_build_primary_dev_type &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_serial_number
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9fb]"></a>wps_build_encr_settings</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, wps_attr_build.o(i.wps_build_encr_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = wps_build_encr_settings &rArr; aes_128_cbc_encrypt &rArr; aes_encrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
</UL>

<P><STRONG><a name="[9fc]"></a>wps_build_encr_type_flags</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_encr_type_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_encr_type_flags &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9fd]"></a>wps_build_enrollee_nonce</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_enrollee_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_enrollee_nonce &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[9fe]"></a>wps_build_key_wrap_auth</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, wps_attr_build.o(i.wps_build_key_wrap_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wps_build_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
</UL>

<P><STRONG><a name="[9f1]"></a>wps_build_manufacturer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_manufacturer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_manufacturer &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[9f2]"></a>wps_build_model_name</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_model_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_model_name &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[9f3]"></a>wps_build_model_number</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_model_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_model_number &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[a02]"></a>wps_build_msg_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_msg_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_msg_type &rArr; wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[a08]"></a>wps_build_os_version</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wps_dev_attr.o(i.wps_build_os_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_os_version &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9f5]"></a>wps_build_primary_dev_type</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_primary_dev_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_primary_dev_type &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[a05]"></a>wps_build_public_key</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, wps_attr_build.o(i.wps_build_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_free
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a0c]"></a>wps_build_registrar_nonce</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_registrar_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_registrar_nonce &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[a07]"></a>wps_build_rf_bands</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_rf_bands))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wps_build_rf_bands &rArr; wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a03]"></a>wps_build_uuid_e</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wps_attr_build.o(i.wps_build_uuid_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_uuid_e &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a01]"></a>wps_build_version</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wps_attr_build.o(i.wps_build_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wps_build_version &rArr; wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[a09]"></a>wps_build_wfa_ext</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, wps_attr_build.o(i.wps_build_wfa_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wps_build_wfa_ext &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>

<P><STRONG><a name="[a10]"></a>wps_build_wsc_ack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_wsc_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wps_build_wsc_ack &rArr; wpabuf_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[a13]"></a>wps_build_wsc_nack</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_wsc_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wps_build_wsc_nack &rArr; wpabuf_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[672]"></a>wps_check_active</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mv_cm3_main.o(i.wps_check_active))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_httpd
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_assis
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
</UL>

<P><STRONG><a name="[a14]"></a>wps_decrypt_encr_settings</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, wps_enrollee.o(i.wps_decrypt_encr_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wps_decrypt_encr_settings &rArr; aes_128_cbc_decrypt &rArr; aes_decrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[a15]"></a>wps_derive_keys</STRONG> (Thumb, 272 bytes, Stack size 200 bytes, wps_enrollee.o(i.wps_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472 + Unknown Stack Size
<LI>Call Chain = wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_pubkey
</UL>

<P><STRONG><a name="[a0b]"></a>wps_derive_psk</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, wps_enrollee.o(i.wps_derive_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wps_derive_psk &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
</UL>

<P><STRONG><a name="[5c3]"></a>wps_dev_type_str2bin</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wps.o(i.wps_dev_type_str2bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wps_dev_type_str2bin &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[a17]"></a>wps_done_callback</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, wps.o(i.wps_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = wps_done_callback &rArr; wpa_sm_init &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_disconnect
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_essid
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_auth
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[a19]"></a>wps_enrollee_get_msg</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_enrollee_get_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312 + Unknown Stack Size
<LI>Call Chain = wps_enrollee_get_msg &rArr; wps_build_m1 &rArr; wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_get_msg
</UL>

<P><STRONG><a name="[a1a]"></a>wps_enrollee_process_msg</STRONG> (Thumb, 154 bytes, Stack size 512 bytes, wps_enrollee.o(i.wps_enrollee_process_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544 + Unknown Stack Size
<LI>Call Chain = wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_validate_wsc_nack
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_validate_wsc_ack
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_msg
</UL>

<P><STRONG><a name="[a4d]"></a>wps_fail_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wps_enrollee.o(i.wps_fail_event))
<BR><BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[5ca]"></a>wps_get_msg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wps.o(i.wps_get_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 3328 + Unknown Stack Size
<LI>Call Chain = wps_get_msg &rArr; wps_enrollee_get_msg &rArr; wps_build_m1 &rArr; wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[5c5]"></a>wps_init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wps.o(i.wps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = wps_init &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[a16]"></a>wps_kdf</STRONG> (Thumb, 194 bytes, Stack size 136 bytes, wps_enrollee.o(i.wps_kdf))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = wps_kdf &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[8e4]"></a>wps_pars_beancon</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, wps.o(i.wps_pars_beancon))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = wps_pars_beancon &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
</UL>

<P><STRONG><a name="[a1b]"></a>wps_parse_msg</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, wps.o(i.wps_parse_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext &rArr; wps_parse_vendor_ext_wfa &rArr; wps_set_vendor_ext_wfa_subelem
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_attr
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[a25]"></a>wps_process_authenticator</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, wps_attr_process.o(i.wps_process_authenticator))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = wps_process_authenticator &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[a27]"></a>wps_process_cred</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, wps_attr_process.o(i.wps_process_cred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wps_process_cred &rArr; wps_process_cred_ssid
</UL>
<BR>[Calls]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_workaround_cred_key
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_ssid
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key_idx
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_idx
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_mac_addr
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_key_prov_auto
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_encr_type
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_eap_type
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_eap_identity
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_auth_type
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_802_1x_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[a37]"></a>wps_process_device_attrs</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_process_device_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = wps_process_device_attrs &rArr; wps_process_serial_number &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_serial_number
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_primary_dev_type
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_number
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_model_name
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_manufacturer
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_dev_name
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[a3e]"></a>wps_process_key_wrap_auth</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, wps_attr_process.o(i.wps_process_key_wrap_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = wps_process_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[5c9]"></a>wps_process_msg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wps.o(i.wps_process_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4560 + Unknown Stack Size
<LI>Call Chain = wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[a4c]"></a>wps_pwd_auth_fail_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wps_enrollee.o(i.wps_pwd_auth_fail_event))
<BR><BR>[Called By]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
</UL>

<P><STRONG><a name="[97d]"></a>wps_set_key_config</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wps.o(i.wps_set_key_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = wps_set_key_config &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_setup_sta
</UL>

<P><STRONG><a name="[99c]"></a>wps_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wps.o(i.wps_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wps_start &rArr; wps_txStart &rArr; wps_eapol_send &rArr; wlanHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_txStart
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[a00]"></a>wps_state_change</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mv_cm3_main.o(i.wps_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_state_change &rArr; getSystime
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[78b]"></a>wps_state_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mv_cm3_main.o(i.wps_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wps_state_init &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_read_int
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a12]"></a>wps_success_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wps_enrollee.o(i.wps_success_event))
<BR><BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
</UL>

<P><STRONG><a name="[999]"></a>wps_supplicant_rx_eapol</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, wps.o(i.wps_supplicant_rx_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720 + Unknown Stack Size
<LI>Call Chain = wps_supplicant_rx_eapol &rArr; eap_wsc_process &rArr; wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_done_callback
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_eapol_send
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapReq
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[a4e]"></a>wps_txStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wps.o(i.wps_txStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wps_txStart &rArr; wps_eapol_send &rArr; wlanHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_eapol_send
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_start
</UL>

<P><STRONG><a name="[25e]"></a>write_error_num</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, uart_cmd_misc.o(i.write_error_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = write_error_num &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_trapfault_handler_dumpstack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reset_flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_router_isOK
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sdio_func
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_valid
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxReadBuffer
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxPollingResource
</UL>

<P><STRONG><a name="[59b]"></a>write_upgrade_step</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uart_cmd_update.o(i.write_upgrade_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = write_upgrade_step &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
</UL>

<P><STRONG><a name="[882]"></a>wscan_print_rsn</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ethernetif.o(i.wscan_print_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wscan_print_rsn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_web
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one_assis
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_wscan_one
</UL>

<P><STRONG><a name="[696]"></a>xTaskGenericCreate</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_stack_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndexByPid
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTaskLauncher
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_create
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[69a]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_get_current_handle
</UL>

<P><STRONG><a name="[334]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_reload_interrupt_func
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_process_normal_mode
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalRandomNumber
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessSecurityFrame
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_completion_timeout
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmsgq_send
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsnTkipHandleMICFailure
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateLinkQuality
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTxFillMsduInfo
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authSendDeauthFrame
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAssoc
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxWaitResponse
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicRxProcessEventPacket
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saaFsmRunEventStart
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanUpdateNetworkAddress
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanSearchBssDescByPolicy
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanRemoveBssDescsByPolicy
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAddToBssDesc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanoidQueryRssi
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateRSSI
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicMediaStateChange
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aisFsmSteps
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aaaFsmRunEventRxAuth
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateLinkSpeed
</UL>

<P><STRONG><a name="[965]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.xTaskIsTaskSuspended), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[7b2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndex
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>

<P><STRONG><a name="[69c]"></a>xTaskResumeAll</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndex
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_sub_return
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_resume_all
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_param_set
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[6b0]"></a>xTimerCreate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, timerss.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = xTimerCreate &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaAuthTimerInit
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalOsTimerInitialize
</UL>

<P><STRONG><a name="[789]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timerss.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b2]"></a>xTimerGenericCommand</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, timerss.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_delete
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_stop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaAuthTimerSet
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetTimer
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[8b2]"></a>yz_check_buf</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart_cmd_misc.o(i.yz_check_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yz_check_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sndbck_num
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sendck_num
</UL>

<P><STRONG><a name="[61]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[13c]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[a53]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[6ae]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
</UL>

<P><STRONG><a name="[a51]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[6a3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[a54]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[a56]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[a52]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[a59]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[6a2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[a55]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[6a1]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[a57]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[6ac]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
</UL>

<P><STRONG><a name="[a5a]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a61]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[6a0]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[a5d]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[627]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
</UL>

<P><STRONG><a name="[a5e]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[6a6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[a5f]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[6af]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
</UL>

<P><STRONG><a name="[ad1]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[6a9]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_reference
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
</UL>

<P><STRONG><a name="[ad2]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[ad3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[a60]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[a64]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[626]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_update_timer_adjust_factor
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_time
</UL>

<P><STRONG><a name="[a62]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a58]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a5c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[6b4]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_init
</UL>

<P><STRONG><a name="[a63]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ad4]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[a65]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[117]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[11b]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__mv_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>hf_atcmd_upgrade_sw</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, updatetest.o(i.hf_atcmd_upgrade_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_upgrade_sw &rArr; test_update_as_http &rArr; http_read_content &rArr; http_read_chunked &rArr; get_content_len &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_update_as_http
</UL>
<BR>[Address Reference Count : 1]<UL><LI> updatetest.o(.constdata)
</UL>
<P><STRONG><a name="[62d]"></a>test_update_as_http</STRONG> (Thumb, 562 bytes, Stack size 200 bytes, updatetest.o(i.test_update_as_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = test_update_as_http &rArr; http_read_content &rArr; http_read_chunked &rArr; get_content_len &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_request
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_content
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_prepare_req
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_session
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_write_file
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_start
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_delete
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_create
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_enable_all_soft_watchdogs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_disable_all_soft_watchdogs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_upgrade_sw
</UL>

<P><STRONG><a name="[72]"></a>uart_recv_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, updatetest.o(i.uart_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_recv_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> updatetest.o(i.app_main)
</UL>
<P><STRONG><a name="[537]"></a>copyrigth_is_valid</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mv_cm3_main.o(i.copyrigth_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = copyrigth_is_valid &rArr; hfmem_malloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_get_level
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[1f3]"></a>GpioInterruptInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hfgpio.o(i.GpioInterruptInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GpioInterruptInit &rArr; hfgpio_configure_fpin_interrupt &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_init_gpio_pin
</UL>

<P><STRONG><a name="[5fa]"></a>check_fid_valid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hfgpio.o(i.check_fid_valid))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fenable_interrupt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fdisable_interrupt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_pin
</UL>

<P><STRONG><a name="[67]"></a>do_start_wps</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hfgpio.o(i.do_start_wps))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_start_wps &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fpin_is_high
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfgpio.o(i.GpioInterruptInit)
</UL>
<P><STRONG><a name="[14c]"></a>get_chip_pin</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hfgpio.o(i.get_chip_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = get_chip_pin &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fid_valid
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
</UL>

<P><STRONG><a name="[660]"></a>hfgpio_get_interrupt_vector</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hfgpio.o(i.hfgpio_get_interrupt_vector))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_fenable_interrupt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin_interrupt
</UL>

<P><STRONG><a name="[66]"></a>hfgpio_reload_interrupt_func</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hfgpio.o(i.hfgpio_reload_interrupt_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hfgpio_reload_interrupt_func &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfgpio.o(i.GpioInterruptInit)
</UL>
<P><STRONG><a name="[675]"></a>hfuart_set_recv_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hfnet.o(i.hfuart_set_recv_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_start_uart
</UL>

<P><STRONG><a name="[5ad]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hfsys.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_softreset
</UL>

<P><STRONG><a name="[698]"></a>hfthread_get_current_handle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hfthread.o(i.hfthread_get_current_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfthread_get_current_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_destroy
</UL>

<P><STRONG><a name="[6a7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hftimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_start
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust
</UL>

<P><STRONG><a name="[69f]"></a>hftimer_adjust</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, hftimer.o(i.hftimer_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hftimer_adjust &rArr; Timer1Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Set
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1HaltModeSet
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Close
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_auto_adjust
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_adjust_external_rtc
</UL>

<P><STRONG><a name="[2b9]"></a>_http_add_header</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, httpclient.o(i._http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _http_add_header &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
</UL>

<P><STRONG><a name="[2ba]"></a>_http_get_response_hdr_value</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, httpclient.o(i._http_get_response_hdr_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _http_get_response_hdr_value &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_pair
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr_value
</UL>

<P><STRONG><a name="[2bd]"></a>_http_parse_URL</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, httpclient.o(i._http_parse_URL))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _http_parse_URL &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
</UL>

<P><STRONG><a name="[2bf]"></a>_http_prepare_req</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, httpclient.o(i._http_prepare_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _http_prepare_req &rArr; sanitize_resource_name &rArr; http_parse_URL &rArr; _http_parse_URL &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_add_header
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanitize_resource_name
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version_string
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_method_string
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_prepare_req
</UL>

<P><STRONG><a name="[2c3]"></a>_http_raw_recv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, httpclient.o(i._http_raw_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefetch_header
</UL>

<P><STRONG><a name="[2c4]"></a>_http_raw_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, httpclient.o(i._http_raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _http_raw_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_send_request
</UL>

<P><STRONG><a name="[2c5]"></a>_http_send_request</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, httpclient.o(i._http_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = _http_send_request &rArr; _http_raw_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_raw_send
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_request
</UL>

<P><STRONG><a name="[322]"></a>_parse_http_header</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, httpclient.o(i._parse_http_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _parse_http_header &rArr; load_header_fields &rArr; parse_keep_alive_header &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr
</UL>

<P><STRONG><a name="[541]"></a>delete_session_object</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, httpclient.o(i.delete_session_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = delete_session_object &rArr; hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_session
</UL>

<P><STRONG><a name="[5fc]"></a>get_content_len</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, httpclient.o(i.get_content_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = get_content_len &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_chunked
</UL>

<P><STRONG><a name="[2bb]"></a>get_header_pair</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, httpclient.o(i.get_header_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_header_pair
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_get_response_hdr_value
</UL>

<P><STRONG><a name="[2c0]"></a>get_method_string</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, httpclient.o(i.get_method_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_method_string &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
</UL>

<P><STRONG><a name="[2c1]"></a>get_version_string</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, httpclient.o(i.get_version_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_version_string &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
</UL>

<P><STRONG><a name="[6dc]"></a>http_read_chunked</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, httpclient.o(i.http_read_chunked))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = http_read_chunked &rArr; get_content_len &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zap_chunk_boundary
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_content_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_content
</UL>

<P><STRONG><a name="[6df]"></a>http_read_no_special_len</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, httpclient.o(i.http_read_no_special_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = http_read_no_special_len &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_content
</UL>

<P><STRONG><a name="[6e0]"></a>http_read_standard</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, httpclient.o(i.http_read_standard))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = http_read_standard &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_content
</UL>

<P><STRONG><a name="[323]"></a>load_header_fields</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, httpclient.o(i.load_header_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = load_header_fields &rArr; parse_keep_alive_header &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_date_to_time
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_keep_alive_header
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_http_header
</UL>

<P><STRONG><a name="[6d0]"></a>month_from_string_short</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, httpclient.o(i.month_from_string_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = month_from_string_short &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_date_to_time
</UL>

<P><STRONG><a name="[7bf]"></a>net_gethostbyname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, httpclient.o(i.net_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = net_gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
</UL>

<P><STRONG><a name="[6da]"></a>new_session_object</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, httpclient.o(i.new_session_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = new_session_object &rArr; hfmem_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
</UL>

<P><STRONG><a name="[754]"></a>parse_keep_alive_header</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, httpclient.o(i.parse_keep_alive_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = parse_keep_alive_header &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_header_fields
</UL>

<P><STRONG><a name="[6d2]"></a>prefetch_header</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, httpclient.o(i.prefetch_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = prefetch_header &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_raw_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_response_hdr
</UL>

<P><STRONG><a name="[5fd]"></a>recv_buf</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, httpclient.o(i.recv_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_raw_recv
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zap_chunk_boundary
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_standard
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_no_special_len
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_chunked
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_content_len
</UL>

<P><STRONG><a name="[2c2]"></a>sanitize_resource_name</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, httpclient.o(i.sanitize_resource_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = sanitize_resource_name &rArr; http_parse_URL &rArr; _http_parse_URL &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_URL
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_prepare_req
</UL>

<P><STRONG><a name="[6db]"></a>tcp_connect</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, httpclient.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_socket &rArr; hf_lwip_socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_connect
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_session
</UL>

<P><STRONG><a name="[938]"></a>tcp_socket</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, httpclient.o(i.tcp_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcp_socket &rArr; hf_lwip_socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_socket
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_gethostbyname
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[6dd]"></a>zap_chunk_boundary</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, httpclient.o(i.zap_chunk_boundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = zap_chunk_boundary &rArr; recv_buf &rArr; _http_raw_recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_buf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_read_chunked
</UL>

<P><STRONG><a name="[6bc]"></a>hfupdate_wifi_fw</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, hfupdate.o(i.hfupdate_wifi_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hfupdate_wifi_fw &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_config_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_complete
</UL>

<P><STRONG><a name="[6bb]"></a>set_success_pin</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hfupdate.o(i.set_success_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_success_pin &rArr; hfgpio_configure_fpin &rArr; hfgpio_configure_pin &rArr; Set_Gpio_DS
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_get_pid
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfupdate_auto_upgrade_default
</UL>

<P><STRONG><a name="[1e4]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, setup.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
</UL>

<P><STRONG><a name="[794]"></a>mmm_memzcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mmm.o(i.mmm_memzcmp))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
</UL>

<P><STRONG><a name="[22b]"></a>MD5Transform</STRONG> (Thumb, 1756 bytes, Stack size 132 bytes, crypt.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[22a]"></a>byteReverse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crypt.o(i.byteReverse))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteReverse
</UL>

<P><STRONG><a name="[61c]"></a>hex2num</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crypt.o(i.hex2num))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>

<P><STRONG><a name="[874]"></a>pbkdf2_sha1_f</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, crypt.o(i.pbkdf2_sha1_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
</UL>

<P><STRONG><a name="[354]"></a>rijndaelDecrypt</STRONG> (Thumb, 758 bytes, Stack size 40 bytes, crypt.o(i.rijndaelDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rijndaelDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[914]"></a>sha256_compress</STRONG> (Thumb, 270 bytes, Stack size 320 bytes, crypt.o(i.sha256_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
</UL>

<P><STRONG><a name="[913]"></a>sha256_done</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, crypt.o(i.sha256_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sha256_done &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[915]"></a>sha256_process</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, crypt.o(i.sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[549]"></a>wpabuf_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crypt.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>

<P><STRONG><a name="[548]"></a>wpabuf_mhead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crypt.o(i.wpabuf_mhead))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>

<P><STRONG><a name="[5d8]"></a>ethernet_configure_interface</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_configure_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = ethernet_configure_interface &rArr; wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dns_server
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_status_callback
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_start
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_reconfigure_interface
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
</UL>

<P><STRONG><a name="[89d]"></a>prvlwIPInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ethernet.o(i.prvlwIPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = prvlwIPInit &rArr; tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEthernetTask
</UL>

<P><STRONG><a name="[c1]"></a>tcpip_init_done</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ethernet.o(i.tcpip_init_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = tcpip_init_done &rArr; ethernet_configure_interface &rArr; wifi_configure &rArr; apd_ieee802_11_set_beacon &rArr; p2p_cfg80211_add_set_beacon &rArr; mboxSendMsg &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_configure_interface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.prvlwIPInit)
</UL>
<P><STRONG><a name="[26c]"></a>SD_EnableHighSpeed</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sdiocard.o(i.SD_EnableHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_EnableHighSpeed &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[26d]"></a>SD_EnableWide4</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sdiocard.o(i.SD_EnableWide4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_EnableWide4 &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[27a]"></a>SD_ReadCommonCis</STRONG> (Thumb, 244 bytes, Stack size 104 bytes, sdiocard.o(i.SD_ReadCommonCis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_ReadCommonCis &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[27b]"></a>SD_SetBlockSize</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sdiocard.o(i.SD_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_SetBlockSize &rArr; SD_IOReadDirectly &rArr; SdioSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[327]"></a>_wifi_5931_start</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, sdiocard.o(i._wifi_5931_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = _wifi_5931_start &rArr; wlanInit &rArr; wlanAdapterStart &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_High
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSetClk
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioSendCommand
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdioGetCmdResp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdControllerInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSdIoConfig
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableFunc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ClaimInterrupt
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_stop
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCommonCis
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWide4
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableHighSpeed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSubModHandlerInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initP2P
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_5931_start
</UL>

<P><STRONG><a name="[259]"></a>assis_ping_func</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdiocard.o(i.assis_ping_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = assis_ping_func &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddress
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[260]"></a>check_mode_change</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, sdiocard.o(i.check_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = check_mode_change &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[25c]"></a>check_sdio_func</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sdiocard.o(i.check_sdio_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = check_sdio_func &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[25b]"></a>check_wifi_func</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sdiocard.o(i.check_wifi_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = check_wifi_func &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[885]"></a>process_sdio_pending_irqs</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sdiocard.o(i.process_sdio_pending_irqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = process_sdio_pending_irqs &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_error_num
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IOReadDirectly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_restart
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_sdio_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_process_sniffer_mode
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_process_normal_mode
</UL>

<P><STRONG><a name="[24b]"></a>wifi_5931_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sdiocard.o(i.wifi_5931_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = wifi_5931_start &rArr; _wifi_5931_start &rArr; wlanInit &rArr; wlanAdapterStart &rArr; kalIndicateStatusAndComplete &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
</UL>

<P><STRONG><a name="[328]"></a>wifi_5931_stop</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, sdiocard.o(i.wifi_5931_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = wifi_5931_stop &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_fpin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Gpio_Low
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__complete
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSdIoConfig
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_interruptible
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalFlushPendingTxPackets
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wpa_exit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wifi_5931_start
</UL>

<P><STRONG><a name="[61f]"></a>find_test_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hfat.o(i.find_test_pin))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_testpin
</UL>

<P><STRONG><a name="[100]"></a>hf_atcmd_dbgl</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hfat.o(i.hf_atcmd_dbgl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_dbgl &rArr; hfdbg_set_level &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_set_level
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_get_level
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>hf_atcmd_help</STRONG> (Thumb, 1208 bytes, Stack size 40 bytes, hfat.o(i.hf_atcmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_help &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>hf_atcmd_md5</STRONG> (Thumb, 210 bytes, Stack size 144 bytes, hfat.o(i.hf_atcmd_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_md5 &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>hf_atcmd_modechange</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, hfat.o(i.hf_atcmd_modechange))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_modechange &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>hf_atcmd_ntpser</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, hfat.o(i.hf_atcmd_ntpser))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_ntpser &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddress
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>hf_atcmd_smtlk_setup</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hfat.o(i.hf_atcmd_smtlk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_smtlk_setup &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>hf_atcmd_testpin</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, hfat.o(i.hf_atcmd_testpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_testpin &rArr; hfthread_resume_all &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_pin_is_high
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_get_pid
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_disabel_all_interrupt
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_configure_pin
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_suspend_all
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfthread_resume_all
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSpimIoConfig
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_test_pin
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>hf_atcmd_testpins</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, hfat.o(i.hf_atcmd_testpins))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_testpins &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfgpio_get_pid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>hf_atcmd_time</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, hfat.o(i.hf_atcmd_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_time &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settimeofday
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hftimer_get_timer_adjust_factor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>hf_atcmd_uartadjs</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, hfat.o(i.hf_atcmd_uartadjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_uartadjs &rArr; HFAutoUartAdjust &rArr; HFUartAdjust_recv &rArr; usart_recv &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_get_adjust
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>hf_atcmd_udplcpt</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, hfat.o(i.hf_atcmd_udplcpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_udplcpt &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>hf_atcmd_wadhcpd</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, hfat.o(i.hf_atcmd_wadhcpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wadhcpd &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>hf_atcmd_walkind</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hfat.o(i.hf_atcmd_walkind))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_walkind &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>hf_atcmd_wpsbtnen</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hfat.o(i.hf_atcmd_wpsbtnen))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wpsbtnen &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfat.o(.constdata)
</UL>
<P><STRONG><a name="[783]"></a>m2m_ucmd_find</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hfat.o(i.m2m_ucmd_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m2m_ucmd_find &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
</UL>

<P><STRONG><a name="[904]"></a>m2m_ucmd_lexical_analysis</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, hfat.o(i.m2m_ucmd_lexical_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m2m_ucmd_lexical_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cmd
</UL>

<P><STRONG><a name="[5f8]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hfuart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuart_recv_bytes
</UL>

<P><STRONG><a name="[5f9]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hfuart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_open
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuart_recv_bytes
</UL>

<P><STRONG><a name="[155]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hfuart.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInterruptHf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuart_recv_bytes
</UL>

<P><STRONG><a name="[5f7]"></a>fuart_recv_bytes</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, hfuart.o(i.fuart_recv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fuart_recv_bytes &rArr; msgq_msg_recv &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
</UL>

<P><STRONG><a name="[cf]"></a>ASSIS_Receive</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, assis_thread.o(i.ASSIS_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = ASSIS_Receive &rArr; assis_process &rArr; command_handle &rArr; pars_uart_cmd &rArr; _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_send_assis_event
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade_package
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtlk_log_reply
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_process
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_assis_write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> assis_thread.o(i.start_assis_thread)
</UL>
<P><STRONG><a name="[34a]"></a>add_reply</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, assis_thread.o(i.add_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = add_reply &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_command
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_commmad
</UL>

<P><STRONG><a name="[1b6]"></a>assis_process</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, assis_thread.o(i.assis_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = assis_process &rArr; command_handle &rArr; pars_uart_cmd &rArr; _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_command
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handle
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_commmad
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
</UL>

<P><STRONG><a name="[3ce]"></a>check_commmad</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, assis_thread.o(i.check_commmad))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = check_commmad &rArr; add_reply &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_process
</UL>

<P><STRONG><a name="[3cd]"></a>command_handle</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, assis_thread.o(i.command_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = command_handle &rArr; pars_uart_cmd &rArr; _pars_uart_cmd &rArr; cmd_deal_upurl &rArr; cmd_deal_upurl_equa &rArr; read_upfile_name &rArr; HTTP_DownloadFile &rArr; HTTP_GetFile &rArr; HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pars_uart_cmd
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_cfgwr_query
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_process
</UL>

<P><STRONG><a name="[1b4]"></a>smtlk_log_reply</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, assis_thread.o(i.smtlk_log_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = smtlk_log_reply &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_get_time
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASSIS_Receive
</UL>

<P><STRONG><a name="[3cc]"></a>verify_command</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, assis_thread.o(i.verify_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = verify_command &rArr; add_reply &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_reply
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assis_process
</UL>

<P><STRONG><a name="[408]"></a>change_language</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, httpd.o(i.change_language))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = change_language &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[53e]"></a>data_extract_store</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, httpd.o(i.data_extract_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = data_extract_store &rArr; extract_store_fun &rArr; get_config_value &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[5cb]"></a>error_process</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, httpd.o(i.error_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = error_process &rArr; fs_open_error &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
</UL>

<P><STRONG><a name="[540]"></a>extract_store_fun</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, httpd.o(i.extract_store_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = extract_store_fun &rArr; get_config_value &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_page_open
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_config
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
</UL>

<P><STRONG><a name="[5ea]"></a>file_open_send</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, httpd.o(i.file_open_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = file_open_send &rArr; fs_open &rArr; open_html_page &rArr; set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_process
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[5ee]"></a>file_post_process</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, httpd.o(i.file_post_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = file_post_process &rArr; file_write_into_flash &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[5ef]"></a>file_write_into_flash</STRONG> (Thumb, 828 bytes, Stack size 64 bytes, httpd.o(i.file_write_into_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = file_write_into_flash &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
</UL>

<P><STRONG><a name="[5eb]"></a>fs_open</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, httpd.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = fs_open &rArr; open_html_page &rArr; set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_language
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
</UL>

<P><STRONG><a name="[5cc]"></a>fs_open_error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, httpd.o(i.fs_open_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fs_open_error &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_process
</UL>

<P><STRONG><a name="[5e7]"></a>get_config_value</STRONG> (Thumb, 228 bytes, Stack size 160 bytes, httpd.o(i.get_config_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = get_config_value &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrim
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
</UL>

<P><STRONG><a name="[5fe]"></a>get_httpContent_Length</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, httpd.o(i.get_httpContent_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_httpContent_Length &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
</UL>

<P><STRONG><a name="[5ff]"></a>get_httprecv_len</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, httpd.o(i.get_httprecv_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_httprecv_len &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
</UL>

<P><STRONG><a name="[5e6]"></a>get_name_config</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, httpd.o(i.get_name_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = get_name_config &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
</UL>

<P><STRONG><a name="[600]"></a>get_nvram</STRONG> (Thumb, 3596 bytes, Stack size 80 bytes, httpd.o(i.get_nvram))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baud_en2num
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_httpd_get_nvram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_query_rssi
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_rssi
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_deal_wscan_query
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
</UL>

<P><STRONG><a name="[5e5]"></a>html_page_open</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, httpd.o(i.html_page_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = html_page_open &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
</UL>

<P><STRONG><a name="[6c8]"></a>html_transform_char</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, httpd.o(i.html_transform_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = html_transform_char
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_c2h
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
</UL>

<P><STRONG><a name="[6e1]"></a>http_recv</STRONG> (Thumb, 710 bytes, Stack size 96 bytes, httpd.o(i.http_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = http_recv &rArr; file_open_send &rArr; fs_open &rArr; open_html_page &rArr; set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success_update_flag
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_post_process
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>

<P><STRONG><a name="[6e4]"></a>http_recv_data</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, httpd.o(i.http_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = http_recv_data &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recv
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httprecv_len
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httpContent_Length
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>

<P><STRONG><a name="[6e3]"></a>httpd_send</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, httpd.o(i.httpd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = httpd_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_header
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
</UL>

<P><STRONG><a name="[6e5]"></a>httpd_thread</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, httpd.o(i.httpd_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = httpd_thread &rArr; http_recv &rArr; file_open_send &rArr; fs_open &rArr; open_html_page &rArr; set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_socket
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_close
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv_data
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_listen
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_accept
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vhttpdServer
</UL>

<P><STRONG><a name="[5fb]"></a>ltrim</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, httpd.o(i.ltrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ltrim &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
</UL>

<P><STRONG><a name="[5f6]"></a>open_html_page</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, httpd.o(i.open_html_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = open_html_page &rArr; set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_config
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_value
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[6e2]"></a>process_http_api</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, httpd.o(i.process_http_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = process_http_api &rArr; send_file &rArr; httpd_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[5ed]"></a>send_file</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, httpd.o(i.send_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = send_file &rArr; httpd_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_http_api
</UL>

<P><STRONG><a name="[5ec]"></a>send_http_header</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, httpd.o(i.send_http_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = send_http_header &rArr; httpd_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open_send
</UL>

<P><STRONG><a name="[834]"></a>set_name_value</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, httpd.o(i.set_name_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_html_page
</UL>

<P><STRONG><a name="[5e8]"></a>set_nvram</STRONG> (Thumb, 4140 bytes, Stack size 112 bytes, httpd.o(i.set_nvram))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_nvram &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_httpd_set_nvram
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_transform_char
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baud_num2en
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
</UL>

<P><STRONG><a name="[53f]"></a>strnstr</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, httpd.o(i.strnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strnstr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_value
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_into_flash
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_store_fun
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_extract_store
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvram
</UL>

<P><STRONG><a name="[8e]"></a>vhttpdServer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, httpd.o(i.vhttpdServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = vhttpdServer &rArr; httpd_thread &rArr; http_recv &rArr; file_open_send &rArr; fs_open &rArr; open_html_page &rArr; set_name_value &rArr; get_nvram &rArr; web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.httpd_start)
</UL>
<P><STRONG><a name="[604]"></a>web_deal_wscan_query</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, httpd.o(i.web_deal_wscan_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = web_deal_wscan_query &rArr; wifi_configure_scan &rArr; wext_set_scantime &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_configure_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvram
</UL>

<P><STRONG><a name="[8]"></a>uart_at_cmds_reply</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd.o(i.uart_at_cmds_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = uart_at_cmds_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_cmd.o(.data)
</UL>
<P><STRONG><a name="[51b]"></a>cmd_uart_query</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, uart_cmd_uart.o(i.cmd_uart_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = cmd_uart_query &rArr; get_uart_parity_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_stop
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_bits
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_parity_str
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_fc
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_baudrate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
</UL>

<P><STRONG><a name="[51c]"></a>get_uart_baudrate</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, uart_cmd_uart.o(i.get_uart_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_uart_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baud_en2num
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
</UL>

<P><STRONG><a name="[520]"></a>get_uart_fc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_cmd_uart.o(i.get_uart_fc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = get_uart_fc &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
</UL>

<P><STRONG><a name="[51f]"></a>get_uart_parity_str</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart_cmd_uart.o(i.get_uart_parity_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = get_uart_parity_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_query
</UL>

<P><STRONG><a name="[629]"></a>setbaudrate</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, uart_cmd_uart.o(i.setbaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baud_num2en
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
</UL>

<P><STRONG><a name="[62a]"></a>setdatabits</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.setdatabits))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
</UL>

<P><STRONG><a name="[62c]"></a>setparity</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.setparity))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
</UL>

<P><STRONG><a name="[62b]"></a>setstopbits</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart_cmd_uart.o(i.setstopbits))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_uart
</UL>

<P><STRONG><a name="[411]"></a>check_cmd_mode</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, uart_thread.o(i.check_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = check_cmd_mode &rArr; usart_recv &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv_f
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_to_cmd_mode
</UL>

<P><STRONG><a name="[41a]"></a>check_to_cmd_mode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_thread.o(i.check_to_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = check_to_cmd_mode &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_free
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_frame
</UL>

<P><STRONG><a name="[963]"></a>get_data_from_frame</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_thread.o(i.get_data_from_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_data_from_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_through_mode_hf_format
</UL>

<P><STRONG><a name="[95e]"></a>uart_through_mode_frame</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, uart_thread.o(i.uart_through_mode_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = uart_through_mode_frame &rArr; check_to_cmd_mode &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_send_uart_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_to_cmd_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[95d]"></a>uart_through_mode_free</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, uart_thread.o(i.uart_through_mode_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = uart_through_mode_free &rArr; check_to_cmd_mode &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_send_uart_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_to_cmd_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[95f]"></a>uart_through_mode_hf_format</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, uart_thread.o(i.uart_through_mode_hf_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = uart_through_mode_hf_format &rArr; check_to_cmd_mode &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsockb_send
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netsock_send
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnet_send_uart_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCC_CheckSum
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_from_frame
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_to_cmd_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[65a]"></a>hffile_flash_copy</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hffile.o(i.hffile_flash_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hffile_flash_copy &rArr; hffile_flash_copy_no_lock &rArr; flash_write_no_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy_no_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
</UL>

<P><STRONG><a name="[65b]"></a>hffile_flash_copy_no_lock</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, hffile.o(i.hffile_flash_copy_no_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hffile_flash_copy_no_lock &rArr; flash_write_no_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_no_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_flash_copy
</UL>

<P><STRONG><a name="[65d]"></a>hffile_flash_data_chksum</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, hffile.o(i.hffile_flash_data_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hffile_flash_data_chksum &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hffile_open
</UL>

<P><STRONG><a name="[476]"></a>week_to_string</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uart_cmd_time.o(i.week_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = week_to_string &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_query
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_ntptm_equa
</UL>

<P><STRONG><a name="[1d3]"></a>CRC_web_data</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, uart_cmd_update.o(i.CRC_web_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CRC_web_data &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_CRC_512
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
</UL>

<P><STRONG><a name="[1fd]"></a>HFUartAdjust_recv</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, uart_cmd_update.o(i.HFUartAdjust_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HFUartAdjust_recv &rArr; usart_recv &rArr; BuartRecv &rArr; AltMsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfuart_recv
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFAutoUartAdjust
</UL>

<P><STRONG><a name="[53b]"></a>custom_upgrade_failed</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart_cmd_update.o(i.custom_upgrade_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = custom_upgrade_failed &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
</UL>

<P><STRONG><a name="[53d]"></a>custom_upgrade_success</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, uart_cmd_update.o(i.custom_upgrade_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = custom_upgrade_success &rArr; post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reload
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_upgrade_log
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
</UL>

<P><STRONG><a name="[599]"></a>find_url_flag</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, uart_cmd_update.o(i.find_url_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = find_url_flag &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
</UL>

<P><STRONG><a name="[598]"></a>get_upgrade_addr</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, uart_cmd_update.o(i.get_upgrade_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = get_upgrade_addr &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
</UL>

<P><STRONG><a name="[53c]"></a>post_upgrade_log</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, uart_cmd_update.o(i.post_upgrade_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = post_upgrade_log &rArr; m2m_uplog_post &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_uplog_post
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_success
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_upgrade_failed
</UL>

<P><STRONG><a name="[416]"></a>read_upgrade_step</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_cmd_update.o(i.read_upgrade_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_upgrade_step &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_custom_upgrade
</UL>

<P><STRONG><a name="[417]"></a>set_upgrade_para</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, uart_cmd_update.o(i.set_upgrade_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_upgrade_para &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfdbg_get_level
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_custom_upgrade
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_custom_upgrade
</UL>

<P><STRONG><a name="[75e]"></a>is_need_change</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart_cmd_hex.o(i.is_need_change))
<BR><BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpb100_pin_set
</UL>

<P><STRONG><a name="[3fb]"></a>boot_config_crc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpb100_boot.o(i.boot_config_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = boot_config_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_config
</UL>

<P><STRONG><a name="[3fa]"></a>boot_update_config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lpb100_boot.o(i.boot_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = boot_update_config &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_config_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
</UL>

<P><STRONG><a name="[40c]"></a>check_is_transtion</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpb100_boot.o(i.check_is_transtion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_is_transtion &rArr; check_is_wififw_startaddr &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_is_wififw_startaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
</UL>

<P><STRONG><a name="[40e]"></a>check_is_wififw_startaddr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lpb100_boot.o(i.check_is_wififw_startaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_is_wififw_startaddr &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boot_conifg
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_is_transtion
</UL>

<P><STRONG><a name="[9]"></a>hfsmtlk_default_main_loop</STRONG> (Thumb, 552 bytes, Stack size 72 bytes, hfsmtlk.o(i.hfsmtlk_default_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_default_main_loop &rArr; hf_start_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_malloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfmem_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystime
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv7_init
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_init
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_scan
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_start_sniffer_mode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_sort_channel_list
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_reset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfsmtlk.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>hfsmtlk_default_sniffer_data_recv</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, hfsmtlk.o(i.hfsmtlk_default_sniffer_data_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = hfsmtlk_default_sniffer_data_recv &rArr; hfsmtlk_decode_mc &rArr; smartlinkv7_check &rArr; smartlinkv7_partial_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode_mc
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_decode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfsmtlk.o(.data)
</UL>
<P><STRONG><a name="[693]"></a>hfsmtlk_get_wpa</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, hfsmtlk.o(i.hfsmtlk_get_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfsmtlk_get_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_parse_beacon_probe_rsp_packet
</UL>

<P><STRONG><a name="[68d]"></a>smtlk_finished_ok</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, hfsmtlk.o(i.smtlk_finished_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = smtlk_finished_ok &rArr; hf_stop_sniffer_mode &rArr; wlanoidSetSnifferMode &rArr; wlanSendCommand &rArr; nicTxPollingResource &rArr; wifi_restart &rArr;  wifi_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_softreset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_int
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfnvm_write_data
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_stop_sniffer_mode
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_list_find_ap_by_bssid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsmtlk_finished_ok
</UL>

<P><STRONG><a name="[a67]"></a>SendCmdToCache</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cache.o(i.SendCmdToCache))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInit
</UL>

<P><STRONG><a name="[1e6]"></a>FuartGetBaudClk</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fuart.o(i.FuartGetBaudClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = FuartGetBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartIOctl
</UL>

<P><STRONG><a name="[1c5]"></a>GetBuartBaudClk</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, buart.o(i.GetBuartBaudClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GetBuartBaudClk &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>

<P><STRONG><a name="[2a5]"></a>__do_top</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, auxinfo.o(i.__do_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __do_top &rArr; vTaskGetRunTimeStats &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_top
</UL>

<P><STRONG><a name="[967]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[886]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[888]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[88c]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[88d]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvDeleteTCB &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[88e]"></a>prvGenerateRunTimeStatsForTasksInList</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, tasks.o(i.prvGenerateRunTimeStatsForTasksInList))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = prvGenerateRunTimeStatsForTasksInList &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[d8]"></a>prvIdleTask</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_idle
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[890]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseTCBVariables &rArr; vTaskGeneratePid
</UL>
<BR>[Calls]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGeneratePid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[893]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;early_init_task
</UL>

<P><STRONG><a name="[895]"></a>prvListTaskWithinSingleList</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, tasks.o(i.prvListTaskWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = prvListTaskWithinSingleList &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[90e]"></a>setup_init_task</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.setup_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = setup_init_task &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_stack_frame
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndexByPid
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[896]"></a>usTaskCheckFreeStackSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.usTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[892]"></a>vTaskGeneratePid</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tasks.o(i.vTaskGeneratePid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskGeneratePid
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[7be]"></a>print</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, print.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvprintf
</UL>

<P><STRONG><a name="[880]"></a>printchar</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, print.o(i.printchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartSend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[87f]"></a>printi</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, print.o(i.printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[87e]"></a>prints</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, print.o(i.prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[7b6]"></a>list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgq.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
</UL>

<P><STRONG><a name="[7b7]"></a>list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgq.o(i.list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>

<P><STRONG><a name="[759]"></a>list_del</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgq.o(i.list_del))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
</UL>

<P><STRONG><a name="[758]"></a>lookup_idle_msgitem</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, msgq.o(i.lookup_idle_msgitem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lookup_idle_msgitem &rArr; _write_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>

<P><STRONG><a name="[1c1]"></a>msgaddset</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, msgq.o(i.msgaddset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msgaddset
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgAddSet
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
</UL>

<P><STRONG><a name="[22f]"></a>msgdelset</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, msgq.o(i.msgdelset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msgdelset
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDelSet
</UL>

<P><STRONG><a name="[1c4]"></a>msgemptyset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, msgq.o(i.msgemptyset))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltMsgEmptySet
</UL>

<P><STRONG><a name="[7ae]"></a>msgfillset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, msgq.o(i.msgfillset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = msgfillset
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
</UL>

<P><STRONG><a name="[7b0]"></a>msgisemptyset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, msgq.o(i.msgisemptyset))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
</UL>

<P><STRONG><a name="[7b1]"></a>msgismember</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, msgq.o(i.msgismember))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msgismember
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
</UL>

<P><STRONG><a name="[238]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mach.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_interrupt_prio_set
</UL>

<P><STRONG><a name="[325]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_unlock_irq
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_lock_irq
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irq
</UL>

<P><STRONG><a name="[60b]"></a>glLoadRegInfo</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, gl_init.o(i.glLoadRegInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = glLoadRegInfo &rArr; kalCfgDataRead16 &rArr; nvram_read
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalCfgDataRead16
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanInit
</UL>

<P><STRONG><a name="[71a]"></a>nvram_read</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gl_init.o(i.nvram_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvram_read
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalCfgDataRead16
</UL>

<P><STRONG><a name="[615]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wpa_exit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_security_data
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_disassoc_info
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_info
</UL>

<P><STRONG><a name="[3aa]"></a>ap_wpa_derive_ptk</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, wpa.o(i.ap_wpa_derive_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = ap_wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[9b5]"></a>rsn_key_mgmt_to_bitfield</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, wpa.o(i.rsn_key_mgmt_to_bitfield))
<BR><BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[9b4]"></a>rsn_selector_to_bitfield</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, wpa.o(i.rsn_selector_to_bitfield))
<BR><BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[923]"></a>supp_alloc_eapol</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, wpa.o(i.supp_alloc_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = supp_alloc_eapol
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
</UL>

<P><STRONG><a name="[706]"></a>wpaAuthTimerInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpa.o(i.wpaAuthTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wpaAuthTimerInit &rArr; xTimerCreate &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wpaTask
</UL>

<P><STRONG><a name="[995]"></a>wpaAuthTimerSet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa.o(i.wpaAuthTimerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wpaAuthTimerSet &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[f1]"></a>wpaAuthTimerout</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa.o(i.wpaAuthTimerout))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = wpaAuthTimerout &rArr; handle_link_status_change &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_link_status_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa.o(i.wpaAuthTimerInit)
</UL>
<P><STRONG><a name="[9a4]"></a>wpa_derive_ptk</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, wpa.o(i.wpa_derive_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = wpa_derive_ptk &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[9a9]"></a>wpa_gen_wpa_ie_rsn</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, wpa.o(i.wpa_gen_wpa_ie_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_gen_wpa_ie_rsn
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[9aa]"></a>wpa_gen_wpa_ie_wpa</STRONG> (Thumb, 370 bytes, Stack size 20 bytes, wpa.o(i.wpa_gen_wpa_ie_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_gen_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[9ab]"></a>wpa_gmk_to_gtk</STRONG> (Thumb, 106 bytes, Stack size 112 bytes, wpa.o(i.wpa_gmk_to_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = wpa_gmk_to_gtk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
</UL>

<P><STRONG><a name="[9ac]"></a>wpa_group_config_group_keys</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa.o(i.wpa_group_config_group_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = wpa_group_config_group_keys &rArr; p2p_cfg80211_add_key &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_key
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
</UL>

<P><STRONG><a name="[3ab]"></a>wpa_key_mgmt_sha256</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa.o(i.wpa_key_mgmt_sha256))
<BR><BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_wpa_derive_ptk
</UL>

<P><STRONG><a name="[996]"></a>wpa_notif_assoc</STRONG> (Thumb, 322 bytes, Stack size 176 bytes, wpa.o(i.wpa_notif_assoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = wpa_notif_assoc &rArr; wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[997]"></a>wpa_notif_disassoc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wpa.o(i.wpa_notif_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wpa_notif_disassoc &rArr; ap_free_sta &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[9b0]"></a>wpa_pairewise_config_keys</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpa.o(i.wpa_pairewise_config_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = wpa_pairewise_config_keys &rArr; p2p_cfg80211_add_key &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2p_cfg80211_add_key
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[9b2]"></a>wpa_parse_generic</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, wpa.o(i.wpa_parse_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
</UL>

<P><STRONG><a name="[9b6]"></a>wpa_replay_counter_valid</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wpa.o(i.wpa_replay_counter_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_replay_counter_valid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[9af]"></a>wpa_send_eapol</STRONG> (Thumb, 832 bytes, Stack size 112 bytes, wpa.o(i.wpa_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = wpa_send_eapol &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_notif_assoc
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_3_of_4
</UL>

<P><STRONG><a name="[9c6]"></a>wpa_sm_cancel_auth_timeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_cancel_auth_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[9cf]"></a>wpa_sm_deauthenticate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_deauthenticate))
<BR><BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[9a7]"></a>wpa_sm_ether_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_ether_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wpa_sm_ether_send &rArr; wlanHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[9d4]"></a>wpa_sm_get_beacon_ie</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_get_beacon_ie))
<BR><BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
</UL>

<P><STRONG><a name="[9cb]"></a>wpa_sm_get_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa.o(i.wpa_sm_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[9c0]"></a>wpa_sm_set_key</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, wpa.o(i.wpa_sm_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wpa_sm_set_key &rArr; wext_set_encode_ext &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_encode_ext
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
</UL>

<P><STRONG><a name="[9c1]"></a>wpa_sm_set_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa.o(i.wpa_sm_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_link_up
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[9c9]"></a>wpa_supplicant_check_group_cipher</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, wpa.o(i.wpa_supplicant_check_group_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_supplicant_check_group_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[9bc]"></a>wpa_supplicant_decrypt_key_data</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, wpa.o(i.wpa_supplicant_decrypt_key_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wpa_supplicant_decrypt_key_data &rArr; aes_unwrap &rArr; aes_decrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[9d0]"></a>wpa_supplicant_get_pmk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(i.wpa_supplicant_get_pmk))
<BR><BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[9c8]"></a>wpa_supplicant_gtk_tx_bit_workaround</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa.o(i.wpa_supplicant_gtk_tx_bit_workaround))
<BR><BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[9c3]"></a>wpa_supplicant_install_gtk</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, wpa.o(i.wpa_supplicant_install_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wpa_supplicant_install_gtk &rArr; wpa_sm_set_key &rArr; wext_set_encode_ext &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[9c4]"></a>wpa_supplicant_install_ptk</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, wpa.o(i.wpa_supplicant_install_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = wpa_supplicant_install_ptk &rArr; wpa_sm_set_key &rArr; wext_set_encode_ext &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[9c5]"></a>wpa_supplicant_key_neg_complete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa.o(i.wpa_supplicant_key_neg_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_key_neg_complete &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
</UL>

<P><STRONG><a name="[9c7]"></a>wpa_supplicant_pairwise_gtk</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, wpa.o(i.wpa_supplicant_pairwise_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[9bf]"></a>wpa_supplicant_process_1_of_2</STRONG> (Thumb, 214 bytes, Stack size 104 bytes, wpa.o(i.wpa_supplicant_process_1_of_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_process_1_of_2 &rArr; wpa_supplicant_key_neg_complete &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_state
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[9cc]"></a>wpa_supplicant_process_1_of_2_rsn</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, wpa.o(i.wpa_supplicant_process_1_of_2_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wpa_supplicant_process_1_of_2_rsn &rArr; wpa_supplicant_parse_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[9cd]"></a>wpa_supplicant_process_1_of_2_wpa</STRONG> (Thumb, 282 bytes, Stack size 80 bytes, wpa.o(i.wpa_supplicant_process_1_of_2_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; aes_decrypt_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[9be]"></a>wpa_supplicant_process_1_of_4</STRONG> (Thumb, 236 bytes, Stack size 136 bytes, wpa.o(i.wpa_supplicant_process_1_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_process_1_of_4 &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_pmk
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_derive_ptk
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[9bd]"></a>wpa_supplicant_process_3_of_4</STRONG> (Thumb, 282 bytes, Stack size 128 bytes, wpa.o(i.wpa_supplicant_process_3_of_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; wpa_sm_set_state &rArr; netif_link_up &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_state
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_state
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[9ce]"></a>wpa_supplicant_send_2_of_2</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, wpa.o(i.wpa_supplicant_send_2_of_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = wpa_supplicant_send_2_of_2 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supp_alloc_eapol
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[9d2]"></a>wpa_supplicant_validate_ie</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wpa.o(i.wpa_supplicant_validate_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wpa_supplicant_validate_ie &rArr; wpa_compare_rsn_ie &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_get_beacon_ie
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[9b7]"></a>wpa_supplicant_verify_eapol_key_mic</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, wpa.o(i.wpa_supplicant_verify_eapol_key_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = wpa_supplicant_verify_eapol_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; SHA1Final &rArr; SHA1Update &rArr; SHA1Transform &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[99b]"></a>wpa_update_config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wpa.o(i.wpa_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = wpa_update_config &rArr; wpa_sm_update &rArr; wpa_sm_set_assoc_wpa_ie_default &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wext_set_auth
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpaTask
</UL>

<P><STRONG><a name="[5e9]"></a>fast_s_mp_mul_digs</STRONG> (Thumb, 228 bytes, Stack size 2104 bytes, crypt_bigint.o(i.fast_s_mp_mul_digs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[795]"></a>mp_2expt</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, crypt_bigint.o(i.mp_2expt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mp_2expt &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[796]"></a>mp_abs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, crypt_bigint.o(i.mp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mp_abs &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[798]"></a>mp_add</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, crypt_bigint.o(i.mp_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mp_add &rArr; s_mp_add &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[3f9]"></a>mp_clamp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crypt_bigint.o(i.mp_clamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>

<P><STRONG><a name="[3ec]"></a>mp_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mp_clear &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[79c]"></a>mp_cmp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crypt_bigint.o(i.mp_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp &rArr; mp_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[79a]"></a>mp_cmp_mag</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_cmp_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[797]"></a>mp_copy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
</UL>

<P><STRONG><a name="[3f0]"></a>mp_count_bits</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crypt_bigint.o(i.mp_count_bits))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[79d]"></a>mp_div</STRONG> (Thumb, 344 bytes, Stack size 96 bytes, crypt_bigint.o(i.mp_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[3f2]"></a>mp_div_2d</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, crypt_bigint.o(i.mp_div_2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[7a0]"></a>mp_exch</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, crypt_bigint.o(i.mp_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[3f6]"></a>mp_grow</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>

<P><STRONG><a name="[3f4]"></a>mp_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, crypt_bigint.o(i.mp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mp_init &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[3f1]"></a>mp_init_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_init_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mp_init_copy &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[7a3]"></a>mp_init_size</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_init_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mp_init_size &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[7a4]"></a>mp_lshd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_lshd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mp_lshd &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
</UL>

<P><STRONG><a name="[7a5]"></a>mp_mod</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, crypt_bigint.o(i.mp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[7a1]"></a>mp_mod_2d</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_mod_2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[7a6]"></a>mp_mul</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[3f8]"></a>mp_mul_2d</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, crypt_bigint.o(i.mp_mul_2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[c4]"></a>mp_reduce</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, crypt_bigint.o(i.mp_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = mp_reduce &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypt_bigint.o(i.s_mp_exptmod)
</UL>
<P><STRONG><a name="[c5]"></a>mp_reduce_2k_l</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, crypt_bigint.o(i.mp_reduce_2k_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = mp_reduce_2k_l &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypt_bigint.o(i.s_mp_exptmod)
</UL>
<P><STRONG><a name="[7a2]"></a>mp_rshd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, crypt_bigint.o(i.mp_rshd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_rshd &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[79e]"></a>mp_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, crypt_bigint.o(i.mp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mp_set &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[7a9]"></a>mp_sqr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, crypt_bigint.o(i.mp_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mp_sqr &rArr; s_mp_sqr &rArr; mp_clear &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[79f]"></a>mp_sub</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, crypt_bigint.o(i.mp_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mp_sub &rArr; s_mp_add &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[3f7]"></a>mp_zero</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crypt_bigint.o(i.mp_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
</UL>

<P><STRONG><a name="[799]"></a>s_mp_add</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, crypt_bigint.o(i.s_mp_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = s_mp_add &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[3ee]"></a>s_mp_exptmod</STRONG> (Thumb, 722 bytes, Stack size 648 bytes, crypt_bigint.o(i.s_mp_exptmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136<LI>Call Chain = s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_exptmod
</UL>

<P><STRONG><a name="[7a7]"></a>s_mp_mul_digs</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, crypt_bigint.o(i.s_mp_mul_digs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>

<P><STRONG><a name="[7a8]"></a>s_mp_mul_high_digs</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, crypt_bigint.o(i.s_mp_mul_high_digs))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = s_mp_mul_high_digs &rArr; mp_clear &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[7aa]"></a>s_mp_sqr</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, crypt_bigint.o(i.s_mp_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = s_mp_sqr &rArr; mp_clear &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[79b]"></a>s_mp_sub</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, crypt_bigint.o(i.s_mp_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = s_mp_sub &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[9d9]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpabuf.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[9d8]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpabuf.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[9da]"></a>wpabuf_overflow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpabuf.o(i.wpabuf_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>

<P><STRONG><a name="[9de]"></a>wpabuf_put_buf</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_put_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpabuf_put_buf &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
</UL>

<P><STRONG><a name="[9d6]"></a>wpabuf_put_data</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wpabuf.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[5be]"></a>eap_sm_parseEapReq</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, wps.o(i.eap_sm_parseEapReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eap_sm_parseEapReq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[5c0]"></a>eap_wsc_build_msg</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, wps.o(i.eap_wsc_build_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = eap_wsc_build_msg &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[5c6]"></a>eap_wsc_process</STRONG> (Thumb, 504 bytes, Stack size 104 bytes, wps.o(i.eap_wsc_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664 + Unknown Stack Size
<LI>Call Chain = eap_wsc_process &rArr; wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_msg
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_get_msg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_state
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_cont
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[5c7]"></a>eap_wsc_process_cont</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wps.o(i.eap_wsc_process_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eap_wsc_process_cont &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[5c8]"></a>eap_wsc_process_fragment</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, wps.o(i.eap_wsc_process_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = eap_wsc_process_fragment &rArr; eap_wsc_build_frag_ack &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; mmm_malloc &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_frag_ack
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[5c1]"></a>eap_wsc_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps.o(i.eap_wsc_state))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_cont
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>

<P><STRONG><a name="[5b8]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wps.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapReq
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[5b7]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapReq
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[5bd]"></a>wpabuf_put_data</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wps.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_cont
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>

<P><STRONG><a name="[5bb]"></a>wpabuf_put_u8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wps.o(i.wpabuf_put_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_frag_ack
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>

<P><STRONG><a name="[a18]"></a>wps_eapol_send</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wps.o(i.wps_eapol_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wps_eapol_send &rArr; wlanHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_txStart
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[a22]"></a>wps_parse_vendor_ext</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wps.o(i.wps_parse_vendor_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wps_parse_vendor_ext &rArr; wps_parse_vendor_ext_wfa &rArr; wps_set_vendor_ext_wfa_subelem
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_vendor_ext_wfa
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_attr
</UL>

<P><STRONG><a name="[a23]"></a>wps_parse_vendor_ext_wfa</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wps.o(i.wps_parse_vendor_ext_wfa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wps_parse_vendor_ext_wfa &rArr; wps_set_vendor_ext_wfa_subelem
</UL>
<BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_vendor_ext_wfa_subelem
</UL>
<BR>[Called By]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_vendor_ext
</UL>

<P><STRONG><a name="[a21]"></a>wps_set_attr</STRONG> (Thumb, 1044 bytes, Stack size 24 bytes, wps.o(i.wps_set_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = wps_set_attr &rArr; wps_parse_vendor_ext &rArr; wps_parse_vendor_ext_wfa &rArr; wps_set_vendor_ext_wfa_subelem
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_vendor_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>

<P><STRONG><a name="[a24]"></a>wps_set_vendor_ext_wfa_subelem</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, wps.o(i.wps_set_vendor_ext_wfa_subelem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wps_set_vendor_ext_wfa_subelem
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_vendor_ext_wfa
</UL>

<P><STRONG><a name="[7c5]"></a>netconn_recv_data</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[3a3]"></a>alloc_socket</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_idle_time_socket
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[99]"></a>event_callback</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_callback &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[5f4]"></a>free_socket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[3a5]"></a>get_max_idle_time_socket</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sockets.o(i.get_max_idle_time_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_max_idle_time_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[5e4]"></a>get_socket</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sockets.o(i.get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_available
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[775]"></a>lwip_selscan</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, sockets.o(i.lwip_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_selscan &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[98]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_internal &rArr; igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_setsockopt)
</UL>
<P><STRONG><a name="[776]"></a>tryget_socket</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[982]"></a>add_in_mac_list</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernetif.o(i.add_in_mac_list))
<BR><BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
</UL>

<P><STRONG><a name="[6ff]"></a>in_mac_list</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ethernetif.o(i.in_mac_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = in_mac_list &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
</UL>

<P><STRONG><a name="[5e0]"></a>low_level_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = low_level_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[5e1]"></a>low_level_init_p2p</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = low_level_init_p2p &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init_p2p
</UL>

<P><STRONG><a name="[5e2]"></a>low_level_input</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[5e3]"></a>low_level_input_p2p</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_input_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = low_level_input_p2p &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input_p2p
</UL>

<P><STRONG><a name="[87]"></a>low_level_output</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = low_level_output &rArr; wlanHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanHardStartXmit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[88]"></a>low_level_output_p2p</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = low_level_output_p2p &rArr; p2pHardStartXmit &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2pHardStartXmit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init_p2p)
</UL>
<P><STRONG><a name="[980]"></a>wifi_wscan_get_wpa</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, ethernetif.o(i.wifi_wscan_get_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wifi_wscan_get_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_print
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wscan_looking_for
</UL>

<P><STRONG><a name="[927]"></a>sys_sem_check_is_used</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_check_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[88a]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timerss.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCheckForValidListAndQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[89c]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timerss.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[894]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timerss.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[897]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timerss.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[898]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, timerss.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[89a]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, timerss.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[899]"></a>prvSampleTimeNow</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timerss.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[89b]"></a>prvSwitchTimerLists</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, timerss.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[f2]"></a>prvTimerTask</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timerss.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = prvTimerTask &rArr; prvProcessTimerOrBlockTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerss.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[a6e]"></a>GDSpiCodeFlashSendCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GDSpiCodeFlashSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashReadStatus
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashResetCRM
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashHpmModeSet
</UL>

<P><STRONG><a name="[a6d]"></a>GDSpiCodeFlashHpmModeSet</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GDSpiCodeFlashHpmModeSet &rArr; GDSpiCodeFlashSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
</UL>

<P><STRONG><a name="[a76]"></a>GDSpiCodeFlashControllerBusyStatusSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
</UL>

<P><STRONG><a name="[a71]"></a>GDSpiCodeFlashIsFifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashReadStatus
</UL>

<P><STRONG><a name="[a6f]"></a>GDSpiCodeFlashResetCRM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GDSpiCodeFlashResetCRM &rArr; GDSpiCodeFlashSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashReadStatus
</UL>

<P><STRONG><a name="[a70]"></a>GDSpiCodeFlashReadStatus</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GDSpiCodeFlashReadStatus &rArr; GDSpiCodeFlashResetCRM &rArr; GDSpiCodeFlashSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashResetCRM
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashIsFifoEmpty
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashIsBusy
</UL>

<P><STRONG><a name="[a72]"></a>GDSpiCodeFlashIsBusy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd_flash_ctrl.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GDSpiCodeFlashIsBusy &rArr; GDSpiCodeFlashReadStatus &rArr; GDSpiCodeFlashResetCRM &rArr; GDSpiCodeFlashSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDSpiCodeFlashReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashUnlock
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFlashLock
</UL>

<P><STRONG><a name="[1da]"></a>DHCPD_FindAddress</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dhcpd.o(i.DHCPD_FindAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCPD_FindAddress &rArr; DHCPD_FindLeaseByYiaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindLeaseByYiaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
</UL>

<P><STRONG><a name="[1dd]"></a>DHCPD_FindLeaseByChaddr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcpd.o(i.DHCPD_FindLeaseByChaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCPD_FindLeaseByChaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
</UL>

<P><STRONG><a name="[1dc]"></a>DHCPD_FindLeaseByYiaddr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcpd.o(i.DHCPD_FindLeaseByYiaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHCPD_FindLeaseByYiaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindAddress
</UL>

<P><STRONG><a name="[65]"></a>UDP_Receive</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, dhcpd.o(i.UDP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = UDP_Receive &rArr; dhcpd_process &rArr; dhcpd_discover &rArr; clear_lease &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcpd.o(i.DHCPD_start)
</UL>
<P><STRONG><a name="[41b]"></a>clear_lease</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dhcpd.o(i.clear_lease))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = clear_lease &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
</UL>

<P><STRONG><a name="[578]"></a>dhcpd_add_option</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dhcpd.o(i.dhcpd_add_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dhcpd_add_option &rArr; Memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
</UL>

<P><STRONG><a name="[579]"></a>dhcpd_discover</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dhcpd.o(i.dhcpd_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = dhcpd_discover &rArr; clear_lease &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindLeaseByChaddr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_process
</UL>

<P><STRONG><a name="[1df]"></a>dhcpd_init_config</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, dhcpd.o(i.dhcpd_init_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcpd_init_config &rArr; ip_create_by_config &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_create_by_config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_start
</UL>

<P><STRONG><a name="[57c]"></a>dhcpd_pickup_opt</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, dhcpd.o(i.dhcpd_pickup_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dhcpd_pickup_opt &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_process
</UL>

<P><STRONG><a name="[297]"></a>dhcpd_process</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dhcpd.o(i.dhcpd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dhcpd_process &rArr; dhcpd_discover &rArr; clear_lease &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_request
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_pickup_opt
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[57d]"></a>dhcpd_request</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, dhcpd.o(i.dhcpd_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dhcpd_request &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_add_option
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindLeaseByChaddr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_process
</UL>

<P><STRONG><a name="[57b]"></a>ip_create_by_config</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, dhcpd.o(i.ip_create_by_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ip_create_by_config &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_init_config
</UL>

<P><STRONG><a name="[57a]"></a>make_dhcpd_packet</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, dhcpd.o(i.make_dhcpd_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_dhcpd_packet &rArr; dhcpd_add_option &rArr; Memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_add_option
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_discover
</UL>

<P><STRONG><a name="[407]"></a>change2lowercase</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dns_server.o(i.change2lowercase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = change2lowercase &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
</UL>

<P><STRONG><a name="[d0]"></a>dns_server_recv</STRONG> (Thumb, 434 bytes, Stack size 160 bytes, dns_server.o(i.dns_server_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = dns_server_recv &rArr; dns_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_write
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change2lowercase
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_server.o(i.start_dns_server)
</UL>
<P><STRONG><a name="[58c]"></a>dns_write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dns_server.o(i.dns_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = dns_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_recv
</UL>

<P><STRONG><a name="[213]"></a>HTTP_GetContentLength</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, httpc.o(i.HTTP_GetContentLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HTTP_GetContentLength &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_Recv
</UL>

<P><STRONG><a name="[20a]"></a>HTTP_GetFileName</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, httpc.o(i.HTTP_GetFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HTTP_GetFileName &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
</UL>

<P><STRONG><a name="[20b]"></a>HTTP_GetPath</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, httpc.o(i.HTTP_GetPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HTTP_GetPath &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
</UL>

<P><STRONG><a name="[204]"></a>HTTP_Get_IP_PORT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, httpc.o(i.HTTP_Get_IP_PORT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HTTP_Get_IP_PORT &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_DownloadFile
</UL>

<P><STRONG><a name="[217]"></a>HTTP_Recv</STRONG> (Thumb, 342 bytes, Stack size 104 bytes, httpc.o(i.HTTP_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = HTTP_Recv &rArr; hf_lwip_recv &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Feedwdg
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetContentLength
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFile
</UL>

<P><STRONG><a name="[216]"></a>HTTP_Send</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, httpc.o(i.HTTP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = HTTP_Send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_available
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFile
</UL>

<P><STRONG><a name="[215]"></a>Package_Url_Get_File</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, httpc.o(i.Package_Url_Get_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Package_Url_Get_File &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFile
</UL>

<P><STRONG><a name="[218]"></a>Package_Url_Get_FileSize</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, httpc.o(i.Package_Url_Get_FileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Package_Url_Get_FileSize &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_GetFileSize
</UL>

<P><STRONG><a name="[3ea]"></a>base64_decode</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, web_login.o(i.base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = base64_decode &rArr; isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_check
</UL>

<P><STRONG><a name="[87d]"></a>ping_prepare_echo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ping.o(i.ping_prepare_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[87c]"></a>ping_recv</STRONG> (Thumb, 240 bytes, Stack size 136 bytes, ping.o(i.ping_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[87b]"></a>ping_send</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ping.o(i.ping_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ping_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[631]"></a>hf_atcmd_wann_query</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, uart_cmd_wann.o(i.hf_atcmd_wann_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hf_atcmd_wann_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_atcmd_wann
</UL>

<P><STRONG><a name="[433]"></a>cmd_deal_check_equa</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_cmd_test.o(i.cmd_deal_check_equa))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_deal_check_equa &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check
</UL>

<P><STRONG><a name="[432]"></a>cmd_deal_check_query</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_cmd_test.o(i.cmd_deal_check_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = cmd_deal_check_query &rArr; cmd_reply &rArr; _cmd_reply &rArr; m2m_assis_write &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_deal_check
</UL>

<P><STRONG><a name="[605]"></a>get_tx_datatrate_and_pwr</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, uart_cmd_test.o(i.get_tx_datatrate_and_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_tx_datatrate_and_pwr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_nwtstx
</UL>

<P><STRONG><a name="[10d]"></a>hf_wifi_test_nwtstx</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, uart_cmd_test.o(i.hf_wifi_test_nwtstx))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = hf_wifi_test_nwtstx &rArr; hf_wifi_test_tx &rArr; hf_wifi_test_setmac &rArr; hf_priv_do_ctrl &rArr; kalIoctl &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_disable_all_soft_watchdogs
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfwifi_enable_ap_idle_auto_reset
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_wifi_test_tx
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_datatrate_and_pwr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_cmd_test.o(.constdata)
</UL>
<P><STRONG><a name="[235]"></a>recv_ntp_packet</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ntpclient.o(i.recv_ntp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = recv_ntp_packet &rArr; hf_lwip_recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; hfmsgq_recv &rArr; hfthread_sem_wait &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
</UL>

<P><STRONG><a name="[234]"></a>send_ntp_packet</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, ntpclient.o(i.send_ntp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = send_ntp_packet &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
</UL>

<P><STRONG><a name="[236]"></a>set_local_time</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ntpclient.o(i.set_local_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_local_time &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_update_time
</UL>

<P><STRONG><a name="[369]"></a>airkiss_get_password_length</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, airkiss.o(i.airkiss_get_password_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = airkiss_get_password_length
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
</UL>

<P><STRONG><a name="[36a]"></a>airkiss_get_seq</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, airkiss.o(i.airkiss_get_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = airkiss_get_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_push_seq_data
</UL>

<P><STRONG><a name="[361]"></a>airkiss_get_ssid_crc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, airkiss.o(i.airkiss_get_ssid_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = airkiss_get_ssid_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_finish
</UL>

<P><STRONG><a name="[35c]"></a>airkiss_match_code</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, airkiss.o(i.airkiss_match_code))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_check
</UL>

<P><STRONG><a name="[91b]"></a>smartlinkv3_match_code</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, smartlinkv3.o(i.smartlinkv3_match_code))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartlinkv3_check
</UL>

<P><STRONG><a name="[3ad]"></a>apd_eid_country</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, beacon.o(i.apd_eid_country))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = apd_eid_country &rArr; apd_eid_country_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_country_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3ae]"></a>apd_eid_country_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, beacon.o(i.apd_eid_country_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apd_eid_country_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_country
</UL>

<P><STRONG><a name="[3b8]"></a>apd_eid_ds_params</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, beacon.o(i.apd_eid_ds_params))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3af]"></a>apd_eid_erp_info</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, beacon.o(i.apd_eid_erp_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apd_eid_erp_info
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_erp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b3]"></a>apd_eid_wpa</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, beacon.o(i.apd_eid_wpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apd_eid_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_wpa_ie
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[3b0]"></a>ieee802_11_erp_info</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, beacon.o(i.ieee802_11_erp_info))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_ieee802_11_set_beacon
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_eid_erp_info
</UL>

<P><STRONG><a name="[9f7]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wps_enrollee.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>

<P><STRONG><a name="[9f8]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_enrollee.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>

<P><STRONG><a name="[9db]"></a>wpabuf_put_be16</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_enrollee.o(i.wpabuf_put_be16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wps_state
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_mac_addr
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_snonce2
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_snonce1
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
</UL>

<P><STRONG><a name="[9e3]"></a>wpabuf_put_data</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wps_enrollee.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_mac_addr
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_snonce2
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_snonce1
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>

<P><STRONG><a name="[9f6]"></a>wps_build_e_hash</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, wps_enrollee.o(i.wps_build_e_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wps_build_e_hash &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
</UL>

<P><STRONG><a name="[9f9]"></a>wps_build_e_snonce1</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_e_snonce1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_e_snonce1 &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
</UL>

<P><STRONG><a name="[9fa]"></a>wps_build_e_snonce2</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_e_snonce2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_e_snonce2 &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
</UL>

<P><STRONG><a name="[9ff]"></a>wps_build_m1</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_m1))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296 + Unknown Stack Size
<LI>Call Chain = wps_build_m1 &rArr; wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wps_state
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_mac_addr
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_os_version
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_type_flags
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_password_id
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_conn_type_flags
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_methods
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_auth_type_flags
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[a0a]"></a>wps_build_m3</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_m3))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = wps_build_m3 &rArr; wps_derive_psk &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[a0d]"></a>wps_build_m5</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_m5))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = wps_build_m5 &rArr; wps_build_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_snonce1
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[a0e]"></a>wps_build_m7</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_m7))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = wps_build_m7 &rArr; wps_build_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_snonce2
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[a04]"></a>wps_build_mac_addr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_mac_addr &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a06]"></a>wps_build_wps_state</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wps_enrollee.o(i.wps_build_wps_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_wps_state &rArr; wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a11]"></a>wps_build_wsc_done</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_build_wsc_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = wps_build_wsc_done &rArr; wpabuf_free &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_success_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[a34]"></a>wps_process_cred_e</STRONG> (Thumb, 346 bytes, Stack size 528 bytes, wps_enrollee.o(i.wps_process_cred_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = wps_process_cred_e &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_commit
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_creds
</UL>

<P><STRONG><a name="[a35]"></a>wps_process_creds</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wps_enrollee.o(i.wps_process_creds))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = wps_process_creds &rArr; wps_process_cred_e &rArr; nvram_commit &rArr; flash_erase_page &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[a3d]"></a>wps_process_enrollee_nonce</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_enrollee_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_process_enrollee_nonce &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[a3f]"></a>wps_process_m2</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, wps_enrollee.o(i.wps_process_m2))
<BR><BR>[Stack]<UL><LI>Max Depth = 3520 + Unknown Stack Size
<LI>Call Chain = wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_uuid_r
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_registrar_nonce
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_pubkey
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[a43]"></a>wps_process_m2d</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_m2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = wps_process_m2d &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[a44]"></a>wps_process_m4</STRONG> (Thumb, 282 bytes, Stack size 528 bytes, wps_enrollee.o(i.wps_process_m4))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = wps_process_m4 &rArr; wps_process_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_validate_m4_encr
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_hash2
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_hash1
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[a49]"></a>wps_process_m6</STRONG> (Thumb, 200 bytes, Stack size 512 bytes, wps_enrollee.o(i.wps_process_m6))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = wps_process_m6 &rArr; wps_process_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[a4b]"></a>wps_process_m8</STRONG> (Thumb, 216 bytes, Stack size 520 bytes, wps_enrollee.o(i.wps_process_m8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = wps_process_m8 &rArr; wps_process_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_state_change
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_creds
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[a42]"></a>wps_process_pubkey</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488 + Unknown Stack Size
<LI>Call Chain = wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[a45]"></a>wps_process_r_hash1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_r_hash1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_process_r_hash1
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[a46]"></a>wps_process_r_hash2</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_r_hash2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_process_r_hash2
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[a48]"></a>wps_process_r_snonce1</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, wps_enrollee.o(i.wps_process_r_snonce1))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = wps_process_r_snonce1 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pwd_auth_fail_event
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[a4a]"></a>wps_process_r_snonce2</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, wps_enrollee.o(i.wps_process_r_snonce2))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wps_process_r_snonce2 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pwd_auth_fail_event
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
</UL>

<P><STRONG><a name="[a40]"></a>wps_process_registrar_nonce</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_registrar_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_process_registrar_nonce
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[a41]"></a>wps_process_uuid_r</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wps_enrollee.o(i.wps_process_uuid_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_process_uuid_r
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[a1e]"></a>wps_process_wsc_ack</STRONG> (Thumb, 102 bytes, Stack size 504 bytes, wps_enrollee.o(i.wps_process_wsc_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = wps_process_wsc_ack &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[a1c]"></a>wps_process_wsc_msg</STRONG> (Thumb, 286 bytes, Stack size 512 bytes, wps_enrollee.o(i.wps_process_wsc_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4032 + Unknown Stack Size
<LI>Call Chain = wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_process_pubkey &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2d
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_fail_event
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[a20]"></a>wps_process_wsc_nack</STRONG> (Thumb, 194 bytes, Stack size 512 bytes, wps_enrollee.o(i.wps_process_wsc_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = wps_process_wsc_nack &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_fail_event
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[a47]"></a>wps_validate_m4_encr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_enrollee.o(i.wps_validate_m4_encr))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[a1d]"></a>wps_validate_wsc_ack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_enrollee.o(i.wps_validate_wsc_ack))
<BR><BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[a1f]"></a>wps_validate_wsc_nack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_enrollee.o(i.wps_validate_wsc_nack))
<BR><BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[81]"></a>accept_function</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; hfmsgq_create &rArr; hfmsgq_destroy &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_listen)
</UL>
<P><STRONG><a name="[591]"></a>do_close_internal</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[7f]"></a>do_connected</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, api_msg.o(i.do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_connected &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_connect)
</UL>
<P><STRONG><a name="[80]"></a>do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = do_dns_found &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_gethostbyname)
</UL>
<P><STRONG><a name="[5b3]"></a>do_writemore</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[7e]"></a>err_tcp</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[59c]"></a>netconn_drain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[5a3]"></a>pcb_new</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[7d]"></a>poll_tcp</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[be]"></a>recv_raw</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[cc]"></a>recv_tcp</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[bf]"></a>recv_udp</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[7c]"></a>sent_tcp</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[340]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[d5]"></a>tcpip_thread</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[6ef]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer &rArr; LWIP_RAND &rArr; getSystime
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[6f3]"></a>igmp_ip_output_if</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[6f6]"></a>igmp_lookup_group</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[6f9]"></a>igmp_remove_group</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, igmp.o(i.igmp_remove_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = igmp_remove_group &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[6f7]"></a>igmp_send</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[6f0]"></a>igmp_start_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, igmp.o(i.igmp_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_start_timer &rArr; LWIP_RAND &rArr; getSystime
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWIP_RAND
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[6fd]"></a>igmp_timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, igmp.o(i.igmp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[54f]"></a>dhcp_bind</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_send_event
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[556]"></a>dhcp_check</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[55b]"></a>dhcp_create_msg</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[54e]"></a>dhcp_decline</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[561]"></a>dhcp_delete_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[562]"></a>dhcp_discover</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[566]"></a>dhcp_handle_ack</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[568]"></a>dhcp_handle_nak</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[56a]"></a>dhcp_handle_offer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[55c]"></a>dhcp_option</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[55d]"></a>dhcp_option_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[55e]"></a>dhcp_option_long</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[563]"></a>dhcp_option_short</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[55f]"></a>dhcp_option_trailer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[56e]"></a>dhcp_parse_reply</STRONG> (Thumb, 596 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dhcp_parse_reply &rArr; HF_Debug &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[570]"></a>dhcp_rebind</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[56d]"></a>dhcp_reboot</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[77]"></a>dhcp_recv</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[56b]"></a>dhcp_select</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[554]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[55a]"></a>dhcp_t1_timeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[559]"></a>dhcp_t2_timeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[565]"></a>dhcp_timeout</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hf_thread_delay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfsys_reset
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[57e]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[57f]"></a>dns_check_entry</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[588]"></a>dns_compare_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[581]"></a>dns_enqueue</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[585]"></a>dns_init_local</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dns.o(i.dns_init_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dns_init_local &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[583]"></a>dns_lookup</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dns.o(i.dns_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dns_lookup &rArr; dns_lookup_local
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup_local
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[587]"></a>dns_lookup_local</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dns.o(i.dns_lookup_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_lookup_local
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
</UL>

<P><STRONG><a name="[589]"></a>dns_parse_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dns.o(i.dns_parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[7a]"></a>dns_recv</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_init)
</UL>
<P><STRONG><a name="[580]"></a>dns_send</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[bd]"></a>pbuf_free_ooseq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[875]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[5cd]"></a>etharp_arp_input</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[5d6]"></a>etharp_raw</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[5d2]"></a>etharp_send_ip</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[5d3]"></a>find_entry</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, etharp.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = find_entry &rArr; free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[5d7]"></a>free_entry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, etharp.o(i.free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[5ce]"></a>update_arp_entry</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, etharp.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[76]"></a>cnmStaRecHandleEventPkt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cnm_mem.o(i.cnmStaRecHandleEventPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = cnmStaRecHandleEventPkt &rArr; qmActivateStaRec &rArr; qmDeactivateStaRec &rArr; qmDelRxBaEntry &rArr; wlanProcessQueuedSwRfb &rArr; nicRxProcessGOBroadcastPkt &rArr; nicRxProcessForwardPkt &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmGetStaRecByIndex
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmActivateStaRec
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cnm_mem.o(i.cnmStaSendUpdateCmd)
</UL>
<P><STRONG><a name="[52a]"></a>cnmStaSendRemoveCmd</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, cnm_mem.o(i.cnmStaSendRemoveCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cnmStaSendRemoveCmd &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecFree
</UL>

<P><STRONG><a name="[528]"></a>cnmStaSendUpdateCmd</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, cnm_mem.o(i.cnmStaSendUpdateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cnmStaSendUpdateCmd &rArr; wlanSendSetQueryCmd &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemFree
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmMemAlloc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanSendSetQueryCmd
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateRateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmStaRecChangeState
</UL>

<P><STRONG><a name="[52f]"></a>cnmTimerSetTimer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cnm_timer.o(i.cnmTimerSetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalSetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>

<P><STRONG><a name="[52e]"></a>cnmTimerStopTimer_impl</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cnm_timer.o(i.cnmTimerStopTimer_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalCancelTimer
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDel
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerPendingTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerDoTimeOutCheck
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
</UL>

<P><STRONG><a name="[8a8]"></a>qmDequeueTxPacketsFromPerStaQueues</STRONG> (Thumb, 1182 bytes, Stack size 72 bytes, que_mgt.o(i.qmDequeueTxPacketsFromPerStaQueues))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qmDequeueTxPacketsFromPerStaQueues
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDequeueTxPackets
</UL>

<P><STRONG><a name="[8a9]"></a>qmDequeueTxPacketsFromPerTypeQueues</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, que_mgt.o(i.qmDequeueTxPacketsFromPerTypeQueues))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = qmDequeueTxPacketsFromPerTypeQueues &rArr; wlanProcessQueuedMsduInfo &rArr; nicTxReturnMsduInfo &rArr; wlanReturnPacket &rArr; kalPacketFree &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanProcessQueuedMsduInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmDequeueTxPackets
</UL>

<P><STRONG><a name="[8aa]"></a>qmDetermineStaRecIndex</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, que_mgt.o(i.qmDetermineStaRecIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = qmDetermineStaRecIndex &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmEnqueueTxPackets
</UL>

<P><STRONG><a name="[8b6]"></a>rlmBssReset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rlm.o(i.rlmBssReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = rlmBssReset &rArr; cnmTimerStopTimer &rArr; cnmTimerStopTimer_impl &rArr; kalCancelTimer &rArr; lock_clear_bit &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocRsp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmBssAborted
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmFsmEventUninit
</UL>

<P><STRONG><a name="[8c9]"></a>rlmFillExtCapIE</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rlm.o(i.rlmFillExtCapIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rlmFillExtCapIE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateExtCapIE
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmReqGenerateExtCapIE
</UL>

<P><STRONG><a name="[8ca]"></a>rlmFillHtCapIE</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, rlm.o(i.rlmFillHtCapIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rlmFillHtCapIE
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateHtCapIE
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmReqGenerateHtCapIE
</UL>

<P><STRONG><a name="[8cb]"></a>rlmFillHtOpIE</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rlm.o(i.rlmFillHtOpIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rlmFillHtOpIE
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRspGenerateHtOpIE
</UL>

<P><STRONG><a name="[8c7]"></a>rlmRecBcnFromNeighborForClient</STRONG> (Thumb, 536 bytes, Stack size 36 bytes, rlm.o(i.rlmRecBcnFromNeighborForClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rlmRecBcnFromNeighborForClient
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessBcn
</UL>

<P><STRONG><a name="[8c6]"></a>rlmRecBcnInfoForClient</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rlm.o(i.rlmRecBcnInfoForClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rlmRecBcnInfoForClient &rArr; rlmRecIeInfoForClient &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRecIeInfoForClient
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessBcn
</UL>

<P><STRONG><a name="[8c4]"></a>rlmRecIeInfoForClient</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, rlm.o(i.rlmRecIeInfoForClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rlmRecIeInfoForClient &rArr; cnmTimerStartTimer &rArr; cnmTimerSetTimer &rArr; kalSetTimer &rArr; xTimerGenericCommand &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnmTimerStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmProcessAssocRsp
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmRecBcnInfoForClient
</UL>

<P><STRONG><a name="[9e1]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wps_attr_build.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[9e0]"></a>wpabuf_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_attr_build.o(i.wpabuf_len))
<BR><BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[9dc]"></a>wpabuf_put_be16</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_attr_build.o(i.wpabuf_put_be16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_type_flags
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_password_id
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_conn_type_flags
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_methods
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_auth_type_flags
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_state
</UL>

<P><STRONG><a name="[9df]"></a>wpabuf_put_buf</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wps_attr_build.o(i.wpabuf_put_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpabuf_put_buf &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_len
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
</UL>

<P><STRONG><a name="[9e2]"></a>wpabuf_put_data</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wps_attr_build.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[9e5]"></a>wpabuf_put_u8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wps_attr_build.o(i.wpabuf_put_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_conn_type_flags
</UL>

<P><STRONG><a name="[a26]"></a>wpabuf_head</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wps_attr_process.o(i.wpabuf_head))
<BR><BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
</UL>

<P><STRONG><a name="[a32]"></a>wps_process_cred_802_1x_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_802_1x_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a2a]"></a>wps_process_cred_auth_type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_auth_type))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a30]"></a>wps_process_cred_eap_identity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_eap_identity))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a2f]"></a>wps_process_cred_eap_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_eap_type))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a2b]"></a>wps_process_cred_encr_type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_encr_type))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a31]"></a>wps_process_cred_key_prov_auto</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_key_prov_auto))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a2e]"></a>wps_process_cred_mac_addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_mac_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a28]"></a>wps_process_cred_network_idx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_network_idx))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a2d]"></a>wps_process_cred_network_key</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wps_attr_process.o(i.wps_process_cred_network_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_process_cred_network_key
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a2c]"></a>wps_process_cred_network_key_idx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_process_cred_network_key_idx))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a29]"></a>wps_process_cred_ssid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wps_attr_process.o(i.wps_process_cred_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_process_cred_ssid
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[a33]"></a>wps_workaround_cred_key</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wps_attr_process.o(i.wps_workaround_cred_key))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>

<P><STRONG><a name="[9dd]"></a>wpabuf_put_be16</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wpabuf_put_be16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_be16 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_os_version
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_serial_number
</UL>

<P><STRONG><a name="[9e4]"></a>wpabuf_put_data</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wps_dev_attr.o(i.wpabuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_serial_number
</UL>

<P><STRONG><a name="[9e6]"></a>wpabuf_put_u8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wpabuf_put_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_u8 &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_serial_number
</UL>

<P><STRONG><a name="[9f4]"></a>wps_build_serial_number</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_build_serial_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_serial_number &rArr; wpabuf_put_data &rArr; wpabuf_put
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[a36]"></a>wps_process_dev_name</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_process_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wps_process_dev_name &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
</UL>

<P><STRONG><a name="[a38]"></a>wps_process_manufacturer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_process_manufacturer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wps_process_manufacturer &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
</UL>

<P><STRONG><a name="[a39]"></a>wps_process_model_name</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_process_model_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wps_process_model_name &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
</UL>

<P><STRONG><a name="[a3a]"></a>wps_process_model_number</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_process_model_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wps_process_model_number &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
</UL>

<P><STRONG><a name="[a3c]"></a>wps_process_primary_dev_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wps_dev_attr.o(i.wps_process_primary_dev_type))
<BR><BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
</UL>

<P><STRONG><a name="[a3b]"></a>wps_process_serial_number</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wps_dev_attr.o(i.wps_process_serial_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wps_process_serial_number &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
</UL>

<P><STRONG><a name="[6e7]"></a>icmp_send_response</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</UL>

<P><STRONG><a name="[700]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>

<P><STRONG><a name="[73]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_timers_140.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.arp_timer)
<LI> lwip_timers_140.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[78]"></a>dhcp_timer_coarse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_timers_140.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.dhcp_timer_coarse)
<LI> lwip_timers_140.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[79]"></a>dhcp_timer_fine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_timers_140.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.dhcp_timer_fine)
<LI> lwip_timers_140.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[7b]"></a>dns_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_timers_140.o(i.dns_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.dns_timer)
<LI> lwip_timers_140.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[8f]"></a>igmp_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip_timers_140.o(i.igmp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = igmp_timer &rArr; igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.igmp_timer)
<LI> lwip_timers_140.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[94]"></a>ip_reass_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip_timers_140.o(i.ip_reass_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.ip_reass_timer)
<LI> lwip_timers_140.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[d4]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_timers_140.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers_140.o(i.tcp_timer_needed)
<LI> lwip_timers_140.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[792]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[d3]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[935]"></a>tcp_close_shutdown</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[931]"></a>tcp_kill_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[930]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[933]"></a>tcp_new_port</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[93b]"></a>tcp_create_segment</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Debug
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[942]"></a>tcp_output_alloc_header</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[946]"></a>tcp_output_segment</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[947]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[951]"></a>tcp_write_checks</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_write_checks &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[8c0]"></a>rlmObssChnlLevelIn2G4</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, p2p_rlm_obss.o(i.rlmObssChnlLevelIn2G4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rlmObssChnlLevelIn2G4
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssChnlLevel
</UL>

<P><STRONG><a name="[8c1]"></a>rlmObssChnlLevelIn5G</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, p2p_rlm_obss.o(i.rlmObssChnlLevelIn5G))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rlmObssChnlLevelIn5G
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssChnlLevel
</UL>

<P><STRONG><a name="[c3]"></a>rlmObssScanTimeout</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rlm_obss.o(i.rlmObssScanTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = rlmObssScanTimeout &rArr; rlmUpdateParamsForAP &rArr; bssUpdateBeaconContent &rArr; nicUpdateBeaconIETemplate &rArr; kalSetEvent &rArr; wake_up_interruptible &rArr; msgq_msg_send_fromisr &rArr; mmm_free &rArr; mvprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmUpdateParamsForAP
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rlmObssTriggerScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rlm_obss.o(i.rlmObssInit)
</UL>
<P><STRONG><a name="[708]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[70a]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
</UL>

<P><STRONG><a name="[714]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[715]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[713]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[716]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[712]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[93]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[93f]"></a>tcp_listen_input</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[944]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[943]"></a>tcp_parseopt</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[940]"></a>tcp_process</STRONG> (Thumb, 1356 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[948]"></a>tcp_receive</STRONG> (Thumb, 2602 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[93e]"></a>tcp_timewait_input</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; hfmsgq_send &rArr; hf_thread_delay &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[195]"></a>_tm_carry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[a66]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[a5b]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[62]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
