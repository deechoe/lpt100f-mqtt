; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\updatetest.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\updatetest.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../../sdk/1.51/include/ -I"D:\Program Files\keil\ARM\RV31\INC" -I"D:\Program Files\keil\ARM\CMSIS\Include" -D__KEIL_MDK__ --enum_is_int --signed_chars --omf_browse=.\output\updatetest.crf ..\update\updatetest.c]
                          THUMB

                          AREA ||i.app_main||, CODE, READONLY, ALIGN=2

                  app_main PROC
;;;266    
;;;267    int USER_FUNC app_main (void)
000000  b57c              PUSH     {r2-r6,lr}
;;;268    {
;;;269    	time_t now=time(NULL);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       time
000008  9001              STR      r0,[sp,#4]
;;;270    	
;;;271    	HF_Debug(DEBUG_LEVEL,"sdk version(%s),the app_main start time is %d %s[AT DEMO]\n",hfsys_get_sdk_version(),now,ctime(&now));
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       ctime
000010  4604              MOV      r4,r0
000012  f7fffffe          BL       hfsys_get_sdk_version
000016  4605              MOV      r5,r0
000018  9400              STR      r4,[sp,#0]
00001a  462a              MOV      r2,r5
00001c  a11c              ADR      r1,|L1.144|
00001e  2003              MOVS     r0,#3
000020  9b01              LDR      r3,[sp,#4]
000022  f7fffffe          BL       HF_Debug
;;;272    	if(hfgpio_fmap_check(HFM_TYPE_LPB100)!=0)
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       hfgpio_fmap_check
00002c  b148              CBZ      r0,|L1.66|
;;;273    	{
;;;274    		while(1)
00002e  e007              B        |L1.64|
                  |L1.48|
;;;275    		{
;;;276    			HF_Debug(DEBUG_ERROR,"gpio map file error\n");
000030  a126              ADR      r1,|L1.204|
000032  2008              MOVS     r0,#8
000034  f7fffffe          BL       HF_Debug
;;;277    			msleep(1000);
000038  f44f707a          MOV      r0,#0x3e8
00003c  f7fffffe          BL       hf_thread_delay
                  |L1.64|
000040  e7f6              B        |L1.48|
                  |L1.66|
;;;278    		}
;;;279    	}
;;;280    	while(!hfnet_wifi_is_active())
000042  e002              B        |L1.74|
                  |L1.68|
;;;281    	{
;;;282    		msleep(50);
000044  2032              MOVS     r0,#0x32
000046  f7fffffe          BL       hf_thread_delay
                  |L1.74|
00004a  f7fffffe          BL       hfnet_wifi_is_active
00004e  2800              CMP      r0,#0                 ;280
000050  d0f8              BEQ      |L1.68|
;;;283    	}
;;;284    	user_upgrade();	
000052  f7fffffe          BL       user_upgrade
;;;285    	if(hfnet_start_assis(ASSIS_PORT)!=HF_SUCCESS)
000056  f64b7003          MOV      r0,#0xbf03
00005a  f7fffffe          BL       hfnet_start_assis
00005e  b118              CBZ      r0,|L1.104|
;;;286    	{
;;;287    		HF_Debug(DEBUG_WARN,"start httpd fail\n");
000060  a120              ADR      r1,|L1.228|
000062  2008              MOVS     r0,#8
000064  f7fffffe          BL       HF_Debug
                  |L1.104|
;;;288    	}	
;;;289    	if(hfnet_start_httpd(HFTHREAD_PRIORITIES_MID)!=HF_SUCCESS)
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       hfnet_start_httpd
00006e  b118              CBZ      r0,|L1.120|
;;;290    	{
;;;291    		HF_Debug(DEBUG_WARN,"start httpd fail\n");
000070  a11c              ADR      r1,|L1.228|
000072  2008              MOVS     r0,#8
000074  f7fffffe          BL       HF_Debug
                  |L1.120|
;;;292    	}
;;;293    	if(hfnet_start_uart(HFTHREAD_PRIORITIES_LOW,(hfnet_callback_t)uart_recv_callback)!=HF_SUCCESS)
000078  491f              LDR      r1,|L1.248|
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       hfnet_start_uart
000080  b118              CBZ      r0,|L1.138|
;;;294    	{
;;;295    		HF_Debug(DEBUG_WARN,"start uart fail!\n");
000082  a11e              ADR      r1,|L1.252|
000084  2008              MOVS     r0,#8
000086  f7fffffe          BL       HF_Debug
                  |L1.138|
;;;296    	}
;;;297    
;;;298    	
;;;299    	return 1;
00008a  2001              MOVS     r0,#1
;;;300    	
;;;301    }
00008c  bd7c              POP      {r2-r6,pc}
;;;302    
                          ENDP

00008e  0000              DCW      0x0000
                  |L1.144|
000090  73646b20          DCB      "sdk version(%s),the app_main start time is %d %s[AT DEM"
000094  76657273
000098  696f6e28
00009c  2573292c
0000a0  74686520
0000a4  6170705f
0000a8  6d61696e
0000ac  20737461
0000b0  72742074
0000b4  696d6520
0000b8  69732025
0000bc  64202573
0000c0  5b415420
0000c4  44454d  
0000c7  4f5d0a00          DCB      "O]\n",0
0000cb  00                DCB      0
                  |L1.204|
0000cc  6770696f          DCB      "gpio map file error\n",0
0000d0  206d6170
0000d4  2066696c
0000d8  65206572
0000dc  726f720a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L1.228|
0000e4  73746172          DCB      "start httpd fail\n",0
0000e8  74206874
0000ec  74706420
0000f0  6661696c
0000f4  0a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L1.248|
                          DCD      uart_recv_callback
                  |L1.252|
0000fc  73746172          DCB      "start uart fail!\n",0
000100  74207561
000104  72742066
000108  61696c21
00010c  0a00    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.hf_atcmd_upgrade_sw||, CODE, READONLY, ALIGN=1

                  hf_atcmd_upgrade_sw PROC
;;;90     
;;;91     static int USER_FUNC hf_atcmd_upgrade_sw(pat_session_t s,int argc,char *argv[],char *rsp,int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;92     {	
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
00000c  9e06              LDR      r6,[sp,#0x18]
;;;93     	if(argc<2)
00000e  2d02              CMP      r5,#2
000010  da03              BGE      |L2.26|
;;;94     	{
;;;95     		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L2.22|
;;;96     	}
;;;97     	
;;;98     	test_update_as_http(argv[0],argv[1]);
;;;99     	
;;;100    	return 0;
;;;101    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L2.26|
00001a  e9d40100          LDRD     r0,r1,[r4,#0]         ;98
00001e  f7fffffe          BL       test_update_as_http
000022  2000              MOVS     r0,#0                 ;100
000024  e7f7              B        |L2.22|
;;;102    
                          ENDP


                          AREA ||i.test_update_as_http||, CODE, READONLY, ALIGN=2

                  test_update_as_http PROC
;;;116    
;;;117    static int USER_FUNC test_update_as_http(char *purl,char *type)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;118    {
000004  b0a9              SUB      sp,sp,#0xa4
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
;;;119    	httpc_req_t  http_req;
;;;120    	char *content_data=NULL;
00000a  2400              MOVS     r4,#0
;;;121    	char *temp_buf=NULL;
00000c  2500              MOVS     r5,#0
;;;122    	parsed_url_t url={0};
00000e  2000              MOVS     r0,#0
000010  9020              STR      r0,[sp,#0x80]
000012  9021              STR      r0,[sp,#0x84]
000014  9022              STR      r0,[sp,#0x88]
000016  9023              STR      r0,[sp,#0x8c]
;;;123    	http_session_t hhttp=0;
000018  901f              STR      r0,[sp,#0x7c]
;;;124    	int total_size,read_size=0;
00001a  2700              MOVS     r7,#0
;;;125    	int rv=0;
00001c  901e              STR      r0,[sp,#0x78]
;;;126    	tls_init_config_t  *tls_cfg=NULL;
00001e  901d              STR      r0,[sp,#0x74]
;;;127    	char *test_url=purl;
000020  46cb              MOV      r11,r9
;;;128    	hftimer_handle_t upg_timer=NULL;
000022  901c              STR      r0,[sp,#0x70]
;;;129    	struct MD5Context md5_ctx;
;;;130    	uint8_t digest[16]={0};
000024  9002              STR      r0,[sp,#8]
000026  9003              STR      r0,[sp,#0xc]
000028  9004              STR      r0,[sp,#0x10]
00002a  9005              STR      r0,[sp,#0x14]
;;;131    	HFUPDATE_TYPE_E  upg_type;
;;;132    	
;;;133    	bzero(&http_req,sizeof(http_req));
00002c  2114              MOVS     r1,#0x14
00002e  a824              ADD      r0,sp,#0x90
000030  f7fffffe          BL       __aeabi_memclr4
;;;134    	http_req.type = HTTP_GET;
000034  2001              MOVS     r0,#1
000036  9024              STR      r0,[sp,#0x90]
;;;135    	http_req.version=HTTP_VER_1_1;
000038  9026              STR      r0,[sp,#0x98]
;;;136    	
;;;137    	if(strcasecmp(type,"wifi")==0)
00003a  a17e              ADR      r1,|L3.564|
00003c  4650              MOV      r0,r10
00003e  f7fffffe          BL       strcasecmp
000042  b910              CBNZ     r0,|L3.74|
;;;138    	{
;;;139    		upg_type = HFUPDATE_WIFIFW;
000044  f04f0802          MOV      r8,#2
000048  e001              B        |L3.78|
                  |L3.74|
;;;140    	}
;;;141    	else 
;;;142    		upg_type = HFUPDATE_SW;
00004a  f04f0800          MOV      r8,#0
                  |L3.78|
;;;143    	if((temp_buf = (char*)hfmem_malloc(256))==NULL)
00004e  f44f7080          MOV      r0,#0x100
000052  f7fffffe          BL       hfmem_malloc
000056  0005              MOVS     r5,r0
000058  d107              BNE      |L3.106|
;;;144    	{
;;;145    		u_printf("no memory\n");
00005a  a178              ADR      r1,|L3.572|
00005c  200a              MOVS     r0,#0xa
00005e  f7fffffe          BL       HF_Debug
;;;146    		rv= -HF_E_NOMEM;
000062  f06f000c          MVN      r0,#0xc
000066  901e              STR      r0,[sp,#0x78]
;;;147    		goto exit;
000068  e0c3              B        |L3.498|
                  |L3.106|
;;;148    	}	
;;;149    	bzero(temp_buf,sizeof(temp_buf));
00006a  2000              MOVS     r0,#0
00006c  6028              STR      r0,[r5,#0]
;;;150    	if((rv=hfhttp_parse_URL(test_url,temp_buf , 256, &url))!=HF_SUCCESS)
00006e  ab20              ADD      r3,sp,#0x80
000070  f44f7280          MOV      r2,#0x100
000074  4629              MOV      r1,r5
000076  4658              MOV      r0,r11
000078  f7fffffe          BL       http_parse_URL
00007c  901e              STR      r0,[sp,#0x78]
00007e  b100              CBZ      r0,|L3.130|
;;;151    	{
;;;152    		goto exit;
000080  e0b7              B        |L3.498|
                  |L3.130|
;;;153    	}
;;;154    
;;;155    	if((rv=hfhttp_open_session(&hhttp,test_url,0,tls_cfg,3))!=HF_SUCCESS)
000082  2003              MOVS     r0,#3
000084  9000              STR      r0,[sp,#0]
000086  2200              MOVS     r2,#0
000088  4659              MOV      r1,r11
00008a  a81f              ADD      r0,sp,#0x7c
00008c  9b1d              LDR      r3,[sp,#0x74]
00008e  f7fffffe          BL       http_open_session
000092  901e              STR      r0,[sp,#0x78]
000094  b120              CBZ      r0,|L3.160|
;;;156    	{
;;;157    		u_printf("http open fail\n");
000096  a16c              ADR      r1,|L3.584|
000098  200a              MOVS     r0,#0xa
00009a  f7fffffe          BL       HF_Debug
;;;158    		goto exit;
00009e  e0a8              B        |L3.498|
                  |L3.160|
;;;159    	}
;;;160    
;;;161    	hfsys_disable_all_soft_watchdogs();
0000a0  f7fffffe          BL       hfsys_disable_all_soft_watchdogs
;;;162    	hfupdate_start(upg_type);
0000a4  4640              MOV      r0,r8
0000a6  f7fffffe          BL       hfupdate_start
;;;163    	http_req.resource = url.resource;
0000aa  9823              LDR      r0,[sp,#0x8c]
0000ac  9025              STR      r0,[sp,#0x94]
;;;164    	hfhttp_prepare_req(hhttp,&http_req,HDR_ADD_CONN_CLOSE);
0000ae  2204              MOVS     r2,#4
0000b0  a924              ADD      r1,sp,#0x90
0000b2  981f              LDR      r0,[sp,#0x7c]
0000b4  f7fffffe          BL       http_prepare_req
;;;165    	hfhttp_add_header(hhttp,"Range","bytes=0");
0000b8  a267              ADR      r2,|L3.600|
0000ba  a169              ADR      r1,|L3.608|
0000bc  981f              LDR      r0,[sp,#0x7c]
0000be  f7fffffe          BL       http_add_header
;;;166    	if((rv=hfhttp_send_request(hhttp,&http_req))!=HF_SUCCESS)
0000c2  a924              ADD      r1,sp,#0x90
0000c4  981f              LDR      r0,[sp,#0x7c]
0000c6  f7fffffe          BL       http_send_request
0000ca  901e              STR      r0,[sp,#0x78]
0000cc  b120              CBZ      r0,|L3.216|
;;;167    	{
;;;168    		u_printf("http send request fail\n");
0000ce  a166              ADR      r1,|L3.616|
0000d0  200a              MOVS     r0,#0xa
0000d2  f7fffffe          BL       HF_Debug
;;;169    		goto exit;
0000d6  e08c              B        |L3.498|
                  |L3.216|
;;;170    	}
;;;171    	
;;;172    	content_data = (char*)hfmem_malloc(256);
0000d8  f44f7080          MOV      r0,#0x100
0000dc  f7fffffe          BL       hfmem_malloc
0000e0  4604              MOV      r4,r0
;;;173    	if(content_data==NULL)
0000e2  b91c              CBNZ     r4,|L3.236|
;;;174    	{
;;;175    		rv= -HF_E_NOMEM;
0000e4  f06f000c          MVN      r0,#0xc
0000e8  901e              STR      r0,[sp,#0x78]
;;;176    		goto exit;
0000ea  e082              B        |L3.498|
                  |L3.236|
;;;177    	}
;;;178    	total_size=0;
0000ec  2600              MOVS     r6,#0
;;;179    	bzero(content_data,256);
0000ee  f44f7180          MOV      r1,#0x100
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       __aeabi_memclr
;;;180    
;;;181    	if((upg_timer = hftimer_create("UPG-TIMER",100,true,1,update_timer_callback,0))==NULL)
0000f8  2000              MOVS     r0,#0
0000fa  4961              LDR      r1,|L3.640|
0000fc  2301              MOVS     r3,#1
0000fe  461a              MOV      r2,r3
000100  e9cd1000          STRD     r1,r0,[sp,#0]
000104  2164              MOVS     r1,#0x64
000106  a05f              ADR      r0,|L3.644|
000108  f7fffffe          BL       hftimer_create
00010c  901c              STR      r0,[sp,#0x70]
00010e  b920              CBNZ     r0,|L3.282|
;;;182    	{
;;;183    		u_printf("create timer 1 fail\n");
000110  a15f              ADR      r1,|L3.656|
000112  200a              MOVS     r0,#0xa
000114  f7fffffe          BL       HF_Debug
;;;184    		goto exit;
000118  e06b              B        |L3.498|
                  |L3.282|
;;;185    	}
;;;186    	
;;;187    	hftimer_start(upg_timer);
00011a  981c              LDR      r0,[sp,#0x70]
00011c  f7fffffe          BL       hftimer_start
;;;188    	MD5Init(&md5_ctx);
000120  a806              ADD      r0,sp,#0x18
000122  f7fffffe          BL       MD5Init
;;;189    	while((read_size=hfhttp_read_content(hhttp,content_data,256))>0)
000126  e011              B        |L3.332|
                  |L3.296|
;;;190    	{
;;;191    		hfupdate_write_file(upg_type, total_size,content_data, read_size);
000128  463b              MOV      r3,r7
00012a  4622              MOV      r2,r4
00012c  4631              MOV      r1,r6
00012e  4640              MOV      r0,r8
000130  f7fffffe          BL       hfupdate_write_file
;;;192    		MD5Update(&md5_ctx,(uint8_t*)content_data,read_size);
000134  463a              MOV      r2,r7
000136  4621              MOV      r1,r4
000138  a806              ADD      r0,sp,#0x18
00013a  f7fffffe          BL       MD5Update
;;;193    		total_size+=read_size;
00013e  443e              ADD      r6,r6,r7
;;;194    		u_printf("download file:[%d] [%d]\r",total_size,read_size);
000140  463b              MOV      r3,r7
000142  4632              MOV      r2,r6
000144  a158              ADR      r1,|L3.680|
000146  200a              MOVS     r0,#0xa
000148  f7fffffe          BL       HF_Debug
                  |L3.332|
00014c  f44f7280          MOV      r2,#0x100             ;189
000150  4621              MOV      r1,r4                 ;189
000152  981f              LDR      r0,[sp,#0x7c]         ;189
000154  f7fffffe          BL       http_read_content
000158  1e07              SUBS     r7,r0,#0              ;189
00015a  dce5              BGT      |L3.296|
;;;195    	}
;;;196    	MD5Final(digest,&md5_ctx);
00015c  a906              ADD      r1,sp,#0x18
00015e  a802              ADD      r0,sp,#8
000160  f7fffffe          BL       MD5Final
;;;197    	u_printf("read_size:%d digest is ",total_size);
000164  4632              MOV      r2,r6
000166  a157              ADR      r1,|L3.708|
000168  200a              MOVS     r0,#0xa
00016a  f7fffffe          BL       HF_Debug
;;;198    	u_printf("%02x%02x%02x%02x",digest[0],digest[1],digest[2],digest[3]);
00016e  f89d000b          LDRB     r0,[sp,#0xb]
000172  f89d100a          LDRB     r1,[sp,#0xa]
000176  e9cd1000          STRD     r1,r0,[sp,#0]
00017a  f89d3009          LDRB     r3,[sp,#9]
00017e  f89d2008          LDRB     r2,[sp,#8]
000182  a156              ADR      r1,|L3.732|
000184  200a              MOVS     r0,#0xa
000186  f7fffffe          BL       HF_Debug
;;;199    	u_printf("%02x%02x%02x%02x",digest[4],digest[5],digest[6],digest[7]);
00018a  f89d000f          LDRB     r0,[sp,#0xf]
00018e  f89d100e          LDRB     r1,[sp,#0xe]
000192  e9cd1000          STRD     r1,r0,[sp,#0]
000196  f89d300d          LDRB     r3,[sp,#0xd]
00019a  f89d200c          LDRB     r2,[sp,#0xc]
00019e  a14f              ADR      r1,|L3.732|
0001a0  200a              MOVS     r0,#0xa
0001a2  f7fffffe          BL       HF_Debug
;;;200    	u_printf("%02x%02x%02x%02x",digest[8],digest[9],digest[10],digest[11]);
0001a6  f89d0013          LDRB     r0,[sp,#0x13]
0001aa  f89d1012          LDRB     r1,[sp,#0x12]
0001ae  e9cd1000          STRD     r1,r0,[sp,#0]
0001b2  f89d3011          LDRB     r3,[sp,#0x11]
0001b6  f89d2010          LDRB     r2,[sp,#0x10]
0001ba  a148              ADR      r1,|L3.732|
0001bc  200a              MOVS     r0,#0xa
0001be  f7fffffe          BL       HF_Debug
;;;201    	u_printf("%02x%02x%02x%02x\n",digest[12],digest[13],digest[14],digest[15]);
0001c2  f89d0017          LDRB     r0,[sp,#0x17]
0001c6  f89d1016          LDRB     r1,[sp,#0x16]
0001ca  e9cd1000          STRD     r1,r0,[sp,#0]
0001ce  f89d3015          LDRB     r3,[sp,#0x15]
0001d2  f89d2014          LDRB     r2,[sp,#0x14]
0001d6  a146              ADR      r1,|L3.752|
0001d8  200a              MOVS     r0,#0xa
0001da  f7fffffe          BL       HF_Debug
;;;202    	
;;;203    	if(hfupdate_complete(upg_type,total_size)!=HF_SUCCESS)
0001de  4631              MOV      r1,r6
0001e0  4640              MOV      r0,r8
0001e2  f7fffffe          BL       hfupdate_complete
0001e6  b118              CBZ      r0,|L3.496|
;;;204    	{
;;;205    		u_printf("update software fail\n");
0001e8  a146              ADR      r1,|L3.772|
0001ea  200a              MOVS     r0,#0xa
0001ec  f7fffffe          BL       HF_Debug
                  |L3.496|
;;;206    	}
;;;207    exit:
0001f0  bf00              NOP      
                  |L3.498|
;;;208    	if(upg_timer!=NULL)
0001f2  981c              LDR      r0,[sp,#0x70]
0001f4  b128              CBZ      r0,|L3.514|
;;;209    	{
;;;210    		hftimer_delete(upg_timer);
0001f6  981c              LDR      r0,[sp,#0x70]
0001f8  f7fffffe          BL       hftimer_delete
;;;211    		hftimer_delete(upg_timer);
0001fc  981c              LDR      r0,[sp,#0x70]
0001fe  f7fffffe          BL       hftimer_delete
                  |L3.514|
;;;212    	}
;;;213    	if(temp_buf!=NULL)	
000202  b115              CBZ      r5,|L3.522|
;;;214    		hfmem_free(temp_buf);
000204  4628              MOV      r0,r5
000206  f7fffffe          BL       hfmem_free
                  |L3.522|
;;;215    	if(content_data!=NULL)
00020a  b114              CBZ      r4,|L3.530|
;;;216    		hfmem_free(content_data);
00020c  4620              MOV      r0,r4
00020e  f7fffffe          BL       hfmem_free
                  |L3.530|
;;;217    	if(hhttp!=0)
000212  981f              LDR      r0,[sp,#0x7c]
000214  b110              CBZ      r0,|L3.540|
;;;218    		hfhttp_close_session(&hhttp);
000216  a81f              ADD      r0,sp,#0x7c
000218  f7fffffe          BL       http_close_session
                  |L3.540|
;;;219    	hfgpio_fset_out_low(HFGPIO_F_NREADY);
00021c  f04f5180          MOV      r1,#0x10000000
000220  2013              MOVS     r0,#0x13
000222  f7fffffe          BL       hfgpio_configure_fpin
;;;220    	hfsys_enable_all_soft_watchdogs();
000226  f7fffffe          BL       hfsys_enable_all_soft_watchdogs
;;;221    	return rv;
00022a  981e              LDR      r0,[sp,#0x78]
;;;222    }
00022c  b029              ADD      sp,sp,#0xa4
00022e  e8bd8ff0          POP      {r4-r11,pc}
;;;223    
                          ENDP

000232  0000              DCW      0x0000
                  |L3.564|
000234  77696669          DCB      "wifi",0
000238  00      
000239  00                DCB      0
00023a  00                DCB      0
00023b  00                DCB      0
                  |L3.572|
00023c  6e6f206d          DCB      "no memory\n",0
000240  656d6f72
000244  790a00  
000247  00                DCB      0
                  |L3.584|
000248  68747470          DCB      "http open fail\n",0
00024c  206f7065
000250  6e206661
000254  696c0a00
                  |L3.600|
000258  62797465          DCB      "bytes=0",0
00025c  733d3000
                  |L3.608|
000260  52616e67          DCB      "Range",0
000264  6500    
000266  00                DCB      0
000267  00                DCB      0
                  |L3.616|
000268  68747470          DCB      "http send request fail\n",0
00026c  2073656e
000270  64207265
000274  71756573
000278  74206661
00027c  696c0a00
                  |L3.640|
                          DCD      update_timer_callback
                  |L3.644|
000284  5550472d          DCB      "UPG-TIMER",0
000288  54494d45
00028c  5200    
00028e  00                DCB      0
00028f  00                DCB      0
                  |L3.656|
000290  63726561          DCB      "create timer 1 fail\n",0
000294  74652074
000298  696d6572
00029c  20312066
0002a0  61696c0a
0002a4  00      
0002a5  00                DCB      0
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L3.680|
0002a8  646f776e          DCB      "download file:[%d] [%d]\r",0
0002ac  6c6f6164
0002b0  2066696c
0002b4  653a5b25
0002b8  645d205b
0002bc  25645d0d
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L3.708|
0002c4  72656164          DCB      "read_size:%d digest is ",0
0002c8  5f73697a
0002cc  653a2564
0002d0  20646967
0002d4  65737420
0002d8  69732000
                  |L3.732|
0002dc  25303278          DCB      "%02x%02x%02x%02x",0
0002e0  25303278
0002e4  25303278
0002e8  25303278
0002ec  00      
0002ed  00                DCB      0
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L3.752|
0002f0  25303278          DCB      "%02x%02x%02x%02x\n",0
0002f4  25303278
0002f8  25303278
0002fc  25303278
000300  0a00    
000302  00                DCB      0
000303  00                DCB      0
                  |L3.772|
000304  75706461          DCB      "update software fail\n",0
000308  74652073
00030c  6f667477
000310  61726520
000314  6661696c
000318  0a00    
00031a  00                DCB      0
00031b  00                DCB      0

                          AREA ||i.uart_recv_callback||, CODE, READONLY, ALIGN=1

                  uart_recv_callback PROC
;;;103    
;;;104    static int USER_FUNC uart_recv_callback(uint32_t event,char *data,uint32_t len,uint32_t buf_len)
000000  b510              PUSH     {r4,lr}
;;;105    {
000002  4604              MOV      r4,r0
;;;106    	return len;
000004  4610              MOV      r0,r2
;;;107    }
000006  bd10              POP      {r4,pc}
;;;108    
                          ENDP


                          AREA ||i.update_timer_callback||, CODE, READONLY, ALIGN=1

                  update_timer_callback PROC
;;;108    
;;;109    void USER_FUNC update_timer_callback( hftimer_handle_t htimer )
000000  b510              PUSH     {r4,lr}
;;;110    {
000002  4604              MOV      r4,r0
;;;111    	if(hfgpio_fpin_is_high(HFGPIO_F_NREADY))
000004  2013              MOVS     r0,#0x13
000006  f7fffffe          BL       hfgpio_fpin_is_high
00000a  b128              CBZ      r0,|L5.24|
;;;112    		hfgpio_fset_out_low(HFGPIO_F_NREADY);
00000c  f04f5180          MOV      r1,#0x10000000
000010  2013              MOVS     r0,#0x13
000012  f7fffffe          BL       hfgpio_configure_fpin
000016  e004              B        |L5.34|
                  |L5.24|
;;;113    	else
;;;114    		hfgpio_fset_out_high(HFGPIO_F_NREADY);
000018  f04f5100          MOV      r1,#0x20000000
00001c  2013              MOVS     r0,#0x13
00001e  f7fffffe          BL       hfgpio_configure_fpin
                  |L5.34|
;;;115    }
000022  bd10              POP      {r4,pc}
;;;116    
                          ENDP


                          AREA ||i.user_upgrade||, CODE, READONLY, ALIGN=2

                  user_upgrade PROC
;;;223    
;;;224    void USER_FUNC user_upgrade(void)
000000  b510              PUSH     {r4,lr}
;;;225    {
;;;226    	int result=0;
000002  2400              MOVS     r4,#0
;;;227    	
;;;228    	hfgpio_configure_fpin(HFGPIO_F_UPGRADE_GPIO,HFM_IO_TYPE_INPUT|HFPIO_DEFAULT);
000004  f04f6100          MOV      r1,#0x8000000
000008  201e              MOVS     r0,#0x1e
00000a  f7fffffe          BL       hfgpio_configure_fpin
;;;229    	msleep(10);
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       hf_thread_delay
;;;230    	
;;;231    	if(hfgpio_fpin_is_high(HFGPIO_F_UPGRADE_GPIO)==0)
000014  201e              MOVS     r0,#0x1e
000016  f7fffffe          BL       hfgpio_fpin_is_high
00001a  b928              CBNZ     r0,|L6.40|
;;;232    	{
;;;233    		result = hfupdate_auto_upgrade(0x20000000);
00001c  f04f5000          MOV      r0,#0x20000000
000020  f7fffffe          BL       hfupdate_auto_upgrade
000024  4604              MOV      r4,r0
000026  e003              B        |L6.48|
                  |L6.40|
;;;234    	}
;;;235    	else
;;;236    	{
;;;237    		result = hfupdate_auto_upgrade(0);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       hfupdate_auto_upgrade
00002e  4604              MOV      r4,r0
                  |L6.48|
;;;238    	}
;;;239    	
;;;240    	if(result<0)
000030  2c00              CMP      r4,#0
000032  da04              BGE      |L6.62|
;;;241    	{
;;;242    		u_printf("no need to upgrade\n");
000034  a115              ADR      r1,|L6.140|
000036  200a              MOVS     r0,#0xa
000038  f7fffffe          BL       HF_Debug
;;;243    		return ;
;;;244    	}
;;;245    	else if(result==0)
;;;246    	{
;;;247    		u_printf("upgrade success!\n");
;;;248    		while(1)
;;;249    		{
;;;250    			hfgpio_fset_out_high(HFGPIO_F_UPGRADE_LED);
;;;251    			msleep(200);
;;;252    			hfgpio_fset_out_low(HFGPIO_F_UPGRADE_LED);
;;;253    			msleep(200);
;;;254    		}
;;;255    	}
;;;256    	else 
;;;257    	{
;;;258    		u_printf("upgrade fail %d\n",result);
;;;259    		while(1)
;;;260    		{
;;;261    			hfgpio_fset_out_low(HFGPIO_F_UPGRADE_LED);
;;;262    			msleep(1000);
;;;263    		}
;;;264    	}
;;;265    }
00003c  bd10              POP      {r4,pc}
                  |L6.62|
00003e  b9ac              CBNZ     r4,|L6.108|
000040  a117              ADR      r1,|L6.160|
000042  200a              MOVS     r0,#0xa               ;247
000044  f7fffffe          BL       HF_Debug
000048  e00f              B        |L6.106|
                  |L6.74|
00004a  f04f5100          MOV      r1,#0x20000000        ;250
00004e  201d              MOVS     r0,#0x1d              ;250
000050  f7fffffe          BL       hfgpio_configure_fpin
000054  20c8              MOVS     r0,#0xc8              ;251
000056  f7fffffe          BL       hf_thread_delay
00005a  f04f5180          MOV      r1,#0x10000000        ;252
00005e  201d              MOVS     r0,#0x1d              ;252
000060  f7fffffe          BL       hfgpio_configure_fpin
000064  20c8              MOVS     r0,#0xc8              ;253
000066  f7fffffe          BL       hf_thread_delay
                  |L6.106|
00006a  e7ee              B        |L6.74|
                  |L6.108|
00006c  4622              MOV      r2,r4                 ;258
00006e  a111              ADR      r1,|L6.180|
000070  200a              MOVS     r0,#0xa               ;258
000072  f7fffffe          BL       HF_Debug
000076  e008              B        |L6.138|
                  |L6.120|
000078  f04f5180          MOV      r1,#0x10000000        ;261
00007c  201d              MOVS     r0,#0x1d              ;261
00007e  f7fffffe          BL       hfgpio_configure_fpin
000082  f44f707a          MOV      r0,#0x3e8             ;262
000086  f7fffffe          BL       hf_thread_delay
                  |L6.138|
00008a  e7f5              B        |L6.120|
;;;266    
                          ENDP

                  |L6.140|
00008c  6e6f206e          DCB      "no need to upgrade\n",0
000090  65656420
000094  746f2075
000098  70677261
00009c  64650a00
                  |L6.160|
0000a0  75706772          DCB      "upgrade success!\n",0
0000a4  61646520
0000a8  73756363
0000ac  65737321
0000b0  0a00    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L6.180|
0000b4  75706772          DCB      "upgrade fail %d\n",0
0000b8  61646520
0000bc  6661696c
0000c0  2025640a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  hf_gpio_fid_to_pid_map_table
                          DCD      0x00080002
                          DCD      0x00080003
                          DCD      0x00080004
                          DCD      0x00080005
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x008b0027
                          DCD      0x008b0028
                          DCD      0x008b0029
                          DCD      0x008b002a
                          DCD      0x028b001b
                          DCD      0x008b001c
                          DCD      0x028b001d
                          DCD      0x008b001e
                          DCD      0x03830017
                          DCD      0x00000000
                          DCD      0x02830008
                          DCD      0x00000000
                          DCD      0x0083002b
                          DCD      0x00000000
                          DCD      0x0083002d
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0083002c
                          DCD      0x02830007
                          %        260
                  user_define_at_cmds_table
                          DCD      ||.conststring||
                          DCD      hf_atcmd_upgrade_sw
                          DCD      ||.conststring||+0xa
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  55504752          DCB      "UPGRADESW",0
000004  41444553
000008  5700    
00000a  20202041          DCB      "   AT+UPGRADESW=url\r\n",0
00000e  542b5550
000012  47524144
000016  4553573d
00001a  75726c0d
00001e  0a00    
